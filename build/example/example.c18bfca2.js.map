{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/construct.js","../node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/process/browser.js","../node_modules/path-browserify/index.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../node_modules/buffer/index.js","../bind-imgui.js","imconfig.ts","imgui.ts","imgui_impl.ts","imgui_demo.ts","imgui_memory_editor.ts","main.ts","index.ts"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","Module","_scriptDir","document","currentScript","src","undefined","key","moduleOverrides","hasOwnProperty","arguments_","ENVIRONMENT_HAS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","window","importScripts","node","scriptDirectory","read_","readBinary","nodeFS","nodePath","__dirname","filename","binary","ret","tryParseAsDataURI","require","toString","buffer","Uint8Array","assert","replace","slice","ex","ExitStatus","status","message","abort","read","f","data","intArrayToString","readbuffer","scriptArgs","quit","print","console","log","warn","error","printErr","self","location","href","indexOf","substr","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","err","responseType","response","onload","onerror","out","bind","tempRet0","wasmBinary","wasmMemory","setTempRet0","value","WebAssembly","wasmTable","Table","ABORT","condition","text","UTF8Decoder","TextDecoder","UTF8ArrayToString","u8Array","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","u1","u2","String","fromCharCode","ch","UTF8ToString","ptr","HEAPU8","UTF16Decoder","HEAP8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","DYNAMIC_BASE","buf","INITIAL_TOTAL_MEMORY","callRuntimeCallbacks","callbacks","callback","shift","func","arg","Memory","byteLength","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","DYNAMICTOP_PTR","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","what","dataURIPrefix","isDataURI","startsWith","wasmBinaryFile","path","getBinary","___wasm_call_ctors","___exception_infos","PATH","SYSCALLS","buffers","printChar","stream","curr","varargs","get","getStr","get64","low","getZero","getShiftFromSize","size","TypeError","embind_charCodes","readLatin1String","c","awaitingDependencies","registeredTypes","typeDependencies","char_0","char_9","makeLegalFunctionName","charCodeAt","createNamedFunction","body","Function","extendError","baseErrorType","errorName","errorClass","stack","Object","create","constructor","BindingError","throwBindingError","InternalError","throwInternalError","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","forEach","type","unregisteredTypes","registered","dt","rawType","registeredInstance","options","ignoreDuplicateRegistrations","cb","ClassHandle_isAliasOf","other","ClassHandle","leftClass","$$","ptrType","registeredClass","left","rightClass","right","baseClass","upcast","throwInstanceAlreadyDeleted","obj","finalizationGroup","detachFinalizer","handle","releaseClassHandle","count","runDestructor","smartPtr","smartPtrType","rawDestructor","attachFinalizer","FinalizationGroup","iter","result","next","done","unregister","register","ClassHandle_clone","preservePointerOnDelete","clone","o","getPrototypeOf","deleteScheduled","ClassHandle_delete","ClassHandle_isDeleted","delayFunction","deletionQueue","flushPendingDeletes","pop","ClassHandle_deleteLater","registeredPointers","ensureOverloadTable","proto","methodName","humanName","overloadTable","prevFunc","argCount","exposePublicSymbol","numArguments","RegisteredClass","instancePrototype","getActualType","downcast","pureVirtualFunctions","upcastPointer","ptrClass","desiredClass","constNoSmartPtrRawPointerToWireType","destructors","isReference","_embind_repr","handleClass","genericPointerToWireType","isSmartPointer","rawConstructor","isConst","sharingPolicy","clonedHandle","rawShare","__emval_register","nonConstNoSmartPtrRawPointerToWireType","simpleReadValueFromPointer","pointer","RegisteredPointer_getPointee","rawGetPointee","RegisteredPointer_destructor","RegisteredPointer_deleteObject","getInheritedInstanceCount","keys","registeredInstances","getLiveInheritedInstances","rv","k","setDelayFunction","fn","getInheritedInstance","class_","getBasestPointer","makeClassHandle","record","RegisteredPointer_fromWireType","rawPointer","getPointee","destructor","makeDefaultHandle","pointeeType","actualType","toType","registeredPointerRecord","constPointerType","pointerType","dp","downcastPointer","RegisteredPointer","destructorFunction","replacePublicSymbol","embind__requireFunction","signature","rawFunction","fp","FUNCTION_TABLE","dc","makeDynCaller","dynCall","join","UnboundTypeError","getTypeName","___getTypeName","_free","throwUnboundTypeError","types","unboundTypes","seen","visit","map","heap32VectorToArray","firstElement","runDestructors","del","new_","argumentList","dummy","r","craftInvokerFunction","argTypes","classType","cppInvokerFunc","cppTargetFunc","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","paramName","invokerFunction","validateThis","this_","emval_free_list","emval_handle_array","__emval_decref","refcount","count_emval_handles","get_first_emval","v","t","floatReadValueFromPointer","integerReadValueFromPointer","signed","requireHandle","requireRegisteredType","impl","__emval_lookupTypes","argWireTypes","a","emval_symbols","getStringOrSymbol","address","symbol","emval_methodCallers","embind_init_charCodes","codes","ASSERTIONS","chr","decodeBase64","atob","input","keyStr","chr1","chr2","chr3","enc2","enc3","enc4","output","charAt","intArrayFromBase64","s","Buffer","from","_","byteOffset","decoded","bytes","asmLibraryArg","___cxa_allocate_exception","_malloc","___cxa_throw","adjusted","caught","rethrown","__ZSt18uncaught_exceptionv","uncaught_exceptions","___lock","___syscall221","which","FS","ErrnoError","errno","___syscall5","pathname","flags","mode","fd","___syscall54","___unlock","__embind_register_bool","trueValue","falseValue","wt","heap","__embind_register_class","rawPointerType","rawConstPointerType","baseClassRawType","getActualTypeSignature","upcastSignature","downcastSignature","destructorSignature","legalFunctionName","base","basePrototype","constructor_body","referenceConverter","pointerConverter","constPointerConverter","__embind_register_class_constructor","rawClassType","rawArgTypesAddr","invokerSignature","invoker","rawArgTypes","__embind_register_class_function","rawInvoker","context","isPureVirtual","unboundTypesHandler","method","className","memberFunction","__embind_register_class_property","fieldName","getterReturnType","getterSignature","getter","getterContext","setterArgumentType","setterSignature","setter","setterContext","desc","enumerable","configurable","set","defineProperty","__embind_register_constant","__embind_register_emval","__embind_register_float","__embind_register_function","invokerArgsArray","__embind_register_integer","primitiveType","minRange","maxRange","fromWireType","bitshift","isUnsignedType","__embind_register_memory_view","dataTypeIndex","typeMapping","TA","decodeMemoryView","__embind_register_std_string","stdStringIsUTF8","endChar","endCharSwap","decodeStartPtr","currentBytePtr","stringSegment","ArrayBuffer","valueIsOfTypeString","Uint8ClampedArray","lengthBytesUTF8","u","stringToUTF8Array","outU8Array","outIdx","maxBytesToWrite","startIdx","charCode","__embind_register_std_wstring","charSize","getHeap","HEAP","start","__embind_register_void","isVoid","__emval_as","returnType","destructorsRef","rd","__emval_call","__emval_call_void_method","caller","__emval_get_method_caller","retType","signatureName","params","functionName","functionBody","offset","id","__emval_addMethodCaller","__emval_get_property","__emval_incref","__emval_new_array","__emval_new_cstring","__emval_new_object","__emval_run_destructors","__emval_set_property","__emval_strictly_equals","first","second","__emval_take_value","__emval_typeof","_emscripten_memcpy_big","dest","num","_emscripten_resize_heap","requestedSize","_fd_close","_fd_read","iov","iovcnt","pnum","getStreamFromFD","doReadv","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","j","_setTempRet0","$i","asm","createWasm","info","receiveInstance","instance","removeRunDependency","clearInterval","receiveInstantiatedSource","instantiateArrayBuffer","receiver","getBinaryPromise","fetch","Promise","resolve","reject","credentials","then","catch","instantiate","reason","instantiateAsync","instantiateStreaming","calledRun","doRun","postRun","unshift","addOnPostRun","preRun","addOnPreRun","old","runCaller","define"],"mappings":"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","file":"example.c18bfca2.js","sourceRoot":"..\\..\\example","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","\r\nvar Module = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  return (\r\nfunction(Module) {\r\n  Module = Module || {};\r\n\r\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_HAS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_HAS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_NODE=ENVIRONMENT_HAS_NODE&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+\"/\";var nodeFS;var nodePath;read_=function shell_read(filename,binary){var ret;ret=tryParseAsDataURI(filename);if(!ret){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);ret=nodeFS[\"readFileSync\"](filename)}return binary?ret:ret.toString()};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}read_=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)};setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":926,\"maximum\":926+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var WASM_PAGE_SIZE=65536;var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5318576,DYNAMICTOP_PTR=75536;var INITIAL_TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE,\"maximum\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_TOTAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;throw\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\"}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"data:application/octet-stream;base64,\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_unstable\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function ___cxa_allocate_exception(size){return _malloc(size)}var ___exception_infos={};var ___exception_last=0;function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr}function ___lock(){}var PATH={splitPath:function(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path===\"/\")return\"/\";var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"))},join2:function(l,r){return PATH.normalize(l+\"/\"+r)}};var SYSCALLS={buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();return low},getZero:function(){SYSCALLS.get()}};function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function(\"body\",\"return function \"+name+\"() {\\n\"+'    \"use strict\";'+\"    return body.apply(this, arguments);\\n\"+\"};\\n\")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+\": \"+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options){options=options||{};if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":8,\"readValueFromPointer\":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError(\"Unknown boolean type size: \"+name)}return this[\"fromWireType\"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+\" instance already deleted\")}var finalizationGroup=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function attachFinalizer(handle){if(\"undefined\"===typeof FinalizationGroup){attachFinalizer=function(handle){return handle};return handle}finalizationGroup=new FinalizationGroup(function(iter){for(var result=iter.next();!result.done;result=iter.next()){var $$=result.value;if(!$$.ptr){console.warn(\"object already deleted: \"+$$.ptr)}else{releaseClassHandle($$)}}});attachFinalizer=function(handle){finalizationGroup.register(handle,handle.$$,handle.$$);return handle};detachFinalizer=function(handle){finalizationGroup.unregister(handle.$$)};return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj[\"delete\"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype[\"isAliasOf\"]=ClassHandle_isAliasOf;ClassHandle.prototype[\"clone\"]=ClassHandle_clone;ClassHandle.prototype[\"delete\"]=ClassHandle_delete;ClassHandle.prototype[\"isDeleted\"]=ClassHandle_isDeleted;ClassHandle.prototype[\"deleteLater\"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError(\"Expected null or instance of \"+desiredClass.name+\", got an instance of \"+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError(\"Cannot convert argument of type \"+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+\" to parameter type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError(\"Passing raw pointer to smart pointer is illegal\")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError(\"Cannot convert argument of type \"+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+\" to parameter type \"+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle[\"clone\"]();ptr=this.rawShare(ptr,__emval_register(function(){clonedHandle[\"delete\"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError(\"Unsupporting sharing policy\")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}if(handle.$$.ptrType.isConst){throwBindingError(\"Cannot convert argument of type \"+handle.$$.ptrType.name+\" to parameter type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle[\"delete\"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module[\"getInheritedInstanceCount\"]=getInheritedInstanceCount;Module[\"getLiveInheritedInstances\"]=getLiveInheritedInstances;Module[\"flushPendingDeletes\"]=flushPendingDeletes;Module[\"setDelayFunction\"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError(\"ptr should not be undefined\")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError(\"makeClassHandle requires ptr and ptrType\")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError(\"Both smartPtrType and smartPtr must be specified\")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance[\"clone\"]()}else{var rv=registeredInstance[\"clone\"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype[\"argPackAdvance\"]=8;RegisteredPointer.prototype[\"readValueFromPointer\"]=simpleReadValueFromPointer;RegisteredPointer.prototype[\"deleteObject\"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype[\"fromWireType\"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this[\"toWireType\"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this[\"toWireType\"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this[\"toWireType\"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){var args=[];for(var i=1;i<signature.length;++i){args.push(\"a\"+i)}var name=\"dynCall_\"+signature+\"_\"+rawFunction;var body=\"return function \"+name+\"(\"+args.join(\", \")+\") {\\n\";body+=\"    return dynCall(rawFunction\"+(args.length?\", \":\"\")+args.join(\", \")+\");\\n\";body+=\"};\\n\";return new Function(\"dynCall\",\"rawFunction\",body)(dynCall,rawFunction)}var fp;if(Module[\"FUNCTION_TABLE_\"+signature]!==undefined){fp=Module[\"FUNCTION_TABLE_\"+signature][rawFunction]}else if(typeof FUNCTION_TABLE!==\"undefined\"){fp=FUNCTION_TABLE[rawFunction]}else{var dc=Module[\"dynCall_\"+signature];if(dc===undefined){dc=Module[\"dynCall_\"+signature.replace(/f/g,\"d\")];if(dc===undefined){throwBindingError(\"No dynCall invoker for signature: \"+signature)}}fp=makeDynCaller(dc)}if(typeof fp!==\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError(\"Cannot construct \"+name+\" due to unbound types\",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError(\"Use 'new' to construct \"+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+\" has no accessible constructor\")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError(\"Tried to invoke ctor of \"+name+\" with invalid number of parameters (\"+arguments.length+\") - expected (\"+Object.keys(registeredClass.constructor_body).toString()+\") parameters instead!\")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+\"*\",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+\" const*\",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=\"constructor \"+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\"+(argCount-1)+\") for class '\"+classType.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError(\"Cannot construct \"+classType.name+\" due to unbound types\",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+\" called with \"+arguments.length+\" arguments, expected \"+(argCount-1))}var destructors=[];var args=new Array(argCount);args[0]=rawConstructor;for(var i=1;i<argCount;++i){args[i]=argTypes[i][\"toWireType\"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0][\"fromWireType\"](ptr)};return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(\"new_ called with constructor type \"+typeof constructor+\" which is not a function\")}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\"}var invokerFnBody=\"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\"+\"if (arguments.length !== \"+(argCount-2)+\") {\\n\"+\"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount-2)+\" args!');\\n\"+\"}\\n\";if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\"}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired}invokerFnBody+=(returns?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+\".\"+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError(\"Cannot call \"+humanName+\" due to unbound types\",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}function validateThis(this_,classType,humanName){if(!(this_ instanceof Object)){throwBindingError(humanName+' with invalid \"this\": '+this_)}if(!(this_ instanceof classType.registeredClass.constructor)){throwBindingError(humanName+' incompatible with \"this\" of type '+this_.constructor.name)}if(!this_.$$.ptr){throwBindingError(\"cannot call emscripten binding method \"+humanName+\" on deleted object\")}return upcastPointer(this_.$$.ptr,this_.$$.ptrType.registeredClass,classType.registeredClass)}function __embind_register_class_property(classType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){fieldName=readLatin1String(fieldName);getter=embind__requireFunction(getterSignature,getter);whenDependentTypesAreResolved([],[classType],function(classType){classType=classType[0];var humanName=classType.name+\".\"+fieldName;var desc={get:function(){throwUnboundTypeError(\"Cannot access \"+humanName+\" due to unbound types\",[getterReturnType,setterArgumentType])},enumerable:true,configurable:true};if(setter){desc.set=function(){throwUnboundTypeError(\"Cannot access \"+humanName+\" due to unbound types\",[getterReturnType,setterArgumentType])}}else{desc.set=function(v){throwBindingError(humanName+\" is a read-only property\")}}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);whenDependentTypesAreResolved([],setter?[getterReturnType,setterArgumentType]:[getterReturnType],function(types){var getterReturnType=types[0];var desc={get:function(){var ptr=validateThis(this,classType,humanName+\" getter\");return getterReturnType[\"fromWireType\"](getter(getterContext,ptr))},enumerable:true};if(setter){setter=embind__requireFunction(setterSignature,setter);var setterArgumentType=types[1];desc.set=function(v){var ptr=validateThis(this,classType,humanName+\" setter\");var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,v));runDestructors(destructors)}}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);return[]});return[]})}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type[\"fromWireType\"](value);return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv},\"toWireType\":function(destructors,value){return __emval_register(value)},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(\"Unknown float type: \"+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(value){return value},\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}return value},\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.indexOf(\"unsigned\")!=-1;registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+_embind_repr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\")}return isUnsignedType?value>>>0:value|0},\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(heap[\"buffer\"],data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var endChar=HEAPU8[value+4+length];var endCharSwap=0;if(endChar!=0){endCharSwap=endChar;HEAPU8[value+4+length]=0}var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(HEAPU8[currentBytePtr]==0){var stringSegment=UTF8ToString(decodeStartPtr);if(str===undefined)str=stringSegment;else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}if(endCharSwap!=0)HEAPU8[value+4+length]=endCharSwap}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value===\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var getHeap,shift;if(charSize===2){getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,\"fromWireType\":function(value){var HEAP=getHeap();var length=HEAPU32[value>>2];var a=new Array(length);var start=value+4>>shift;for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAP[start+i])}_free(value);return a.join(\"\")},\"toWireType\":function(destructors,value){var length=value.length;var ptr=_malloc(4+length*charSize);var HEAP=getHeap();HEAPU32[ptr>>2]=length;var start=ptr+4>>shift;for(var i=0;i<length;++i){HEAP[start+i]=value.charCodeAt(i)}if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":function(){return undefined},\"toWireType\":function(destructors,o){return undefined}})}function requireHandle(handle){if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handle_array[handle].value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl}function __emval_as(handle,returnType,destructorsRef){handle=requireHandle(handle);returnType=requireRegisteredType(returnType,\"emval::as\");var destructors=[];var rd=__emval_register(destructors);HEAP32[destructorsRef>>2]=rd;return returnType[\"toWireType\"](destructors,handle)}function __emval_lookupTypes(argCount,argTypes,argWireTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i],\"parameter \"+i)}return a}function __emval_call(handle,argCount,argTypes,argv){handle=requireHandle(handle);var types=__emval_lookupTypes(argCount,argTypes);var args=new Array(argCount);for(var i=0;i<argCount;++i){var type=types[i];args[i]=type[\"readValueFromPointer\"](argv);argv+=type[\"argPackAdvance\"]}var rv=handle.apply(undefined,args);return __emval_register(rv)}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}else{return symbol}}var emval_methodCallers=[];function __emval_call_void_method(caller,handle,methodName,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);caller(handle,methodName,null,args)}function __emval_addMethodCaller(caller){var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id}function __emval_get_method_caller(argCount,argTypes){var types=__emval_lookupTypes(argCount,argTypes);var retType=types[0];var signatureName=retType.name+\"_$\"+types.slice(1).map(function(t){return t.name}).join(\"_\")+\"$\";var params=[\"retType\"];var args=[retType];var argsList=\"\";for(var i=0;i<argCount-1;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;params.push(\"argType\"+i);args.push(types[1+i])}var functionName=makeLegalFunctionName(\"methodCaller_\"+signatureName);var functionBody=\"return function \"+functionName+\"(handle, name, destructors, args) {\\n\";var offset=0;for(var i=0;i<argCount-1;++i){functionBody+=\"    var arg\"+i+\" = argType\"+i+\".readValueFromPointer(args\"+(offset?\"+\"+offset:\"\")+\");\\n\";offset+=types[i+1][\"argPackAdvance\"]}functionBody+=\"    var rv = handle[name](\"+argsList+\");\\n\";for(var i=0;i<argCount-1;++i){if(types[i+1][\"deleteObject\"]){functionBody+=\"    argType\"+i+\".deleteObject(arg\"+i+\");\\n\"}}if(!retType.isVoid){functionBody+=\"    return retType.toWireType(destructors, rv);\\n\"}functionBody+=\"};\\n\";params.push(functionBody);var invokerFunction=new_(Function,params).apply(null,args);return __emval_addMethodCaller(invokerFunction)}function __emval_get_property(handle,key){handle=requireHandle(handle);key=requireHandle(key);return __emval_register(handle[key])}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function __emval_new_array(){return __emval_register([])}function __emval_new_cstring(v){return __emval_register(getStringOrSymbol(v))}function __emval_new_object(){return __emval_register({})}function __emval_run_destructors(handle){var destructors=emval_handle_array[handle].value;runDestructors(destructors);__emval_decref(handle)}function __emval_set_property(handle,key,value){handle=requireHandle(handle);key=requireHandle(key);value=requireHandle(value);handle[key]=value}function __emval_strictly_equals(first,second){first=requireHandle(first);second=requireHandle(second);return first===second}function __emval_take_value(type,argv){type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](argv);return __emval_register(v)}function __emval_typeof(handle){handle=requireHandle(handle);return __emval_register(typeof handle)}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function abortOnCannotGrowMemory(requestedSize){abort(\"OOM\")}function _emscripten_resize_heap(requestedSize){abortOnCannotGrowMemory(requestedSize)}function _fd_close(fd){try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _setTempRet0($i){setTempRet0($i|0)}embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");init_emval();var ASSERTIONS=false;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,\"Character code \"+chr+\" (\"+String.fromCharCode(chr)+\")  at offset \"+i+\" not in 0x00-0xFF.\")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\"\")}var decodeBase64=typeof atob===\"function\"?atob:function(input){var keyStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var output=\"\";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE===\"boolean\"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,\"base64\")}catch(_){buf=new Buffer(s,\"base64\")}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error(\"Converting base64 string to bytes failed.\")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={\"P\":___cxa_allocate_exception,\"O\":___cxa_throw,\"F\":___lock,\"t\":___syscall221,\"J\":___syscall5,\"I\":___syscall54,\"n\":___unlock,\"D\":__embind_register_bool,\"f\":__embind_register_class,\"l\":__embind_register_class_constructor,\"c\":__embind_register_class_function,\"a\":__embind_register_class_property,\"u\":__embind_register_constant,\"B\":__embind_register_emval,\"q\":__embind_register_float,\"b\":__embind_register_function,\"h\":__embind_register_integer,\"g\":__embind_register_memory_view,\"r\":__embind_register_std_string,\"C\":__embind_register_std_wstring,\"E\":__embind_register_void,\"e\":__emval_as,\"M\":__emval_call,\"j\":__emval_call_void_method,\"o\":__emval_decref,\"i\":__emval_get_method_caller,\"m\":__emval_get_property,\"p\":__emval_incref,\"K\":__emval_new_array,\"w\":__emval_new_cstring,\"Q\":__emval_new_object,\"N\":__emval_run_destructors,\"k\":__emval_set_property,\"v\":__emval_strictly_equals,\"d\":__emval_take_value,\"L\":__emval_typeof,\"z\":_emscripten_memcpy_big,\"A\":_emscripten_resize_heap,\"s\":_fd_close,\"G\":_fd_read,\"x\":_fd_seek,\"H\":_fd_write,\"memory\":wasmMemory,\"y\":_setTempRet0,\"table\":wasmTable};var asm=createWasm();Module[\"asm\"]=asm;var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return Module[\"asm\"][\"R\"].apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return Module[\"asm\"][\"S\"].apply(null,arguments)};var _free=Module[\"_free\"]=function(){return Module[\"asm\"][\"T\"].apply(null,arguments)};var __ZSt18uncaught_exceptionv=Module[\"__ZSt18uncaught_exceptionv\"]=function(){return Module[\"asm\"][\"U\"].apply(null,arguments)};var ___getTypeName=Module[\"___getTypeName\"]=function(){return Module[\"asm\"][\"V\"].apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=function(){return Module[\"asm\"][\"W\"].apply(null,arguments)};var dynCall_vii=Module[\"dynCall_vii\"]=function(){return Module[\"asm\"][\"X\"].apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){return Module[\"asm\"][\"Y\"].apply(null,arguments)};var dynCall_viii=Module[\"dynCall_viii\"]=function(){return Module[\"asm\"][\"Z\"].apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){return Module[\"asm\"][\"_\"].apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){return Module[\"asm\"][\"$\"].apply(null,arguments)};var dynCall_iii=Module[\"dynCall_iii\"]=function(){return Module[\"asm\"][\"aa\"].apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){return Module[\"asm\"][\"ba\"].apply(null,arguments)};var dynCall_fii=Module[\"dynCall_fii\"]=function(){return Module[\"asm\"][\"ca\"].apply(null,arguments)};var dynCall_viif=Module[\"dynCall_viif\"]=function(){return Module[\"asm\"][\"da\"].apply(null,arguments)};var dynCall_iiiii=Module[\"dynCall_iiiii\"]=function(){return Module[\"asm\"][\"ea\"].apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){return Module[\"asm\"][\"fa\"].apply(null,arguments)};var dynCall_iiiiiii=Module[\"dynCall_iiiiiii\"]=function(){return Module[\"asm\"][\"ga\"].apply(null,arguments)};var dynCall_i=Module[\"dynCall_i\"]=function(){return Module[\"asm\"][\"ha\"].apply(null,arguments)};var dynCall_iiif=Module[\"dynCall_iiif\"]=function(){return Module[\"asm\"][\"ia\"].apply(null,arguments)};var dynCall_viiif=Module[\"dynCall_viiif\"]=function(){return Module[\"asm\"][\"ja\"].apply(null,arguments)};var dynCall_viiiif=Module[\"dynCall_viiiif\"]=function(){return Module[\"asm\"][\"ka\"].apply(null,arguments)};var dynCall_viiiifif=Module[\"dynCall_viiiifif\"]=function(){return Module[\"asm\"][\"la\"].apply(null,arguments)};var dynCall_viiiifi=Module[\"dynCall_viiiifi\"]=function(){return Module[\"asm\"][\"ma\"].apply(null,arguments)};var dynCall_viiiiiii=Module[\"dynCall_viiiiiii\"]=function(){return Module[\"asm\"][\"na\"].apply(null,arguments)};var dynCall_viiiiiif=Module[\"dynCall_viiiiiif\"]=function(){return Module[\"asm\"][\"oa\"].apply(null,arguments)};var dynCall_viiiiif=Module[\"dynCall_viiiiif\"]=function(){return Module[\"asm\"][\"pa\"].apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){return Module[\"asm\"][\"qa\"].apply(null,arguments)};var dynCall_viifiif=Module[\"dynCall_viifiif\"]=function(){return Module[\"asm\"][\"ra\"].apply(null,arguments)};var dynCall_viifii=Module[\"dynCall_viifii\"]=function(){return Module[\"asm\"][\"sa\"].apply(null,arguments)};var dynCall_viifiiifi=Module[\"dynCall_viifiiifi\"]=function(){return Module[\"asm\"][\"ta\"].apply(null,arguments)};var dynCall_viiiiiiiiiii=Module[\"dynCall_viiiiiiiiiii\"]=function(){return Module[\"asm\"][\"ua\"].apply(null,arguments)};var dynCall_viiiiiiifi=Module[\"dynCall_viiiiiiifi\"]=function(){return Module[\"asm\"][\"va\"].apply(null,arguments)};var dynCall_viiiiiifi=Module[\"dynCall_viiiiiifi\"]=function(){return Module[\"asm\"][\"wa\"].apply(null,arguments)};var dynCall_viifffi=Module[\"dynCall_viifffi\"]=function(){return Module[\"asm\"][\"xa\"].apply(null,arguments)};var dynCall_viiifi=Module[\"dynCall_viiifi\"]=function(){return Module[\"asm\"][\"ya\"].apply(null,arguments)};var dynCall_viiiiiiiiii=Module[\"dynCall_viiiiiiiiii\"]=function(){return Module[\"asm\"][\"za\"].apply(null,arguments)};var dynCall_viiiiifif=Module[\"dynCall_viiiiifif\"]=function(){return Module[\"asm\"][\"Aa\"].apply(null,arguments)};var dynCall_viiiiifi=Module[\"dynCall_viiiiifi\"]=function(){return Module[\"asm\"][\"Ba\"].apply(null,arguments)};var dynCall_viiiiiiii=Module[\"dynCall_viiiiiiii\"]=function(){return Module[\"asm\"][\"Ca\"].apply(null,arguments)};var dynCall_viiiiiiif=Module[\"dynCall_viiiiiiif\"]=function(){return Module[\"asm\"][\"Da\"].apply(null,arguments)};var dynCall_viiifiif=Module[\"dynCall_viiifiif\"]=function(){return Module[\"asm\"][\"Ea\"].apply(null,arguments)};var dynCall_viiifii=Module[\"dynCall_viiifii\"]=function(){return Module[\"asm\"][\"Fa\"].apply(null,arguments)};var dynCall_viiifiiifi=Module[\"dynCall_viiifiiifi\"]=function(){return Module[\"asm\"][\"Ga\"].apply(null,arguments)};var dynCall_viiiiiiiiiiii=Module[\"dynCall_viiiiiiiiiiii\"]=function(){return Module[\"asm\"][\"Ha\"].apply(null,arguments)};var dynCall_viiiiiiiifi=Module[\"dynCall_viiiiiiiifi\"]=function(){return Module[\"asm\"][\"Ia\"].apply(null,arguments)};var dynCall_viiifffi=Module[\"dynCall_viiifffi\"]=function(){return Module[\"asm\"][\"Ja\"].apply(null,arguments)};var dynCall_viifffiii=Module[\"dynCall_viifffiii\"]=function(){return Module[\"asm\"][\"Ka\"].apply(null,arguments)};var dynCall_iifif=Module[\"dynCall_iifif\"]=function(){return Module[\"asm\"][\"La\"].apply(null,arguments)};var dynCall_viifiii=Module[\"dynCall_viifiii\"]=function(){return Module[\"asm\"][\"Ma\"].apply(null,arguments)};var dynCall_fiii=Module[\"dynCall_fiii\"]=function(){return Module[\"asm\"][\"Na\"].apply(null,arguments)};var dynCall_iiifffiii=Module[\"dynCall_iiifffiii\"]=function(){return Module[\"asm\"][\"Oa\"].apply(null,arguments)};var dynCall_iiifif=Module[\"dynCall_iiifif\"]=function(){return Module[\"asm\"][\"Pa\"].apply(null,arguments)};var dynCall_viiifiii=Module[\"dynCall_viiifiii\"]=function(){return Module[\"asm\"][\"Qa\"].apply(null,arguments)};var dynCall_iiiifii=Module[\"dynCall_iiiifii\"]=function(){return Module[\"asm\"][\"Ra\"].apply(null,arguments)};var dynCall_iiiif=Module[\"dynCall_iiiif\"]=function(){return Module[\"asm\"][\"Sa\"].apply(null,arguments)};var dynCall_vif=Module[\"dynCall_vif\"]=function(){return Module[\"asm\"][\"Ta\"].apply(null,arguments)};var dynCall_iiiiiiii=Module[\"dynCall_iiiiiiii\"]=function(){return Module[\"asm\"][\"Ua\"].apply(null,arguments)};var dynCall_v=Module[\"dynCall_v\"]=function(){return Module[\"asm\"][\"Va\"].apply(null,arguments)};var dynCall_f=Module[\"dynCall_f\"]=function(){return Module[\"asm\"][\"Wa\"].apply(null,arguments)};var dynCall_vf=Module[\"dynCall_vf\"]=function(){return Module[\"asm\"][\"Xa\"].apply(null,arguments)};var dynCall_vff=Module[\"dynCall_vff\"]=function(){return Module[\"asm\"][\"Ya\"].apply(null,arguments)};var dynCall_fi=Module[\"dynCall_fi\"]=function(){return Module[\"asm\"][\"Za\"].apply(null,arguments)};var dynCall_viiiiiiiii=Module[\"dynCall_viiiiiiiii\"]=function(){return Module[\"asm\"][\"_a\"].apply(null,arguments)};var dynCall_vfii=Module[\"dynCall_vfii\"]=function(){return Module[\"asm\"][\"$a\"].apply(null,arguments)};var dynCall_iiiiiiiiii=Module[\"dynCall_iiiiiiiiii\"]=function(){return Module[\"asm\"][\"ab\"].apply(null,arguments)};var dynCall_iiiiiiiii=Module[\"dynCall_iiiiiiiii\"]=function(){return Module[\"asm\"][\"bb\"].apply(null,arguments)};var dynCall_iiiiii=Module[\"dynCall_iiiiii\"]=function(){return Module[\"asm\"][\"cb\"].apply(null,arguments)};var dynCall_iiiddii=Module[\"dynCall_iiiddii\"]=function(){return Module[\"asm\"][\"db\"].apply(null,arguments)};var dynCall_vifi=Module[\"dynCall_vifi\"]=function(){return Module[\"asm\"][\"eb\"].apply(null,arguments)};var dynCall_d=Module[\"dynCall_d\"]=function(){return Module[\"asm\"][\"fb\"].apply(null,arguments)};var dynCall_vifii=Module[\"dynCall_vifii\"]=function(){return Module[\"asm\"][\"gb\"].apply(null,arguments)};var dynCall_vfffiii=Module[\"dynCall_vfffiii\"]=function(){return Module[\"asm\"][\"hb\"].apply(null,arguments)};var dynCall_iiff=Module[\"dynCall_iiff\"]=function(){return Module[\"asm\"][\"ib\"].apply(null,arguments)};var dynCall_iif=Module[\"dynCall_iif\"]=function(){return Module[\"asm\"][\"jb\"].apply(null,arguments)};var dynCall_viifi=Module[\"dynCall_viifi\"]=function(){return Module[\"asm\"][\"kb\"].apply(null,arguments)};var dynCall_viff=Module[\"dynCall_viff\"]=function(){return Module[\"asm\"][\"lb\"].apply(null,arguments)};var dynCall_iiiiiiiiiii=Module[\"dynCall_iiiiiiiiiii\"]=function(){return Module[\"asm\"][\"mb\"].apply(null,arguments)};var dynCall_iiiiddii=Module[\"dynCall_iiiiddii\"]=function(){return Module[\"asm\"][\"nb\"].apply(null,arguments)};var dynCall_di=Module[\"dynCall_di\"]=function(){return Module[\"asm\"][\"ob\"].apply(null,arguments)};var dynCall_iiiifi=Module[\"dynCall_iiiifi\"]=function(){return Module[\"asm\"][\"pb\"].apply(null,arguments)};var dynCall_vifffiii=Module[\"dynCall_vifffiii\"]=function(){return Module[\"asm\"][\"qb\"].apply(null,arguments)};var dynCall_iiiff=Module[\"dynCall_iiiff\"]=function(){return Module[\"asm\"][\"rb\"].apply(null,arguments)};var dynCall_iiifi=Module[\"dynCall_iiifi\"]=function(){return Module[\"asm\"][\"sb\"].apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return Module[\"asm\"][\"tb\"].apply(null,arguments)};var dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=function(){return Module[\"asm\"][\"ub\"].apply(null,arguments)};Module[\"asm\"]=asm;var calledRun;Module[\"then\"]=function(func){if(calledRun){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}noExitRuntime=true;run();\r\n\r\n\r\n  return Module\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n      module.exports = Module;\r\n    else if (typeof define === 'function' && define['amd'])\r\n      define([], function() { return Module; });\r\n    else if (typeof exports === 'object')\r\n      exports[\"Module\"] = Module;\r\n    ","//-----------------------------------------------------------------------------\r\n// COMPILE-TIME OPTIONS FOR DEAR IMGUI\r\n// Most options (memory allocation, clipboard callbacks, etc.) can be set at runtime via the ImGuiIO structure - ImGui::GetIO().\r\n//-----------------------------------------------------------------------------\r\n// A) You may edit imconfig.h (and not overwrite it when updating imgui, or maintain a patch/branch with your modifications to imconfig.h)\r\n// B) or add configuration directives in your own file and compile with #define IMGUI_USER_CONFIG \"myfilename.h\"\r\n// If you do so you need to make sure that configuration settings are defined consistently _everywhere_ dear imgui is used, which include\r\n// the imgui*.cpp files but also _any_ of your code that uses imgui. This is because some compile-time options have an affect on data structures.\r\n// Defining those options in imconfig.h will ensure every compilation unit gets to see the same data structure layouts.\r\n// Call IMGUI_CHECKVERSION() from your .cpp files to verify that the data structures your files are using are matching the ones imgui.cpp is using.\r\n//-----------------------------------------------------------------------------\r\n\r\n// #pragma once\r\n\r\n//---- Define assertion handler. Defaults to calling assert().\r\n//#define IM_ASSERT(_EXPR)  MyAssert(_EXPR)\r\n//#define IM_ASSERT(_EXPR)  ((void)(_EXPR))     // Disable asserts\r\n\r\n//---- Define attributes of all API symbols declarations, e.g. for DLL under Windows.\r\n//#define IMGUI_API __declspec( dllexport )\r\n//#define IMGUI_API __declspec( dllimport )\r\n\r\n//---- Don't define obsolete functions names. Consider enabling from time to time or when updating to reduce likelihood of using already obsolete function/names.\r\n//#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS\r\n\r\n//---- Don't implement demo windows functionality (ShowDemoWindow()/ShowStyleEditor()/ShowUserGuide() methods will be empty)\r\n//---- It is very strongly recommended to NOT disable the demo windows. Please read the comment at the top of imgui_demo.cpp.\r\n//#define IMGUI_DISABLE_DEMO_WINDOWS\r\n\r\n//---- Don't implement some functions to reduce linkage requirements.\r\n//#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS   // Don't use and link with OpenClipboard/GetClipboardData/CloseClipboard etc.\r\n//#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // Don't use and link with ImmGetContext/ImmSetCompositionWindow.\r\n//#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\r\n//#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\r\n//#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free(). You will need to call ImGui::SetAllocatorFunctions().\r\n\r\n//---- Include imgui_user.h at the end of imgui.h as a convenience\r\n//#define IMGUI_INCLUDE_IMGUI_USER_H\r\n\r\n//---- Pack colors to BGRA8 instead of RGBA8 (if you needed to convert from one to another anyway)\r\n//#define IMGUI_USE_BGRA_PACKED_COLOR\r\nexport const IMGUI_USE_BGRA_PACKED_COLOR: boolean = false;\r\n\r\n//---- Implement STB libraries in a namespace to avoid linkage conflicts (defaults to global namespace)\r\n//#define IMGUI_STB_NAMESPACE     ImGuiStb\r\n\r\n//---- Define constructor and implicit cast operators to convert back<>forth from your math types and ImVec2/ImVec4.\r\n// This will be inlined as part of ImVec2 and ImVec4 class declarations.\r\n/*\r\n#define IM_VEC2_CLASS_EXTRA                                                 \\\r\n        ImVec2(const MyVec2& f) { x = f.x; y = f.y; }                       \\\r\n        operator MyVec2() const { return MyVec2(x,y); }\r\n\r\n#define IM_VEC4_CLASS_EXTRA                                                 \\\r\n        ImVec4(const MyVec4& f) { x = f.x; y = f.y; z = f.z; w = f.w; }     \\\r\n        operator MyVec4() const { return MyVec4(x,y,z,w); }\r\n*/\r\n\r\n//---- Use 32-bit vertex indices (instead of default 16-bit) to allow meshes with more than 64K vertices. Render function needs to support it.\r\n//#define ImDrawIdx unsigned int\r\n\r\n//---- Tip: You can add extra functions within the ImGui:: namespace, here or in your own headers files.\r\n/*\r\nnamespace ImGui\r\n{\r\n    void MyFunction(const char* name, const MyMatrix44& v);\r\n}\r\n*/\r\n","export interface XY { x: number, y: number; }\r\nexport interface XYZ extends XY { z: number; }\r\nexport interface XYZW extends XYZ { w: number; }\r\n\r\nexport interface RGB { r: number; g: number; b: number; }\r\nexport interface RGBA extends RGB { a: number; }\r\n\r\nimport * as Bind from \"./bind-imgui\";\r\nexport { Bind };\r\n\r\nlet bind: Bind.Module;\r\nexport default async function(value?: Partial<Bind.Module>): Promise<void> {\r\n    return new Promise<void>((resolve: () => void) => {\r\n        Bind.default(value).then((value: Bind.Module): void => {\r\n            bind = value;\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport { bind };\r\n\r\nfunction import_Scalar(sca: XY | XYZ | XYZW | Bind.ImAccess<number> | Bind.ImScalar<number> | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): Bind.ImScalar<number> {\r\n    if (Array.isArray(sca)) { return [ sca[0] ]; }\r\n    if (typeof sca === \"function\") { return [ sca() ]; }\r\n    return [ sca.x ];\r\n}\r\n\r\nfunction export_Scalar(tuple: Bind.ImScalar<number>, sca: XY | XYZ | XYZW | Bind.ImAccess<number> | Bind.ImScalar<number> | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): void {\r\n    if (Array.isArray(sca)) { sca[0] = tuple[0]; return; }\r\n    if (typeof sca === \"function\") { sca(tuple[0]); return; }\r\n    sca.x = tuple[0];\r\n}\r\n\r\nfunction import_Vector2(vec: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): Bind.ImTuple2<number> {\r\n    if (Array.isArray(vec)) { return [ vec[0], vec[1] ]; }\r\n    return [ vec.x, vec.y ];\r\n}\r\n\r\nfunction export_Vector2(tuple: Bind.ImTuple2<number>, vec: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): void {\r\n    if (Array.isArray(vec)) { vec[0] = tuple[0]; vec[1] = tuple[1]; return; }\r\n    vec.x = tuple[0]; vec.y = tuple[1];\r\n}\r\n\r\nfunction import_Vector3(vec: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): Bind.ImTuple3<number> {\r\n    if (Array.isArray(vec)) { return [ vec[0], vec[1], vec[2] ]; }\r\n    return [ vec.x, vec.y, vec.z ];\r\n}\r\n\r\nfunction export_Vector3(tuple: Bind.ImTuple3<number>, vec: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): void {\r\n    if (Array.isArray(vec)) { vec[0] = tuple[0]; vec[1] = tuple[1]; vec[2] = tuple[2]; return; }\r\n    vec.x = tuple[0]; vec.y = tuple[1]; vec.z = tuple[2];\r\n}\r\n\r\nfunction import_Vector4(vec: XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): Bind.ImTuple4<number> {\r\n    if (Array.isArray(vec)) { return [ vec[0], vec[1], vec[2], vec[3] || 0 ]; }\r\n    return [ vec.x, vec.y, vec.z, vec.w ];\r\n}\r\n\r\nfunction export_Vector4(tuple: Bind.ImTuple4<number>, vec: XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): void {\r\n    if (Array.isArray(vec)) { vec[0] = tuple[0]; vec[1] = tuple[1]; vec[2] = tuple[2]; vec[3] = tuple[3]; return; }\r\n    vec.x = tuple[0]; vec.y = tuple[1]; vec.z = tuple[2]; vec.w = tuple[3];\r\n}\r\n\r\nfunction import_Color3(col: RGB | RGBA | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): Bind.ImTuple3<number> {\r\n    if (Array.isArray(col)) { return [ col[0], col[1], col[2] ]; }\r\n    if (\"r\" in col) { return [ col.r, col.g, col.b ]; }\r\n    return [ col.x, col.y, col.z ];\r\n}\r\n\r\nfunction export_Color3(tuple: Bind.ImTuple3<number>, col: RGB | RGBA | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4): void {\r\n    if (Array.isArray(col)) { col[0] = tuple[0]; col[1] = tuple[1]; col[2] = tuple[2]; return; }\r\n    if (\"r\" in col) { col.r = tuple[0]; col.g = tuple[1]; col.b = tuple[2]; return; }\r\n    col.x = tuple[0]; col.y = tuple[1]; col.z = tuple[2];\r\n}\r\n\r\nfunction import_Color4(col: RGBA | Bind.ImTuple4<number> | Bind.interface_ImVec4 | RGBA): Bind.ImTuple4<number> {\r\n    if (Array.isArray(col)) { return [ col[0], col[1], col[2], col[3] ]; }\r\n    if (\"r\" in col) { return [ col.r, col.g, col.b, col.a ]; }\r\n    return [ col.x, col.y, col.z, col.w ];\r\n}\r\n\r\nfunction export_Color4(tuple: Bind.ImTuple4<number>, col: RGBA | Bind.ImTuple4<number> | Bind.interface_ImVec4 | RGBA): void {\r\n    if (Array.isArray(col)) { col[0] = tuple[0]; col[1] = tuple[1]; col[2] = tuple[2]; return; }\r\n    if (\"r\" in col) { col.r = tuple[0]; col.g = tuple[1]; col.b = tuple[2]; return; }\r\n    col.x = tuple[0]; col.y = tuple[1]; col.z = tuple[2];\r\n}\r\n\r\nimport * as config from \"./imconfig\";\r\n\r\nexport const IMGUI_VERSION: string = \"1.71\"; // bind.IMGUI_VERSION;\r\nexport const IMGUI_VERSION_NUM: number = 17100; // bind.IMGUI_VERSION_NUM;\r\n\r\n// #define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert))\r\nexport function IMGUI_CHECKVERSION(): boolean { return DebugCheckVersionAndDataLayout(IMGUI_VERSION, bind.ImGuiIOSize, bind.ImGuiStyleSize, bind.ImVec2Size, bind.ImVec4Size, bind.ImDrawVertSize, bind.ImDrawIdxSize); }\r\n\r\nexport function IM_ASSERT(_EXPR: boolean | number): void { if (!_EXPR) { throw new Error(); } }\r\n\r\nexport function IM_ARRAYSIZE(_ARR: ArrayLike<any> | ImStringBuffer): number {\r\n    if (_ARR instanceof ImStringBuffer) {\r\n        return _ARR.size;\r\n    } else {\r\n        return _ARR.length;\r\n    }\r\n}\r\n\r\nexport class ImStringBuffer {\r\n    constructor(public size: number, public buffer: string = \"\") {}\r\n}\r\n\r\nexport { ImAccess } from \"./bind-imgui\";\r\nexport { ImScalar } from \"./bind-imgui\";\r\nexport { ImTuple2 } from \"./bind-imgui\";\r\nexport { ImTuple3 } from \"./bind-imgui\";\r\nexport { ImTuple4 } from \"./bind-imgui\";\r\n\r\nexport type ImTextureID = WebGLTexture;\r\n\r\n// Flags for ImGui::Begin()\r\nexport { ImGuiWindowFlags as WindowFlags };\r\nexport enum ImGuiWindowFlags {\r\n    None                   = 0,\r\n    NoTitleBar             = 1 << 0,   // Disable title-bar\r\n    NoResize               = 1 << 1,   // Disable user resizing with the lower-right grip\r\n    NoMove                 = 1 << 2,   // Disable user moving the window\r\n    NoScrollbar            = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programatically)\r\n    NoScrollWithMouse      = 1 << 4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.\r\n    NoCollapse             = 1 << 5,   // Disable user collapsing window by double-clicking on it\r\n    AlwaysAutoResize       = 1 << 6,   // Resize every window to its content every frame\r\n    NoBackground           = 1 << 7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).\r\n    NoSavedSettings        = 1 << 8,   // Never load/save settings in .ini file\r\n    NoMouseInputs          = 1 << 9,   // Disable catching mouse or keyboard inputs, hovering test with pass through.\r\n    MenuBar                = 1 << 10,  // Has a menu-bar\r\n    HorizontalScrollbar    = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.\r\n    NoFocusOnAppearing     = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state\r\n    NoBringToFrontOnFocus  = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programatically giving it focus)\r\n    AlwaysVerticalScrollbar= 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)\r\n    AlwaysHorizontalScrollbar= 1 << 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)\r\n    AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)\r\n    NoNavInputs            = 1 << 18,  // No gamepad/keyboard navigation within the window\r\n    NoNavFocus             = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)\r\n    UnsavedDocument        = 1 << 20,  // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.\r\n    NoNav                  = NoNavInputs | NoNavFocus,\r\n    NoDecoration           = NoTitleBar | NoResize | NoScrollbar | NoCollapse,\r\n    NoInputs               = NoMouseInputs | NoNavInputs | NoNavFocus,\r\n\r\n    // [Internal]\r\n    NavFlattened           = 1 << 23,  // (WIP) Allow gamepad/keyboard navigation to cross over parent border to this child (only use on child that have no scrolling!)\r\n    ChildWindow            = 1 << 24,  // Don't use! For internal use by BeginChild()\r\n    Tooltip                = 1 << 25,  // Don't use! For internal use by BeginTooltip()\r\n    Popup                  = 1 << 26,  // Don't use! For internal use by BeginPopup()\r\n    Modal                  = 1 << 27,  // Don't use! For internal use by BeginPopupModal()\r\n    ChildMenu              = 1 << 28,   // Don't use! For internal use by BeginMenu()\r\n}\r\n\r\n// Flags for ImGui::InputText()\r\nexport { ImGuiInputTextFlags as InputTextFlags };\r\nexport enum ImGuiInputTextFlags {\r\n    None                = 0,\r\n    CharsDecimal        = 1 << 0,   // Allow 0123456789.+-*/\r\n    CharsHexadecimal    = 1 << 1,   // Allow 0123456789ABCDEFabcdef\r\n    CharsUppercase      = 1 << 2,   // Turn a..z into A..Z\r\n    CharsNoBlank        = 1 << 3,   // Filter out spaces, tabs\r\n    AutoSelectAll       = 1 << 4,   // Select entire text when first taking mouse focus\r\n    EnterReturnsTrue    = 1 << 5,   // Return 'true' when Enter is pressed (as opposed to when the value was modified)\r\n    CallbackCompletion  = 1 << 6,   // Call user function on pressing TAB (for completion handling)\r\n    CallbackHistory     = 1 << 7,   // Call user function on pressing Up/Down arrows (for history handling)\r\n    CallbackAlways      = 1 << 8,   // Call user function every time. User code may query cursor position, modify text buffer.\r\n    CallbackCharFilter  = 1 << 9,   // Call user function to filter character. Modify data->EventChar to replace/filter input, or return 1 to discard character.\r\n    AllowTabInput       = 1 << 10,  // Pressing TAB input a '\\t' character into the text field\r\n    CtrlEnterForNewLine = 1 << 11,  // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).\r\n    NoHorizontalScroll  = 1 << 12,  // Disable following the cursor horizontally\r\n    AlwaysInsertMode    = 1 << 13,  // Insert mode\r\n    ReadOnly            = 1 << 14,  // Read-only mode\r\n    Password            = 1 << 15,  // Password mode, display all characters as '*'\r\n    NoUndoRedo          = 1 << 16,  // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().\r\n    CharsScientific     = 1 << 17,  // Allow 0123456789.+-*/eE (Scientific notation input)\r\n    CallbackResize      = 1 << 18,  // Allow buffer capacity resize + notify when the string wants to be resized (for string types which hold a cache of their Size) (see misc/stl/imgui_stl.h for an example of using this)\r\n    // [Internal]\r\n    Multiline           = 1 << 20,   // For internal use by InputTextMultiline()\r\n    NoMarkEdited        = 1 << 21,   // For internal use by functions using InputText() before reformatting data\r\n}\r\n\r\n// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()\r\nexport { ImGuiTreeNodeFlags as TreeNodeFlags };\r\nexport enum ImGuiTreeNodeFlags {\r\n    None                 = 0,\r\n    Selected             = 1 << 0,   // Draw as selected\r\n    Framed               = 1 << 1,   // Full colored frame (e.g. for CollapsingHeader)\r\n    AllowItemOverlap     = 1 << 2,   // Hit testing to allow subsequent widgets to overlap this one\r\n    NoTreePushOnOpen     = 1 << 3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack\r\n    NoAutoOpenOnLog      = 1 << 4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)\r\n    DefaultOpen          = 1 << 5,   // Default node to be open\r\n    OpenOnDoubleClick    = 1 << 6,   // Need double-click to open node\r\n    OpenOnArrow          = 1 << 7,   // Only open when clicking on the arrow part. If OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.\r\n    Leaf                 = 1 << 8,   // No collapsing, no arrow (use as a convenience for leaf nodes).\r\n    Bullet               = 1 << 9,   // Display a bullet instead of arrow\r\n    FramePadding         = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().\r\n    //SpanAllAvailWidth  = 1 << 11,  // FIXME: TODO: Extend hit box horizontally even if not framed\r\n    //NoScrollOnOpen     = 1 << 12,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible\r\n    NavLeftJumpsBackHere = 1 << 13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)\r\n    CollapsingHeader     = Framed | NoTreePushOnOpen | NoAutoOpenOnLog,\r\n}\r\n\r\n// Flags for ImGui::Selectable()\r\nexport { ImGuiSelectableFlags as SelectableFlags };\r\nexport enum ImGuiSelectableFlags {\r\n    None               = 0,\r\n    DontClosePopups    = 1 << 0,   // Clicking this don't close parent popup window\r\n    SpanAllColumns     = 1 << 1,   // Selectable frame can span all columns (text will still fit in current column)\r\n    AllowDoubleClick   = 1 << 2,   // Generate press events on double clicks too\r\n    Disabled           = 1 << 3    // Cannot be selected, display greyed out text\r\n}\r\n\r\n// Flags for ImGui::BeginCombo()\r\nexport { ImGuiComboFlags as ComboFlags };\r\nexport enum ImGuiComboFlags {\r\n    None                    = 0,\r\n    PopupAlignLeft          = 1 << 0,   // Align the popup toward the left by default\r\n    HeightSmall             = 1 << 1,   // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()\r\n    HeightRegular           = 1 << 2,   // Max ~8 items visible (default)\r\n    HeightLarge             = 1 << 3,   // Max ~20 items visible\r\n    HeightLargest           = 1 << 4,   // As many fitting items as possible\r\n    NoArrowButton           = 1 << 5,   // Display on the preview box without the square arrow button\r\n    NoPreview               = 1 << 6,   // Display only a square arrow button\r\n    HeightMask_             = HeightSmall | HeightRegular | HeightLarge | HeightLargest,\r\n}\r\n\r\n// Flags for ImGui::BeginTabBar()\r\nexport { ImGuiTabBarFlags as TabBarFlags };\r\nexport enum ImGuiTabBarFlags {\r\n    None                           = 0,\r\n    Reorderable                    = 1 << 0,   // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list\r\n    AutoSelectNewTabs              = 1 << 1,   // Automatically select new tabs when they appear\r\n    TabListPopupButton             = 1 << 2,\r\n    NoCloseWithMiddleMouseButton   = 1 << 3,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\r\n    NoTabListScrollingButtons      = 1 << 4,\r\n    NoTooltip                      = 1 << 5,   // Disable tooltips when hovering a tab\r\n    FittingPolicyResizeDown        = 1 << 6,   // Resize tabs when they don't fit\r\n    FittingPolicyScroll            = 1 << 7,   // Add scroll buttons when tabs don't fit\r\n    FittingPolicyMask_             = FittingPolicyResizeDown | FittingPolicyScroll,\r\n    FittingPolicyDefault_          = FittingPolicyResizeDown\r\n};\r\n\r\n// Flags for ImGui::BeginTabItem()\r\nexport { ImGuiTabItemFlags as TabItemFlags };\r\nexport enum ImGuiTabItemFlags\r\n{\r\n    ImGuiTabItemFlags_None                          = 0,\r\n    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.\r\n    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   // Trigger flag to programatically make the tab selected when calling BeginTabItem()\r\n    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\r\n    ImGuiTabItemFlags_NoPushId                      = 1 << 3    // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()\r\n};\r\n\r\n// Flags for ImGui::IsWindowFocused()\r\nexport { ImGuiFocusedFlags as FocusedFlags };\r\nexport enum ImGuiFocusedFlags {\r\n    None                          = 0,\r\n    ChildWindows                  = 1 << 0,   // IsWindowFocused(): Return true if any children of the window is focused\r\n    RootWindow                    = 1 << 1,   // IsWindowFocused(): Test from root window (top most parent of the current hierarchy)\r\n    AnyWindow                     = 1 << 2,   // IsWindowFocused(): Return true if any window is focused\r\n    RootAndChildWindows           = RootWindow | ChildWindows,\r\n}\r\n\r\n// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()\r\nexport { ImGuiHoveredFlags as HoveredFlags };\r\nexport enum ImGuiHoveredFlags {\r\n    None                          = 0,        // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.\r\n    ChildWindows                  = 1 << 0,   // IsWindowHovered() only: Return true if any children of the window is hovered\r\n    RootWindow                    = 1 << 1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)\r\n    AnyWindow                     = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered\r\n    AllowWhenBlockedByPopup       = 1 << 3,   // Return true even if a popup window is normally blocking access to this item/window\r\n    //AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.\r\n    AllowWhenBlockedByActiveItem  = 1 << 5,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.\r\n    AllowWhenOverlapped           = 1 << 6,   // Return true even if the position is overlapped by another window\r\n    AllowWhenDisabled             = 1 << 7,   // Return true even if the item is disabled\r\n    RectOnly                      = AllowWhenBlockedByPopup | AllowWhenBlockedByActiveItem | AllowWhenOverlapped,\r\n    RootAndChildWindows           = RootWindow | ChildWindows,\r\n}\r\n\r\n// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()\r\nexport { ImGuiDragDropFlags as DragDropFlags };\r\nexport enum ImGuiDragDropFlags {\r\n    // BeginDragDropSource() flags\r\n    None                         = 0,\r\n    SourceNoPreviewTooltip       = 1 << 0,       // By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.\r\n    SourceNoDisableHover         = 1 << 1,       // By default, when dragging we clear data so that IsItemHovered() will return true, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.\r\n    SourceNoHoldToOpenOthers     = 1 << 2,       // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.\r\n    SourceAllowNullID            = 1 << 3,       // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.\r\n    SourceExtern                 = 1 << 4,       // External source (from outside of imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.\r\n    SourceAutoExpirePayload      = 1 << 5,   // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)\r\n    // AcceptDragDropPayload() flags\r\n    AcceptBeforeDelivery         = 1 << 10,      // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.\r\n    AcceptNoDrawDefaultRect      = 1 << 11,      // Do not draw the default highlight rectangle when hovering over target.\r\n    AcceptNoPreviewTooltip       = 1 << 12,      // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.\r\n    AcceptPeekOnly               = AcceptBeforeDelivery | AcceptNoDrawDefaultRect,  // For peeking ahead and inspecting the payload before delivery.\r\n}\r\n\r\n// Standard Drag and Drop payload types. You can define you own payload types using 12-characters long strings. Types starting with '_' are defined by Dear ImGui.\r\nexport const IMGUI_PAYLOAD_TYPE_COLOR_3F: string = \"_COL3F\";    // float[3]     // Standard type for colors, without alpha. User code may use this type.\r\nexport const IMGUI_PAYLOAD_TYPE_COLOR_4F: string = \"_COL4F\";    // float[4]     // Standard type for colors. User code may use this type.\r\n\r\n// A primary data type\r\nexport { ImGuiDataType as DataType };\r\nexport enum ImGuiDataType {\r\n    S8,       // char\r\n    U8,       // unsigned char\r\n    S16,      // short\r\n    U16,      // unsigned short\r\n    S32,      // int\r\n    U32,      // unsigned int\r\n    S64,      // long long, __int64\r\n    U64,      // unsigned long long, unsigned __int64\r\n    Float,    // float\r\n    Double,   // double\r\n    COUNT\r\n}\r\n\r\n// A cardinal direction\r\nexport { ImGuiDir as Dir };\r\nexport enum ImGuiDir {\r\n    None    = -1,\r\n    Left    = 0,\r\n    Right   = 1,\r\n    Up      = 2,\r\n    Down    = 3,\r\n    COUNT\r\n}\r\n\r\n// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array\r\nexport { ImGuiKey as Key };\r\nexport enum ImGuiKey {\r\n    Tab,\r\n    LeftArrow,\r\n    RightArrow,\r\n    UpArrow,\r\n    DownArrow,\r\n    PageUp,\r\n    PageDown,\r\n    Home,\r\n    End,\r\n    Insert,\r\n    Delete,\r\n    Backspace,\r\n    Space,\r\n    Enter,\r\n    Escape,\r\n    A,         // for text edit CTRL+A: select all\r\n    C,         // for text edit CTRL+C: copy\r\n    V,         // for text edit CTRL+V: paste\r\n    X,         // for text edit CTRL+X: cut\r\n    Y,         // for text edit CTRL+Y: redo\r\n    Z,         // for text edit CTRL+Z: undo\r\n    COUNT,\r\n}\r\n\r\n// [BETA] Gamepad/Keyboard directional navigation\r\n// Keyboard: Set io.ConfigFlags |= EnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeyDown[] + io.KeyMap[] arrays.\r\n// Gamepad:  Set io.ConfigFlags |= EnableGamepad to enable. Fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().\r\n// Read instructions in imgui.cpp for more details.\r\nexport { ImGuiNavInput as NavInput };\r\nexport enum ImGuiNavInput\r\n{\r\n    // Gamepad Mapping\r\n    Activate,      // activate / open / toggle / tweak value       // e.g. Circle (PS4), A (Xbox), B (Switch), Space (Keyboard)\r\n    Cancel,        // cancel / close / exit                        // e.g. Cross  (PS4), B (Xbox), A (Switch), Escape (Keyboard)\r\n    Input,         // text input / on-screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)\r\n    Menu,          // tap: toggle menu / hold: focus, move, resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)\r\n    DpadLeft,      // move / tweak / resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)\r\n    DpadRight,     //\r\n    DpadUp,        //\r\n    DpadDown,      //\r\n    LStickLeft,    // scroll / move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down\r\n    LStickRight,   //\r\n    LStickUp,      //\r\n    LStickDown,    //\r\n    FocusPrev,     // next window (w/ PadMenu)                     // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)\r\n    FocusNext,     // prev window (w/ PadMenu)                     // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)\r\n    TweakSlow,     // slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)\r\n    TweakFast,     // faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)\r\n\r\n    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.\r\n    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) may be directly reading from io.KeyDown[] instead of io.NavInputs[].\r\n    KeyMenu_,      // toggle menu                                  // = io.KeyAlt\r\n    KeyTab_,       // tab                                          // = Tab key\r\n    KeyLeft_,      // move left                                    // = Arrow keys\r\n    KeyRight_,     // move right\r\n    KeyUp_,        // move up\r\n    KeyDown_,      // move down\r\n    COUNT,\r\n    InternalStart_ = KeyMenu_,\r\n}\r\n\r\n// [BETA] Gamepad/Keyboard directional navigation flags, stored in io.ConfigFlags\r\nexport { ImGuiConfigFlags as ConfigFlags };\r\nexport enum ImGuiConfigFlags\r\n{\r\n    None                 = 0,\r\n    NavEnableKeyboard    = 1 << 0,   // Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeyDown[].\r\n    NavEnableGamepad     = 1 << 1,   // Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[].\r\n    NavEnableSetMousePos = 1 << 2,   // Request navigation to allow moving the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantMoveMouse=true. If enabled you MUST honor io.WantMoveMouse requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth.\r\n    NavNoCaptureKeyboard = 1 << 3,    // Do not set the io.WantCaptureKeyboard flag with io.NavActive is set.\r\n    NoMouse              = 1 << 4,   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information back-end\r\n    NoMouseCursorChange  = 1 << 5,   // Instruct back-end to not alter mouse cursor shape and visibility.\r\n\r\n    IsSRGB               = 1 << 20,  // Application is SRGB-aware.\r\n    IsTouchScreen        = 1 << 21   // Application is using a touch screen instead of a mouse.\r\n}\r\n\r\n// Enumeration for PushStyleColor() / PopStyleColor()\r\nexport { ImGuiCol as Col };\r\nexport enum ImGuiCol {\r\n    Text,\r\n    TextDisabled,\r\n    WindowBg,              // Background of normal windows\r\n    ChildBg,               // Background of child windows\r\n    PopupBg,               // Background of popups, menus, tooltips windows\r\n    Border,\r\n    BorderShadow,\r\n    FrameBg,               // Background of checkbox, radio button, plot, slider, text input\r\n    FrameBgHovered,\r\n    FrameBgActive,\r\n    TitleBg,\r\n    TitleBgActive,\r\n    TitleBgCollapsed,\r\n    MenuBarBg,\r\n    ScrollbarBg,\r\n    ScrollbarGrab,\r\n    ScrollbarGrabHovered,\r\n    ScrollbarGrabActive,\r\n    CheckMark,\r\n    SliderGrab,\r\n    SliderGrabActive,\r\n    Button,\r\n    ButtonHovered,\r\n    ButtonActive,\r\n    Header,\r\n    HeaderHovered,\r\n    HeaderActive,\r\n    Separator,\r\n    SeparatorHovered,\r\n    SeparatorActive,\r\n    ResizeGrip,\r\n    ResizeGripHovered,\r\n    ResizeGripActive,\r\n    Tab,\r\n    TabHovered,\r\n    TabActive,\r\n    TabUnfocused,\r\n    TabUnfocusedActive,\r\n    PlotLines,\r\n    PlotLinesHovered,\r\n    PlotHistogram,\r\n    PlotHistogramHovered,\r\n    TextSelectedBg,\r\n    DragDropTarget,\r\n    NavHighlight,          // Gamepad/keyboard: current highlighted item\r\n    NavWindowingHighlight, // Highlight window when using CTRL+TAB\r\n    NavWindowingDimBg,     // Darken/colorize entire screen behind the CTRL+TAB window list, when active\r\n    ModalWindowDimBg,      // Darken/colorize entire screen behind a modal window, when one is active\r\n    COUNT,\r\n}\r\n\r\n// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\r\n// NB: the enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code. During initialization, feel free to just poke into ImGuiStyle directly.\r\n// NB: if changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.\r\nexport { ImGuiStyleVar as StyleVar };\r\nexport enum ImGuiStyleVar {\r\n    // Enum name ......................// Member in ImGuiStyle structure (see ImGuiStyle for descriptions)\r\n    Alpha,               // float     Alpha\r\n    WindowPadding,       // ImVec2    WindowPadding\r\n    WindowRounding,      // float     WindowRounding\r\n    WindowBorderSize,    // float     WindowBorderSize\r\n    WindowMinSize,       // ImVec2    WindowMinSize\r\n    WindowTitleAlign,    // ImVec2    WindowTitleAlign\r\n    // WindowMenuButtonPosition, // ImGuiDir WindowMenuButtonPosition\r\n    ChildRounding,       // float     ChildRounding\r\n    ChildBorderSize,     // float     ChildBorderSize\r\n    PopupRounding,       // float     PopupRounding\r\n    PopupBorderSize,     // float     PopupBorderSize\r\n    FramePadding,        // ImVec2    FramePadding\r\n    FrameRounding,       // float     FrameRounding\r\n    FrameBorderSize,     // float     FrameBorderSize\r\n    ItemSpacing,         // ImVec2    ItemSpacing\r\n    ItemInnerSpacing,    // ImVec2    ItemInnerSpacing\r\n    IndentSpacing,       // float     IndentSpacing\r\n    ScrollbarSize,       // float     ScrollbarSize\r\n    ScrollbarRounding,   // float     ScrollbarRounding\r\n    GrabMinSize,         // float     GrabMinSize\r\n    GrabRounding,        // float     GrabRounding\r\n    TabRounding,         // float     TabRounding\r\n    ButtonTextAlign,     // ImVec2    ButtonTextAlign\r\n    SelectableTextAlign, // ImVec2    SelectableTextAlign\r\n    Count_, COUNT = Count_,\r\n}\r\n\r\n// Back-end capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom back-end.\r\nexport { ImGuiBackendFlags as BackendFlags };\r\nexport enum ImGuiBackendFlags {\r\n    None                  = 0,\r\n    HasGamepad            = 1 << 0,   // Back-end has a connected gamepad.\r\n    HasMouseCursors       = 1 << 1,   // Back-end can honor GetMouseCursor() values and change the OS cursor shape.\r\n    HasSetMousePos        = 1 << 2,   // Back-end can honor io.WantSetMousePos and reposition the mouse (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).\r\n    RendererHasVtxOffset  = 1 << 3,   // Back-end Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bits indices.\r\n}\r\n\r\n// Enumeration for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()\r\nexport { ImGuiColorEditFlags as ColorEditFlags };\r\nexport enum ImGuiColorEditFlags {\r\n    None            = 0,\r\n    NoAlpha         = 1 << 1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (read 3 components from the input pointer).\r\n    NoPicker        = 1 << 2,   //              // ColorEdit: disable picker when clicking on colored square.\r\n    NoOptions       = 1 << 3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.\r\n    NoSmallPreview  = 1 << 4,   //              // ColorEdit, ColorPicker: disable colored square preview next to the inputs. (e.g. to show only the inputs)\r\n    NoInputs        = 1 << 5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview colored square).\r\n    NoTooltip       = 1 << 6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.\r\n    NoLabel         = 1 << 7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).\r\n    NoSidePreview   = 1 << 8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small colored square preview instead.\r\n    NoDragDrop      = 1 << 9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.\r\n    // User Options (right-click on widget to change some of them). You can set application defaults using SetColorEditOptions(). The idea is that you probably don't want to override them in most of your calls, let the user choose and/or call SetColorEditOptions() during startup.\r\n    AlphaBar        = 1 << 16,   //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.\r\n    AlphaPreview    = 1 << 17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.\r\n    AlphaPreviewHalf= 1 << 18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.\r\n    HDR             = 1 << 19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use Float flag as well).\r\n    DisplayRGB      = 1 << 20,  // [Inputs]     // ColorEdit: choose one among RGB/HSV/HEX. ColorPicker: choose any combination using RGB/HSV/HEX.\r\n    DisplayHSV      = 1 << 21,  // [Inputs]     // \"\r\n    DisplayHex      = 1 << 22,  // [Inputs]     // \"\r\n    Uint8           = 1 << 23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.\r\n    Float           = 1 << 24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.\r\n    PickerHueBar    = 1 << 25,  // [PickerMode] // ColorPicker: bar for Hue, rectangle for Sat/Value.\r\n    PickerHueWheel  = 1 << 26,  // [PickerMode] // ColorPicker: wheel for Hue, triangle for Sat/Value.\r\n    InputRGB        = 1 << 27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.\r\n    InputHSV        = 1 << 28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.\r\n\r\n    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to\r\n    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.\r\n    _OptionsDefault = Uint8|DisplayRGB|InputRGB|PickerHueBar,\r\n\r\n    // [Internal] Masks\r\n    _DisplayMask    = DisplayRGB|DisplayHSV|DisplayHex,\r\n    _DataTypeMask   = Uint8|Float,\r\n    _PickerMask     = PickerHueWheel|PickerHueBar,\r\n    _InputMask      = InputRGB|InputHSV,\r\n}\r\n\r\n// Enumeration for GetMouseCursor()\r\nexport { ImGuiMouseCursor as MouseCursor };\r\nexport enum ImGuiMouseCursor {\r\n    None = -1,\r\n    Arrow = 0,\r\n    TextInput,         // When hovering over InputText, etc.\r\n    ResizeAll,         // (Unused by imgui functions)\r\n    ResizeNS,          // When hovering over an horizontal border\r\n    ResizeEW,          // When hovering over a vertical border or a column\r\n    ResizeNESW,        // When hovering over the bottom-left corner of a window\r\n    ResizeNWSE,        // When hovering over the bottom-right corner of a window\r\n    Hand,              // (Unused by imgui functions. Use for e.g. hyperlinks)\r\n    Count_, COUNT = Count_,\r\n}\r\n\r\n// Condition for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions\r\n// All those functions treat 0 as a shortcut to Always. From the point of view of the user use this as an enum (don't combine multiple values into flags).\r\nexport { ImGuiCond as Cond };\r\nexport enum ImGuiCond {\r\n    Always        = 1 << 0,   // Set the variable\r\n    Once          = 1 << 1,   // Set the variable once per runtime session (only the first call with succeed)\r\n    FirstUseEver  = 1 << 2,   // Set the variable if the window has no saved data (if doesn't exist in the .ini file)\r\n    Appearing     = 1 << 3,    // Set the variable if the window is appearing after being hidden/inactive (or the first time)\r\n}\r\n\r\nexport { ImDrawCornerFlags as wCornerFlags };\r\nexport enum ImDrawCornerFlags\r\n{\r\n    TopLeft   = 1 << 0, // 0x1\r\n    TopRight  = 1 << 1, // 0x2\r\n    BotLeft   = 1 << 2, // 0x4\r\n    BotRight  = 1 << 3, // 0x8\r\n    Top       = TopLeft | TopRight,   // 0x3\r\n    Bot       = BotLeft | BotRight,   // 0xC\r\n    Left      = TopLeft | BotLeft,    // 0x5\r\n    Right     = TopRight | BotRight,  // 0xA\r\n    All       = 0xF,     // In your function calls you may use ~0 (= all bits sets) instead of All, as a convenience\r\n}\r\n\r\nexport { ImDrawListFlags as wListFlags };\r\nexport enum ImDrawListFlags\r\n{\r\n    None             = 0,\r\n    AntiAliasedLines = 1 << 0,\r\n    AntiAliasedFill  = 1 << 1,\r\n}\r\n\r\nexport { ImU32 } from \"./bind-imgui\";\r\n\r\nexport { interface_ImVec2 } from \"./bind-imgui\";\r\nexport { reference_ImVec2 } from \"./bind-imgui\";\r\n\r\nexport class ImVec2 implements Bind.interface_ImVec2 {\r\n    public static readonly ZERO: Readonly<ImVec2> = new ImVec2(0.0, 0.0);\r\n    public static readonly UNIT: Readonly<ImVec2> = new ImVec2(1.0, 1.0);\r\n    public static readonly UNIT_X: Readonly<ImVec2> = new ImVec2(1.0, 0.0);\r\n    public static readonly UNIT_Y: Readonly<ImVec2> = new ImVec2(0.0, 1.0);\r\n\r\n    constructor(public x: number = 0.0, public y: number = 0.0) {}\r\n\r\n    public Set(x: number, y: number): this {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    public Copy(other: Readonly<Bind.interface_ImVec2>): this {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Readonly<Bind.interface_ImVec2>): boolean {\r\n        if (this.x !== other.x) { return false; }\r\n        if (this.y !== other.y) { return false; }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport { interface_ImVec4 } from \"./bind-imgui\";\r\nexport { reference_ImVec4 } from \"./bind-imgui\";\r\n\r\nexport class ImVec4 implements Bind.interface_ImVec4 {\r\n    public static readonly ZERO: Readonly<ImVec4> = new ImVec4(0.0, 0.0, 0.0, 0.0);\r\n    public static readonly UNIT: Readonly<ImVec4> = new ImVec4(1.0, 1.0, 1.0, 1.0);\r\n    public static readonly UNIT_X: Readonly<ImVec4> = new ImVec4(1.0, 0.0, 0.0, 0.0);\r\n    public static readonly UNIT_Y: Readonly<ImVec4> = new ImVec4(0.0, 1.0, 0.0, 0.0);\r\n    public static readonly UNIT_Z: Readonly<ImVec4> = new ImVec4(0.0, 0.0, 1.0, 0.0);\r\n    public static readonly UNIT_W: Readonly<ImVec4> = new ImVec4(0.0, 0.0, 0.0, 1.0);\r\n    public static readonly BLACK: Readonly<ImVec4> = new ImVec4(0.0, 0.0, 0.0, 1.0);\r\n    public static readonly WHITE: Readonly<ImVec4> = new ImVec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n    constructor(public x: number = 0.0, public y: number = 0.0, public z: number = 0.0, public w: number = 1.0) {}\r\n\r\n    public Set(x: number, y: number, z: number, w: number): this {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n        return this;\r\n    }\r\n\r\n    public Copy(other: Readonly<Bind.interface_ImVec4>): this {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n        this.w = other.w;\r\n        return this;\r\n    }\r\n\r\n    public Equals(other: Readonly<Bind.interface_ImVec4>): boolean {\r\n        if (this.x !== other.x) { return false; }\r\n        if (this.y !== other.y) { return false; }\r\n        if (this.z !== other.z) { return false; }\r\n        if (this.w !== other.w) { return false; }\r\n        return true;\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// Helpers\r\n//-----------------------------------------------------------------------------\r\n\r\n// Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).\r\n// Our implementation does NOT call C++ constructors/destructors. This is intentional and we do not require it. Do not use this class as a straight std::vector replacement in your code!\r\nexport class ImVector<T> extends Array<T>\r\n{\r\n    public get Size(): number { return this.length; }\r\n    public Data: T[] = this;\r\n    public empty(): boolean { return this.length === 0; }\r\n    public clear(): void { this.length = 0; }\r\n    public pop_back(): T | undefined { return this.pop(); }\r\n    public push_back(value: T): void { this.push(value); }\r\n    // public:\r\n    // int                         Size;\r\n    // int                         Capacity;\r\n    // T*                          Data;\r\n\r\n    // typedef T                   value_type;\r\n    // typedef value_type*         iterator;\r\n    // typedef const value_type*   const_iterator;\r\n\r\n    // inline ImVector()           { Size = Capacity = 0; Data = NULL; }\r\n    // inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }\r\n\r\n    // inline bool                 empty() const                   { return Size == 0; }\r\n    // inline int                  size() const                    { return Size; }\r\n    // inline int                  capacity() const                { return Capacity; }\r\n\r\n    // inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }\r\n    // inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }\r\n\r\n    // inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }\r\n    // inline iterator             begin()                         { return Data; }\r\n    // inline const_iterator       begin() const                   { return Data; }\r\n    // inline iterator             end()                           { return Data + Size; }\r\n    // inline const_iterator       end() const                     { return Data + Size; }\r\n    // inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }\r\n    // inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }\r\n    // inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }\r\n    // inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }\r\n    // inline void                 swap(ImVector<T>& rhs)          { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }\r\n\r\n    // inline int                  _grow_capacity(int size) const  { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > size ? new_capacity : size; }\r\n\r\n    // inline void                 resize(int new_size)            { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }\r\n    // inline void                 resize(int new_size, const T& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) Data[n] = v; Size = new_size; }\r\n    // inline void                 reserve(int new_capacity)\r\n    // {\r\n    //     if (new_capacity <= Capacity)\r\n    //         return;\r\n    //     T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T));\r\n    //     if (Data)\r\n    //         memcpy(new_data, Data, (size_t)Size * sizeof(T));\r\n    //     ImGui::MemFree(Data);\r\n    //     Data = new_data;\r\n    //     Capacity = new_capacity;\r\n    // }\r\n\r\n    // inline void                 push_back(const value_type& v)  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); Data[Size++] = v; }\r\n    // inline void                 pop_back()                      { IM_ASSERT(Size > 0); Size--; }\r\n    // inline void                 push_front(const value_type& v) { if (Size == 0) push_back(v); else insert(Data, v); }\r\n\r\n    // inline iterator             erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }\r\n    // inline iterator             erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }\r\n    // inline iterator             erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }\r\n    // inline iterator             insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); Data[off] = v; Size++; return Data + off; }\r\n    // inline bool                 contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }\r\n}\r\n\r\n// Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"\r\nexport class ImGuiTextFilter\r\n{\r\n    // IMGUI_API           ImGuiTextFilter(const char* default_filter = \"\");\r\n    constructor(default_filter: string = \"\") {\r\n        if (default_filter)\r\n        {\r\n            // ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));\r\n            this.InputBuf.buffer = default_filter;\r\n            this.Build();\r\n        }\r\n        else\r\n        {\r\n            // InputBuf[0] = 0;\r\n            this.InputBuf.buffer = \"\";\r\n            this.CountGrep = 0;\r\n        }\r\n    }\r\n    // IMGUI_API bool      Draw(const char* label = \"Filter (inc,-exc)\", float width = 0.0f);    // Helper calling InputText+Build\r\n    public Draw(label: string = \"Filter (inc,-exc)\", width: number = 0.0): boolean {\r\n        if (width !== 0.0)\r\n            bind.PushItemWidth(width);\r\n        const value_changed: boolean = InputText(label, this.InputBuf, IM_ARRAYSIZE(this.InputBuf));\r\n        if (width !== 0.0)\r\n            bind.PopItemWidth();\r\n        if (value_changed)\r\n            this.Build();\r\n        return value_changed;\r\n    }\r\n    // IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;\r\n    public PassFilter(text: string, text_end: number | null = null): boolean {\r\n        // if (Filters.empty())\r\n        //     return true;\r\n\r\n        // if (text == NULL)\r\n        //     text = \"\";\r\n\r\n        // for (int i = 0; i != Filters.Size; i++)\r\n        // {\r\n        //     const TextRange& f = Filters[i];\r\n        //     if (f.empty())\r\n        //         continue;\r\n        //     if (f.front() == '-')\r\n        //     {\r\n        //         // Subtract\r\n        //         if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)\r\n        //             return false;\r\n        //     }\r\n        //     else\r\n        //     {\r\n        //         // Grep\r\n        //         if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)\r\n        //             return true;\r\n        //     }\r\n        // }\r\n\r\n        // Implicit * grep\r\n        if (this.CountGrep === 0)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n    // IMGUI_API void      Build();\r\n    public Build(): void {\r\n        // Filters.resize(0);\r\n        // TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));\r\n        // input_range.split(',', Filters);\r\n\r\n        this.CountGrep = 0;\r\n        // for (int i = 0; i != Filters.Size; i++)\r\n        // {\r\n        //     Filters[i].trim_blanks();\r\n        //     if (Filters[i].empty())\r\n        //         continue;\r\n        //     if (Filters[i].front() != '-')\r\n        //         CountGrep += 1;\r\n        // }\r\n    }\r\n    // void                Clear() { InputBuf[0] = 0; Build(); }\r\n    public Clear(): void { this.InputBuf.buffer = \"\"; this.Build(); }\r\n    // bool                IsActive() const { return !Filters.empty(); }\r\n    public IsActive(): boolean { return false; }\r\n\r\n    // [Internal]\r\n    // struct TextRange\r\n    // {\r\n    //     const char* b;\r\n    //     const char* e;\r\n\r\n    //     TextRange() { b = e = NULL; }\r\n    //     TextRange(const char* _b, const char* _e) { b = _b; e = _e; }\r\n    //     const char* begin() const { return b; }\r\n    //     const char* end() const { return e; }\r\n    //     bool empty() const { return b == e; }\r\n    //     char front() const { return *b; }\r\n    //     static bool is_blank(char c) { return c == ' ' || c == '\\t'; }\r\n    //     void trim_blanks() { while (b < e && is_blank(*b)) b++; while (e > b && is_blank(*(e-1))) e--; }\r\n    //     IMGUI_API void split(char separator, ImVector<TextRange>& out);\r\n    // };\r\n\r\n    // char                InputBuf[256];\r\n    public InputBuf: ImStringBuffer = new ImStringBuffer(256);\r\n    // ImVector<TextRange> Filters;\r\n    // int                 CountGrep;\r\n    public CountGrep: number = 0;\r\n}\r\n\r\n// Helper: Text buffer for logging/accumulating text\r\nexport class ImGuiTextBuffer\r\n{\r\n    // ImVector<char>      Buf;\r\n    public Buf: string = \"\";\r\n    public begin(): string { return this.Buf; }\r\n    public size(): number { return this.Buf.length; }\r\n    public clear(): void { this.Buf = \"\"; }\r\n    public append(text: string): void { this.Buf += text; }\r\n\r\n    // ImGuiTextBuffer()   { Buf.push_back(0); }\r\n    // inline char         operator[](int i) { return Buf.Data[i]; }\r\n    // const char*         begin() const { return &Buf.front(); }\r\n    // const char*         end() const { return &Buf.back(); }      // Buf is zero-terminated, so end() will point on the zero-terminator\r\n    // int                 size() const { return Buf.Size - 1; }\r\n    // bool                empty() { return Buf.Size <= 1; }\r\n    // void                clear() { Buf.clear(); Buf.push_back(0); }\r\n    // void                reserve(int capacity) { Buf.reserve(capacity); }\r\n    // const char*         c_str() const { return Buf.Data; }\r\n    // IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);\r\n    // IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);\r\n}\r\n\r\n// Helper: Simple Key->value storage\r\n// Typically you don't have to worry about this since a storage is held within each Window.\r\n// We use it to e.g. store collapse state for a tree (Int 0/1), store color edit options.\r\n// This is optimized for efficient reading (dichotomy into a contiguous buffer), rare writing (typically tied to user interactions)\r\n// You can use it as custom user storage for temporary values. Declare your own storage if, for example:\r\n// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).\r\n// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)\r\n// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.\r\nexport class ImGuiStorage\r\n{\r\n    // struct Pair\r\n    // {\r\n    //     ImGuiID key;\r\n    //     union { int val_i; float val_f; void* val_p; };\r\n    //     Pair(ImGuiID _key, int _val_i)   { key = _key; val_i = _val_i; }\r\n    //     Pair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }\r\n    //     Pair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }\r\n    // };\r\n    // ImVector<Pair>      Data;\r\n\r\n    // - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)\r\n    // - Set***() functions find pair, insertion on demand if missing.\r\n    // - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.\r\n    // void                Clear() { Data.clear(); }\r\n    // IMGUI_API int       GetInt(ImGuiID key, int default_val = 0) const;\r\n    // IMGUI_API void      SetInt(ImGuiID key, int val);\r\n    // IMGUI_API bool      GetBool(ImGuiID key, bool default_val = false) const;\r\n    // IMGUI_API void      SetBool(ImGuiID key, bool val);\r\n    // IMGUI_API float     GetFloat(ImGuiID key, float default_val = 0.0f) const;\r\n    // IMGUI_API void      SetFloat(ImGuiID key, float val);\r\n    // IMGUI_API void*     GetVoidPtr(ImGuiID key) const; // default_val is NULL\r\n    // IMGUI_API void      SetVoidPtr(ImGuiID key, void* val);\r\n\r\n    // - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.\r\n    // - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.\r\n    // - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)\r\n    //      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += *pvar;\r\n    // IMGUI_API int*      GetIntRef(ImGuiID key, int default_val = 0);\r\n    // IMGUI_API bool*     GetBoolRef(ImGuiID key, bool default_val = false);\r\n    // IMGUI_API float*    GetFloatRef(ImGuiID key, float default_val = 0.0f);\r\n    // IMGUI_API void**    GetVoidPtrRef(ImGuiID key, void* default_val = NULL);\r\n\r\n    // Use on your own storage if you know only integer are being stored (open/close all tree nodes)\r\n    // IMGUI_API void      SetAllInt(int val);\r\n\r\n    // For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.\r\n    // IMGUI_API void      BuildSortByKey();\r\n}\r\n\r\n// Data payload for Drag and Drop operations\r\nexport interface ImGuiPayload<T>\r\n{\r\n    // Members\r\n    // void*           Data;               // Data (copied and owned by dear imgui)\r\n    Data: T;\r\n    // int             DataSize;           // Data size\r\n\r\n    // [Internal]\r\n    // ImGuiID         SourceId;           // Source item id\r\n    // ImGuiID         SourceParentId;     // Source parent id (if available)\r\n    // int             DataFrameCount;     // Data timestamp\r\n    // char            DataType[12 + 1];    // Data type tag (short user-supplied string, 12 characters max)\r\n    // bool            Preview;            // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)\r\n    // bool            Delivery;           // Set when AcceptDragDropPayload() was called and mouse button is released over the target item.\r\n\r\n    // ImGuiPayload()  { Clear(); }\r\n    // void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }\r\n    // bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }\r\n    // bool IsPreview() const                  { return Preview; }\r\n    // bool IsDelivery() const                 { return Delivery; }\r\n}\r\n\r\n// Helpers macros to generate 32-bits encoded colors\r\nexport const IM_COL32_R_SHIFT: number = config.IMGUI_USE_BGRA_PACKED_COLOR ? 16 : 0;\r\nexport const IM_COL32_G_SHIFT: number = 8;\r\nexport const IM_COL32_B_SHIFT: number = config.IMGUI_USE_BGRA_PACKED_COLOR ? 0 : 16;\r\nexport const IM_COL32_A_SHIFT: number = 24;\r\nexport const IM_COL32_A_MASK: number = 0xFF000000;\r\nexport function IM_COL32(R: number, G: number, B: number, A: number = 255): number {\r\n    return ((A << IM_COL32_A_SHIFT) | (B << IM_COL32_B_SHIFT) | (G << IM_COL32_G_SHIFT) | (R << IM_COL32_R_SHIFT)) >>> 0;\r\n}\r\nexport const IM_COL32_WHITE: number = IM_COL32(255, 255, 255, 255);  // Opaque white = 0xFFFFFFFF\r\nexport const IM_COL32_BLACK: number = IM_COL32(0, 0, 0, 255);        // Opaque black\r\nexport const IM_COL32_BLACK_TRANS: number = IM_COL32(0, 0, 0, 0);    // Transparent black = 0x00000000\r\n\r\n// ImColor() helper to implicity converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)\r\n// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.\r\n// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.\r\n// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.\r\nexport class ImColor\r\n{\r\n    // ImVec4              Value;\r\n    public Value: ImVec4 = new ImVec4();\r\n\r\n    // ImColor()                                                       { Value.x = Value.y = Value.z = Value.w = 0.0f; }\r\n    // ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f/255.0f; Value.x = (float)r * sc; Value.y = (float)g * sc; Value.z = (float)b * sc; Value.w = (float)a * sc; }\r\n    // ImColor(ImU32 rgba)                                             { float sc = 1.0f/255.0f; Value.x = (float)((rgba>>IM_COL32_R_SHIFT)&0xFF) * sc; Value.y = (float)((rgba>>IM_COL32_G_SHIFT)&0xFF) * sc; Value.z = (float)((rgba>>IM_COL32_B_SHIFT)&0xFF) * sc; Value.w = (float)((rgba>>IM_COL32_A_SHIFT)&0xFF) * sc; }\r\n    // ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }\r\n    // ImColor(const ImVec4& col)                                      { Value = col; }\r\n    constructor();\r\n    constructor(r: number, g: number, b: number);\r\n    constructor(r: number, g: number, b: number, a: number);\r\n    constructor(rgba: Bind.ImU32);\r\n    constructor(col: Readonly<Bind.interface_ImVec4>);\r\n    constructor(r: number | Bind.ImU32 | Readonly<Bind.interface_ImVec4> = 0.0, g: number = 0.0, b: number = 0.0, a: number = 1.0) {\r\n        if (typeof(r) === \"number\") {\r\n            if (r > 255 && g === 0.0 && b === 0.0 && a === 1.0) {\r\n                this.Value.x = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_R_SHIFT) & 0xFF) / 255));\r\n                this.Value.y = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_G_SHIFT) & 0xFF) / 255));\r\n                this.Value.z = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_B_SHIFT) & 0xFF) / 255));\r\n                this.Value.w = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_A_SHIFT) & 0xFF) / 255));\r\n            } else if (r <= 1.0 && g <= 1.0 && b <= 1.0 && a <= 1.0) {\r\n                this.Value.x = Math.max(0.0, r);\r\n                this.Value.y = Math.max(0.0, g);\r\n                this.Value.z = Math.max(0.0, b);\r\n                this.Value.w = Math.max(0.0, a);\r\n            } else {\r\n                this.Value.x = Math.max(0.0, Math.min(1.0, r / 255));\r\n                this.Value.y = Math.max(0.0, Math.min(1.0, g / 255));\r\n                this.Value.z = Math.max(0.0, Math.min(1.0, b / 255));\r\n                if (a <= 1.0) {\r\n                    this.Value.w = Math.max(0.0, a);\r\n                } else {\r\n                    this.Value.w = Math.max(0.0, Math.min(1.0, a / 255));\r\n                }\r\n            }\r\n        } else {\r\n            this.Value.Copy(r);\r\n        }\r\n    }\r\n    // inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }\r\n    public toImU32(): Bind.ImU32 { return ColorConvertFloat4ToU32(this.Value); }\r\n    // inline operator ImVec4() const                                  { return Value; }\r\n    public toImVec4(): ImVec4 { return this.Value; }\r\n\r\n    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.\r\n    // inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }\r\n    public SetHSV(h: number, s: number, v: number, a: number = 1.0): void {\r\n        const ref_r: Bind.ImScalar<number> = [ this.Value.x ];\r\n        const ref_g: Bind.ImScalar<number> = [ this.Value.y ];\r\n        const ref_b: Bind.ImScalar<number> = [ this.Value.z ];\r\n        ColorConvertHSVtoRGB(h, s, v, ref_r, ref_g, ref_b);\r\n        this.Value.x = ref_r[0];\r\n        this.Value.y = ref_g[0];\r\n        this.Value.z = ref_b[0];\r\n        this.Value.w = a;\r\n    }\r\n    // static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }\r\n    public static HSV(h: number, s: number, v: number, a: number = 1.0): ImColor {\r\n        const color = new ImColor();\r\n        color.SetHSV(h, s, v, a);\r\n        return color;\r\n    }\r\n}\r\n\r\nexport const ImGuiInputTextDefaultSize: number = 128;\r\n\r\nexport type ImGuiInputTextCallback = (data: ImGuiInputTextCallbackData) => number;\r\n\r\n// Shared state of InputText(), passed to callback when a ImGuiInputTextFlags_Callback* flag is used and the corresponding callback is triggered.\r\nexport class ImGuiInputTextCallbackData {\r\n    constructor(public readonly native: Bind.reference_ImGuiInputTextCallbackData, public readonly UserData: any) {}\r\n\r\n    // ImGuiInputTextFlags EventFlag;      // One of ImGuiInputTextFlags_Callback* // Read-only\r\n    public get EventFlag(): ImGuiInputTextFlags { return this.native.EventFlag; }\r\n    // ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only\r\n    public get Flags(): ImGuiInputTextFlags { return this.native.Flags; }\r\n    // void*               UserData;       // What user passed to InputText()      // Read-only\r\n    // public get UserData(): any { return this.native.UserData; }\r\n\r\n    // CharFilter event:\r\n    // ImWchar             EventChar;      // Character input                      // Read-write (replace character or set to zero)\r\n    public get EventChar(): Bind.ImWchar { return this.native.EventChar; }\r\n    public set EventChar(value: Bind.ImWchar) { this.native.EventChar = value; }\r\n\r\n    // Completion,History,Always events:\r\n    // If you modify the buffer contents make sure you update 'BufTextLen' and set 'BufDirty' to true.\r\n    // ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only\r\n    public get EventKey(): ImGuiKey { return this.native.EventKey; }\r\n    // char*               Buf;            // Current text buffer                  // Read-write (pointed data only, can't replace the actual pointer)\r\n    public get Buf(): string { return this.native.Buf; }\r\n    public set Buf(value: string) { this.native.Buf = value; }\r\n    // int                 BufTextLen;     // Current text length in bytes         // Read-write\r\n    public get BufTextLen(): number { return this.native.BufTextLen; }\r\n    public set BufTextLen(value: number) { this.native.BufTextLen = value; }\r\n    // int                 BufSize;        // Maximum text length in bytes         // Read-only\r\n    public get BufSize(): number { return this.native.BufSize; }\r\n    // bool                BufDirty;       // Set if you modify Buf/BufTextLen!!   // Write\r\n    public set BufDirty(value: boolean) { this.native.BufDirty = value; }\r\n    // int                 CursorPos;      //                                      // Read-write\r\n    public get CursorPos(): number { return this.native.CursorPos; }\r\n    public set CursorPos(value: number) { this.native.CursorPos = value; }\r\n    // int                 SelectionStart; //                                      // Read-write (== to SelectionEnd when no selection)\r\n    public get SelectionStart(): number { return this.native.SelectionStart; }\r\n    public set SelectionStart(value: number) { this.native.SelectionStart = value; }\r\n    // int                 SelectionEnd;   //                                      // Read-write\r\n    public get SelectionEnd(): number { return this.native.SelectionEnd; }\r\n    public set SelectionEnd(value: number) { this.native.SelectionEnd = value; }\r\n\r\n    // NB: Helper functions for text manipulation. Calling those function loses selection.\r\n    // IMGUI_API void    DeleteChars(int pos, int bytes_count);\r\n    public DeleteChars(pos: number, bytes_count: number): void { return this.native.DeleteChars(pos, bytes_count); }\r\n    // IMGUI_API void    InsertChars(int pos, const char* text, const char* text_end = NULL);\r\n    public InsertChars(pos: number, text: string, text_end: number | null = null): void { return this.native.InsertChars(pos, text_end !== null ? text.substring(0, text_end) : text); }\r\n    // bool              HasSelection() const { return SelectionStart != SelectionEnd; }\r\n    public HasSelection(): boolean { return this.native.HasSelection(); }\r\n}\r\n\r\nexport type ImGuiSizeConstraintCallback = (data: ImGuiSizeCallbackData) => void;\r\n\r\n// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().\r\n// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.\r\nexport class ImGuiSizeCallbackData {\r\n    constructor(public readonly native: Bind.reference_ImGuiSizeCallbackData, public readonly UserData: any) {}\r\n\r\n    get Pos(): Readonly<Bind.interface_ImVec2> { return this.native.Pos; }\r\n    get CurrentSize(): Readonly<Bind.interface_ImVec2> { return this.native.CurrentSize; }\r\n    get DesiredSize(): Bind.interface_ImVec2 { return this.native.DesiredSize; }\r\n}\r\n\r\nexport class ImGuiListClipper\r\n{\r\n    private native: Bind.ImGuiListClipper;\r\n\r\n    public get StartPosY(): number { return this.native.StartPosY; }\r\n    public get ItemsHeight(): number { return this.native.ItemsHeight; }\r\n    public get ItemsCount(): number { return this.native.ItemsCount; }\r\n    public get StepNo(): number { return this.native.StepNo; }\r\n    public get DisplayStart(): number { return this.native.DisplayStart; }\r\n    public get DisplayEnd(): number { return this.native.DisplayEnd; }\r\n\r\n    // items_count:  Use -1 to ignore (you can call Begin later). Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).\r\n    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().\r\n    // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().\r\n    // ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).\r\n    constructor(items_count: number = -1, items_height: number = -1.0) {\r\n        this.native = new bind.ImGuiListClipper(items_count, items_height);\r\n    }\r\n    // ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.\r\n    public delete(): void {\r\n        if (this.native) {\r\n            this.native.delete();\r\n            delete this.native;\r\n        }\r\n    }\r\n\r\n    // IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.\r\n    public Step(): boolean {\r\n        if (!this.native) { throw new Error(); }\r\n        const busy: boolean = this.native.Step();\r\n        if (!busy) {\r\n            this.delete();\r\n        }\r\n        return busy;\r\n    }\r\n    // IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.\r\n    public Begin(items_count: number, items_height: number = -1.0): void {\r\n        if (!this.native) {\r\n            this.native = new Bind.ImGuiListClipper(items_count, items_height);\r\n        }\r\n        this.native.Begin(items_count, items_height);\r\n    }\r\n    // IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.\r\n    public End(): void {\r\n        if (!this.native) { throw new Error(); }\r\n        this.native.End();\r\n        this.delete();\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// Draw List\r\n// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.\r\n//-----------------------------------------------------------------------------\r\n\r\n// Draw callbacks for advanced uses.\r\n// NB- You most likely do NOT need to use draw callbacks just to create your own widget or customized UI rendering (you can poke into the draw list for that)\r\n// Draw callback may be useful for example, A) Change your GPU render state, B) render a complex 3D scene inside a UI element (without an intermediate texture/render target), etc.\r\n// The expected behavior from your rendering function is 'if (cmd.UserCallback != NULL) cmd.UserCallback(parent_list, cmd); else RenderTriangles()'\r\n// typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);\r\nexport type ImDrawCallback = (parent_list: Readonly<ImDrawList>, cmd: Readonly<ImDrawCmd>) => void;\r\n\r\n// Special Draw callback value to request renderer back-end to reset the graphics/render state.\r\n// The renderer back-end needs to handle this special value, otherwise it will crash trying to call a function at this address.\r\n// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.\r\n// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).\r\nexport const ImDrawCallback_ResetRenderState = -1;\r\n\r\n// Typically, 1 command = 1 GPU draw call (unless command is a callback)\r\n// Pre 1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields. When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset'\r\n// is enabled, those fields allow us to render meshes larger than 64K vertices while keeping 16-bits indices.\r\nexport class ImDrawCmd\r\n{\r\n    constructor(public readonly native: Bind.reference_ImDrawCmd) {}\r\n\r\n    // unsigned int    ElemCount;              // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].\r\n    get ElemCount(): number { return this.native.ElemCount; }\r\n    // ImVec4          ClipRect;               // Clipping rectangle (x1, y1, x2, y2)\r\n    get ClipRect(): Readonly<Bind.reference_ImVec4> { return this.native.ClipRect; }\r\n    // ImTextureID     TextureId;              // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.\r\n    get TextureId(): ImTextureID | null {\r\n        return ImGuiContext.getTexture(this.native.TextureId);\r\n    }\r\n    // unsigned int    VtxOffset;              // Start offset in vertex buffer. Pre-1.71 or without ImGuiBackendFlags_RendererHasVtxOffset: always 0. With ImGuiBackendFlags_RendererHasVtxOffset: may be >0 to support meshes larger than 64K vertices with 16-bits indices.\r\n    get VtxOffset(): number { return this.native.VtxOffset; }\r\n    // unsigned int    IdxOffset;              // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.\r\n    get IdxOffset(): number { return this.native.IdxOffset; }\r\n    // ImDrawCallback  UserCallback;           // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.\r\n    public readonly UserCallback: ImDrawCallback | null = null; // TODO\r\n    // void*           UserCallbackData;       // The draw callback code can access this.\r\n    public readonly UserCallbackData: any = null; // TODO\r\n\r\n    // ImDrawCmd() { ElemCount = 0; ClipRect.x = ClipRect.y = ClipRect.z = ClipRect.w = 0.0f; TextureId = NULL; UserCallback = NULL; UserCallbackData = NULL; }\r\n}\r\n\r\n// Vertex index \r\n// (to allow large meshes with 16-bits indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end)\r\n// (to use 32-bits indices: override with '#define ImDrawIdx unsigned int' in imconfig.h)\r\n// #ifndef ImDrawIdx\r\n// typedef unsigned short ImDrawIdx;\r\n// #endif\r\nexport const ImDrawIdxSize: number = 2; // bind.ImDrawIdxSize;\r\nexport type ImDrawIdx = number;\r\n\r\n// Vertex layout\r\n// #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT\r\nexport const ImDrawVertSize: number = 20; // bind.ImDrawVertSize;\r\nexport const ImDrawVertPosOffset: number = 0; // bind.ImDrawVertPosOffset;\r\nexport const ImDrawVertUVOffset: number = 8; // bind.ImDrawVertUVOffset;\r\nexport const ImDrawVertColOffset: number = 16; // bind.ImDrawVertColOffset;\r\nexport class ImDrawVert\r\n{\r\n    // ImVec2  pos;\r\n    public pos: Float32Array;\r\n    // ImVec2  uv;\r\n    public uv: Float32Array;\r\n    // ImU32   col;\r\n    public col: Uint32Array;\r\n\r\n    constructor(buffer: ArrayBuffer, byteOffset: number = 0) {\r\n        this.pos = new Float32Array(buffer, byteOffset + bind.ImDrawVertPosOffset, 2);\r\n        this.uv = new Float32Array(buffer, byteOffset + bind.ImDrawVertUVOffset, 2);\r\n        this.col = new Uint32Array(buffer, byteOffset + bind.ImDrawVertColOffset, 1);\r\n    }\r\n}\r\n// #else\r\n// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h\r\n// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.\r\n// The type has to be described within the macro (you can either declare the struct or use a typedef)\r\n// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.\r\n// IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;\r\n// #endif\r\n\r\n// Draw channels are used by the Columns API to \"split\" the render list into different channels while building, so items of each column can be batched together.\r\n// You can also use them to simulate drawing layers and submit primitives in a different order than how they will be rendered.\r\nexport class ImDrawChannel\r\n{\r\n    // ImVector<ImDrawCmd>     CmdBuffer;\r\n    // ImVector<ImDrawIdx>     IdxBuffer;\r\n}\r\n\r\nexport class ImDrawListSharedData\r\n{\r\n    constructor(public readonly native: Bind.reference_ImDrawListSharedData) {}\r\n}\r\n\r\n// Draw command list\r\n// This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.\r\n// Each ImGui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to access the current window draw list and draw custom primitives.\r\n// You can interleave normal ImGui:: calls and adding primitives to the current draw list.\r\n// All positions are generally in pixel coordinates (top-left at (0,0), bottom-right at io.DisplaySize), however you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)\r\n// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.\r\nexport class ImDrawList\r\n{\r\n    constructor(public readonly native: Bind.reference_ImDrawList) {}\r\n\r\n    public IterateDrawCmds(callback: (draw_cmd: ImDrawCmd, ElemStart: number) => void): void {\r\n        this.native.IterateDrawCmds((draw_cmd: Bind.reference_ImDrawCmd, ElemStart: number): void => {\r\n            callback(new ImDrawCmd(draw_cmd), ElemStart);\r\n        });\r\n    }\r\n\r\n    // This is what you have to render\r\n    // ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.\r\n    // ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those\r\n    get IdxBuffer(): Uint8Array { return this.native.IdxBuffer; }\r\n    // ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.\r\n    get VtxBuffer(): Uint8Array { return this.native.VtxBuffer; }\r\n    // ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.\r\n    get Flags(): ImDrawListFlags { return this.native.Flags; }\r\n    set Flags(value: ImDrawListFlags) { this.native.Flags = value; }\r\n\r\n    // [Internal, used while building lists]\r\n    // const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)\r\n    // const char*             _OwnerName;         // Pointer to owner window's name for debugging\r\n    // unsigned int            _VtxCurrentIdx;     // [Internal] == VtxBuffer.Size\r\n    // ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)\r\n    // ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)\r\n    // ImVector<ImVec4>        _ClipRectStack;     // [Internal]\r\n    // ImVector<ImTextureID>   _TextureIdStack;    // [Internal]\r\n    // ImVector<ImVec2>        _Path;              // [Internal] current path building\r\n    // int                     _ChannelsCurrent;   // [Internal] current channel number (0)\r\n    // int                     _ChannelsCount;     // [Internal] number of active channels (1+)\r\n    // ImVector<ImDrawChannel> _Channels;          // [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)\r\n\r\n    // ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }\r\n    // ~ImDrawList() { ClearFreeMemory(); }\r\n    // IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)\r\n    public PushClipRect(clip_rect_min: Readonly<Bind.interface_ImVec2>, clip_rect_max: Readonly<Bind.interface_ImVec2>, intersect_with_current_clip_rect: boolean = false): void {\r\n        this.native.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);\r\n    }\r\n    // IMGUI_API void  PushClipRectFullScreen();\r\n    public PushClipRectFullScreen(): void { this.native.PushClipRectFullScreen(); }\r\n    // IMGUI_API void  PopClipRect();\r\n    public PopClipRect(): void { this.native.PopClipRect(); }\r\n    // IMGUI_API void  PushTextureID(ImTextureID texture_id);\r\n    public PushTextureID(texture_id: ImTextureID): void {\r\n        this.native.PushTextureID(ImGuiContext.setTexture(texture_id));\r\n    }\r\n    // IMGUI_API void  PopTextureID();\r\n    public PopTextureID(): void { this.native.PopTextureID(); }\r\n    // inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }\r\n    public GetClipRectMin(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n        return this.native.GetClipRectMin(out);\r\n    }\r\n    // inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }\r\n    public GetClipRectMax(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n        return this.native.GetClipRectMax(out);\r\n    }\r\n\r\n    // Primitives\r\n    // IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);\r\n    public AddLine(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, thickness: number = 1.0): void {\r\n        this.native.AddLine(a, b, col, thickness);\r\n    }\r\n    // IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round\r\n    public AddRect(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, rounding: number = 0.0, rounding_corners_flags: ImDrawCornerFlags = ImDrawCornerFlags.All, thickness: number = 1.0): void {\r\n        this.native.AddRect(a, b, col, rounding, rounding_corners_flags, thickness);\r\n    }\r\n    // IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right\r\n    public AddRectFilled(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, rounding: number = 0.0, rounding_corners_flags: ImDrawCornerFlags = ImDrawCornerFlags.All): void {\r\n        this.native.AddRectFilled(a, b, col, rounding, rounding_corners_flags);\r\n    }\r\n    // IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);\r\n    public AddRectFilledMultiColor(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, col_upr_left: Bind.ImU32, col_upr_right: Bind.ImU32, col_bot_right: Bind.ImU32, col_bot_left: Bind.ImU32): void {\r\n        this.native.AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left);\r\n    }\r\n    // IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);\r\n    public AddQuad(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, d: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, thickness: number = 1.0): void {\r\n        this.native.AddQuad(a, b, c, d, col, thickness);\r\n    }\r\n    // IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);\r\n    public AddQuadFilled(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, d: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void {\r\n        this.native.AddQuadFilled(a, b, c, d, col);\r\n    }\r\n    // IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);\r\n    public AddTriangle(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, thickness: number = 1.0): void {\r\n        this.native.AddTriangle(a, b, c, col, thickness);\r\n    }\r\n    // IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);\r\n    public AddTriangleFilled(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void {\r\n        this.native.AddTriangleFilled(a, b, c, col);\r\n    }\r\n    // IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);\r\n    public AddCircle(centre: Readonly<Bind.interface_ImVec2>, radius: number, col: Bind.ImU32, num_segments: number = 12, thickness: number = 1.0): void {\r\n        this.native.AddCircle(centre, radius, col, num_segments, thickness);\r\n    }\r\n    // IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);\r\n    public AddCircleFilled(centre: Readonly<Bind.interface_ImVec2>, radius: number, col: Bind.ImU32, num_segments: number = 12): void {\r\n        this.native.AddCircleFilled(centre, radius, col, num_segments);\r\n    }\r\n    // IMGUI_API void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL);\r\n    // IMGUI_API void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL);\r\n    public AddText(pos: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, text_begin: string, text_end?: number | null): void;\r\n    public AddText(font: ImFont, font_size: number, pos: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, text_begin: string, text_end?: number | null, wrap_width?: number, cpu_fine_clip_rect?: Readonly<Bind.interface_ImVec4> | null): void;\r\n    public AddText(...args: any[]): void {\r\n        if (args[0] instanceof ImFont) {\r\n            const font: ImFont = args[0];\r\n            const font_size: number = args[1];\r\n            const pos: Readonly<Bind.interface_ImVec2> = args[2];\r\n            const col: Bind.ImU32 = args[3];\r\n            const text_begin: string = args[4];\r\n            const text_end: number | null = args[5] || null;\r\n            const wrap_width: number = args[6] = 0.0;\r\n            const cpu_fine_clip_rect: Readonly<Bind.interface_ImVec4> | null = args[7] || null;\r\n            this.native.AddText_B(font.native, font_size, pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin, wrap_width, cpu_fine_clip_rect);\r\n        } else {\r\n            const pos: Readonly<Bind.interface_ImVec2> = args[0];\r\n            const col: Bind.ImU32 = args[1];\r\n            const text_begin: string = args[2];\r\n            const text_end: number | null = args[3] || null;\r\n            this.native.AddText_A(pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin);\r\n        }\r\n    }\r\n    // IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);\r\n    public AddImage(user_texture_id: ImTextureID | null, a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, uv_a: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, uv_b: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT, col: Bind.ImU32 = 0xFFFFFFFF): void {\r\n        this.native.AddImage(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col);\r\n    }\r\n    // IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);\r\n    public AddImageQuad(user_texture_id: ImTextureID | null, a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, d: Readonly<Bind.interface_ImVec2>, uv_a: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, uv_b: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT_X, uv_c: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT, uv_d: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT_Y, col: Bind.ImU32 = 0xFFFFFFFF): void {\r\n        this.native.AddImageQuad(ImGuiContext.setTexture(user_texture_id), a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);\r\n    }\r\n    // IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners = ImDrawCornerFlags_All);\r\n    public AddImageRounded(user_texture_id: ImTextureID | null, a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, uv_a: Readonly<Bind.interface_ImVec2>, uv_b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, rounding: number, rounding_corners: ImDrawCornerFlags = ImDrawCornerFlags.All): void {\r\n        this.native.AddImageRounded(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col, rounding, rounding_corners);\r\n    }\r\n    // IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness);\r\n    public AddPolyline(points: Array<Readonly<Bind.interface_ImVec2>>, num_points: number, col: Bind.ImU32, closed: boolean, thickness: number): void {\r\n        this.native.AddPolyline(points, num_points, col, closed, thickness);\r\n    }\r\n    // IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col);\r\n    public AddConvexPolyFilled(points: Array<Readonly<Bind.interface_ImVec2>>, num_points: number, col: Bind.ImU32): void {\r\n        this.native.AddConvexPolyFilled(points, num_points, col);\r\n    }\r\n    // IMGUI_API void  AddBezierCurve(const ImVec2& pos0, const ImVec2& cp0, const ImVec2& cp1, const ImVec2& pos1, ImU32 col, float thickness, int num_segments = 0);\r\n    public AddBezierCurve(pos0: Readonly<Bind.interface_ImVec2>, cp0: Readonly<Bind.interface_ImVec2>, cp1: Readonly<Bind.interface_ImVec2>, pos1: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, thickness: number = 1.0, num_segments: number = 0): void {\r\n        this.native.AddBezierCurve(pos0, cp0, cp1, pos1, col, thickness, num_segments);\r\n    }\r\n\r\n    // Stateful path API, add points then finish with PathFill() or PathStroke()\r\n    // inline    void  PathClear()                                                 { _Path.resize(0); }\r\n    public PathClear(): void { this.native.PathClear(); }\r\n    // inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }\r\n    public PathLineTo(pos: Readonly<Bind.interface_ImVec2>): void { this.native.PathLineTo(pos); }\r\n    // inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }\r\n    public PathLineToMergeDuplicate(pos: Readonly<Bind.interface_ImVec2>): void { this.native.PathLineToMergeDuplicate(pos); }\r\n    // inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }\r\n    public PathFillConvex(col: Bind.ImU32): void { this.native.PathFillConvex(col); }\r\n    // inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }\r\n    public PathStroke(col: Bind.ImU32, closed: boolean, thickness: number = 1.0): void { this.native.PathStroke(col, closed, thickness); }\r\n    // IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);\r\n    public PathArcTo(centre: Readonly<Bind.interface_ImVec2>, radius: number, a_min: number, a_max: number, num_segments: number = 10): void { this.native.PathArcTo(centre, radius, a_min, a_max, num_segments); }\r\n    // IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle\r\n    public PathArcToFast(centre: Readonly<Bind.interface_ImVec2>, radius: number, a_min_of_12: number, a_max_of_12: number): void { this.native.PathArcToFast(centre, radius, a_min_of_12, a_max_of_12); }\r\n    // IMGUI_API void  PathBezierCurveTo(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, int num_segments = 0);\r\n    public PathBezierCurveTo(p1: Readonly<Bind.interface_ImVec2>, p2: Readonly<Bind.interface_ImVec2>, p3: Readonly<Bind.interface_ImVec2>, num_segments: number = 0): void { this.native.PathBezierCurveTo(p1, p2, p3, num_segments); }\r\n    // IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);\r\n    public PathRect(rect_min: Readonly<Bind.interface_ImVec2>, rect_max: Readonly<Bind.interface_ImVec2>, rounding: number = 0.0, rounding_corners_flags: ImDrawCornerFlags = ImDrawCornerFlags.All): void { this.native.PathRect(rect_min, rect_max, rounding, rounding_corners_flags); }\r\n\r\n    // Channels\r\n    // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)\r\n    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)\r\n    // IMGUI_API void  ChannelsSplit(int channels_count);\r\n    public ChannelsSplit(channels_count: number): void { this.native.ChannelsSplit(channels_count); }\r\n    // IMGUI_API void  ChannelsMerge();\r\n    public ChannelsMerge(): void { this.native.ChannelsMerge(); }\r\n    // IMGUI_API void  ChannelsSetCurrent(int channel_index);\r\n    public ChannelsSetCurrent(channel_index: number): void { this.native.ChannelsSetCurrent(channel_index); }\r\n\r\n    // Advanced\r\n    // IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.\r\n    public AddCallback(callback: ImDrawCallback, callback_data: any): void {\r\n        const _callback: Bind.ImDrawCallback = (parent_list: Readonly<Bind.reference_ImDrawList>, draw_cmd: Readonly<Bind.reference_ImDrawCmd>): void => {\r\n            callback(new ImDrawList(parent_list), new ImDrawCmd(draw_cmd));\r\n        };\r\n        this.native.AddCallback(_callback, callback_data);\r\n    }\r\n    // IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible\r\n    public AddDrawCmd(): void { this.native.AddDrawCmd(); }\r\n\r\n    // Internal helpers\r\n    // NB: all primitives needs to be reserved via PrimReserve() beforehand!\r\n    // IMGUI_API void  Clear();\r\n    public Clear(): void { this.native.Clear(); }\r\n    // IMGUI_API void  ClearFreeMemory();\r\n    public ClearFreeMemory(): void { this.native.ClearFreeMemory(); }\r\n    // IMGUI_API void  PrimReserve(int idx_count, int vtx_count);\r\n    public PrimReserve(idx_count: number, vtx_count: number): void { this.native.PrimReserve(idx_count, vtx_count); }\r\n    // IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)\r\n    public PrimRect(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void { this.native.PrimRect(a, b, col); }\r\n    // IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);\r\n    public PrimRectUV(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, uv_a: Readonly<Bind.interface_ImVec2>, uv_b: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void { this.native.PrimRectUV(a, b, uv_a, uv_b, col); }\r\n    // IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);\r\n    public PrimQuadUV(a: Readonly<Bind.interface_ImVec2>, b: Readonly<Bind.interface_ImVec2>, c: Readonly<Bind.interface_ImVec2>, d: Readonly<Bind.interface_ImVec2>, uv_a: Readonly<Bind.interface_ImVec2>, uv_b: Readonly<Bind.interface_ImVec2>, uv_c: Readonly<Bind.interface_ImVec2>, uv_d: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void { this.native.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); }\r\n    // inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }\r\n    public PrimWriteVtx(pos: Readonly<Bind.interface_ImVec2>, uv: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void { this.native.PrimWriteVtx(pos, uv, col); }\r\n    // inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }\r\n    public PrimWriteIdx(idx: ImDrawIdx): void { this.native.PrimWriteIdx(idx); }\r\n    // inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }\r\n    public PrimVtx(pos: Readonly<Bind.interface_ImVec2>, uv: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32): void { this.native.PrimVtx(pos, uv, col); }\r\n    // IMGUI_API void  UpdateClipRect();\r\n    public UpdateClipRect(): void { this.native.UpdateClipRect(); }\r\n    // IMGUI_API void  UpdateTextureID();\r\n    public UpdateTextureID(): void { this.native.UpdateTextureID(); }\r\n}\r\n\r\n// All draw data to render an ImGui frame\r\nexport class ImDrawData\r\n{\r\n    constructor(public readonly native: Bind.reference_ImDrawData) {}\r\n\r\n    public IterateDrawLists(callback: (draw_list: ImDrawList) => void): void {\r\n        this.native.IterateDrawLists((draw_list: Bind.reference_ImDrawList): void => {\r\n            callback(new ImDrawList(draw_list));\r\n        });\r\n    }\r\n\r\n    // bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.\r\n    get Valid(): boolean { return this.native.Valid; }\r\n    // ImDrawList**    CmdLists;\r\n    // int             CmdListsCount;\r\n    get CmdListsCount(): number { return this.native.CmdListsCount; }\r\n    // int             TotalIdxCount;          // For convenience, sum of all cmd_lists idx_buffer.Size\r\n    get TotalIdxCount(): number { return this.native.TotalIdxCount; }\r\n    // int             TotalVtxCount;          // For convenience, sum of all cmd_lists vtx_buffer.Size\r\n    get TotalVtxCount(): number { return this.native.TotalVtxCount; }\r\n    // ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)\r\n    get DisplayPos(): Readonly<Bind.reference_ImVec2> { return this.native.DisplayPos; }\r\n    // ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)\r\n    get DisplaySize(): Readonly<Bind.reference_ImVec2> { return this.native.DisplaySize; }\r\n    // ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.\r\n    get FramebufferScale(): Readonly<Bind.reference_ImVec2> { return this.native.FramebufferScale; }\r\n\r\n    // Functions\r\n    // ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }\r\n    // IMGUI_API void DeIndexAllBuffers();               // For backward compatibility or convenience: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!\r\n    public DeIndexAllBuffers(): void { this.native.DeIndexAllBuffers(); }\r\n    // IMGUI_API void ScaleClipRects(const ImVec2& fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.\r\n    public ScaleClipRects(fb_scale: Readonly<Bind.interface_ImVec2>): void {\r\n        this.native.ScaleClipRects(fb_scale);\r\n    }\r\n}\r\n\r\nexport class script_ImFontConfig implements Bind.interface_ImFontConfig\r\n{\r\n    // void*           FontData;                   //          // TTF/OTF data\r\n    // int             FontDataSize;               //          // TTF/OTF data size\r\n    FontData: DataView | null = null;\r\n    // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).\r\n    FontDataOwnedByAtlas: boolean = true;\r\n    // int             FontNo;                     // 0        // Index of font within TTF/OTF file\r\n    FontNo: number = 0;\r\n    // float           SizePixels;                 //          // Size in pixels for rasterizer.\r\n    SizePixels: number = 0;\r\n    // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.\r\n    OversampleH: number = 3;\r\n    OversampleV: number = 1;\r\n    // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.\r\n    PixelSnapH: boolean = false;\r\n    // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.\r\n    GlyphExtraSpacing: ImVec2 = new ImVec2(0, 0);\r\n    // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.\r\n    GlyphOffset: ImVec2 = new ImVec2(0, 0);\r\n    // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.\r\n    GlyphRanges: number | null = null;\r\n    // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font\r\n    GlyphMinAdvanceX: number = 0;\r\n    // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs\r\n    GlyphMaxAdvanceX: number = Number.MAX_VALUE;\r\n    // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.\r\n    MergeMode: boolean = false;\r\n    // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.\r\n    RasterizerFlags: number = 0;\r\n    // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.\r\n    RasterizerMultiply: number = 1.0;\r\n\r\n    // [Internal]\r\n    // char            Name[32];                               // Name (strictly to ease debugging)\r\n    Name: string = \"\";\r\n    // ImFont*         DstFont;\r\n    DstFont: Bind.reference_ImFont | null = null;\r\n\r\n    // IMGUI_API ImFontConfig();\r\n}\r\n\r\nexport class ImFontConfig {\r\n    constructor(public readonly internal: Bind.interface_ImFontConfig = new script_ImFontConfig()) {}\r\n\r\n    // void*           FontData;                   //          // TTF/OTF data\r\n    // int             FontDataSize;               //          // TTF/OTF data size\r\n    get FontData(): DataView | null { return this.internal.FontData; }\r\n    // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).\r\n    get FontDataOwnedByAtlas(): boolean { return this.internal.FontDataOwnedByAtlas; }\r\n    // int             FontNo;                     // 0        // Index of font within TTF/OTF file\r\n    get FontNo(): number { return this.internal.FontNo; }\r\n    // float           SizePixels;                 //          // Size in pixels for rasterizer.\r\n    get SizePixels(): number { return this.internal.SizePixels; }\r\n    // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.\r\n    get OversampleH(): number { return this.internal.OversampleH; }\r\n    get OversampleV(): number { return this.internal.OversampleV; }\r\n    // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.\r\n    get PixelSnapH(): boolean { return this.internal.PixelSnapH; }\r\n    // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.\r\n    get GlyphExtraSpacing(): ImVec2 { return this.internal.GlyphExtraSpacing; }\r\n    // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.\r\n    get GlyphOffset(): ImVec2 { return this.internal.GlyphOffset; }\r\n    // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.\r\n    get GlyphRanges(): number | null { return this.internal.GlyphRanges; }\r\n    // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font\r\n    get GlyphMinAdvanceX(): number { return this.internal.GlyphMinAdvanceX; }\r\n    // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs\r\n    get GlyphMaxAdvanceX(): number { return this.internal.GlyphMaxAdvanceX; }\r\n    // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.\r\n    get MergeMode(): boolean { return this.internal.MergeMode; }\r\n    // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.\r\n    get RasterizerFlags(): number { return this.internal.RasterizerFlags; }\r\n    // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.\r\n    get RasterizerMultiply(): number { return this.internal.RasterizerMultiply; }\r\n\r\n    // [Internal]\r\n    // char            Name[32];                               // Name (strictly to ease debugging)\r\n    get Name(): string { return this.internal.Name; }\r\n    set Name(value: string) { this.internal.Name = value; }\r\n    // ImFont*         DstFont;\r\n    get DstFont(): ImFont | null {\r\n        const font = this.internal.DstFont;\r\n        return font && new ImFont(font);\r\n    }\r\n\r\n    // IMGUI_API ImFontConfig();\r\n}\r\n\r\n// struct ImFontGlyph\r\nexport class script_ImFontGlyph implements Bind.interface_ImFontGlyph\r\n{\r\n    // ImWchar         Codepoint;          // 0x0000..0xFFFF\r\n    Codepoint: number = 0;\r\n    // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)\r\n    AdvanceX: number = 0.0;\r\n    // float           X0, Y0, X1, Y1;     // Glyph corners\r\n    X0: number = 0.0;\r\n    Y0: number = 0.0;\r\n    X1: number = 1.0;\r\n    Y1: number = 1.0;\r\n    // float           U0, V0, U1, V1;     // Texture coordinates\r\n    U0: number = 0.0;\r\n    V0: number = 0.0;\r\n    U1: number = 1.0;\r\n    V1: number = 1.0;\r\n}\r\n\r\nexport class ImFontGlyph implements Bind.interface_ImFontGlyph {\r\n    constructor(public readonly internal: Bind.interface_ImFontGlyph = new script_ImFontGlyph()) {}\r\n    // ImWchar         Codepoint;          // 0x0000..0xFFFF\r\n    get Codepoint(): number {  return this.internal.Codepoint; }\r\n    // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)\r\n    get AdvanceX(): number { return this.internal.AdvanceX; };\r\n    // float           X0, Y0, X1, Y1;     // Glyph corners\r\n    get X0(): number { return this.internal.X0; };\r\n    get Y0(): number { return this.internal.Y0; };\r\n    get X1(): number { return this.internal.X1; };\r\n    get Y1(): number { return this.internal.Y1; };\r\n    // float           U0, V0, U1, V1;     // Texture coordinates\r\n    get U0(): number { return this.internal.U0; };\r\n    get V0(): number { return this.internal.V0; };\r\n    get U1(): number { return this.internal.U1; };\r\n    get V1(): number { return this.internal.V1; };\r\n}\r\n\r\nexport enum ImFontAtlasFlags\r\n{\r\n    None               = 0,\r\n    NoPowerOfTwoHeight = 1 << 0,   // Don't round the height to next power of two\r\n    NoMouseCursors     = 1 << 1,   // Don't build software mouse cursors into the atlas\r\n}\r\n\r\n// Load and rasterize multiple TTF/OTF fonts into a same texture.\r\n// Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.\r\n// We also add custom graphic data into the texture that serves for ImGui.\r\n//  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.\r\n//  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.\r\n//  3. Upload the pixels data into a texture within your graphics system.\r\n//  4. Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture. This value will be passed back to you during rendering to identify the texture.\r\n// IMPORTANT: If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the ImFont is build (when calling GetTextData*** or Build()). We only copy the pointer, not the data.\r\nexport class ImFontAtlas\r\n{\r\n    constructor(public readonly native: Bind.reference_ImFontAtlas) {}\r\n\r\n    // IMGUI_API ImFontAtlas();\r\n    // IMGUI_API ~ImFontAtlas();\r\n    // IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);\r\n    // IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);\r\n    public AddFontDefault(font_cfg: Bind.interface_ImFontConfig | null = null): ImFont {\r\n        return new ImFont(this.native.AddFontDefault(font_cfg));\r\n    }\r\n    // IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);\r\n    // IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.\r\n    public AddFontFromMemoryTTF(data: ArrayBuffer, size_pixels: number, font_cfg: ImFontConfig | null = null, glyph_ranges: number | null = null): ImFont {\r\n        return new ImFont(this.native.AddFontFromMemoryTTF(new Uint8Array(data), size_pixels, font_cfg && font_cfg.internal, glyph_ranges));\r\n    }\r\n    // IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.\r\n    // IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.\r\n    // IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.\r\n    public ClearTexData(): void { this.native.ClearTexData(); }\r\n    // IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)\r\n    public ClearInputData(): void { this.native.ClearInputData(); }\r\n    // IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)\r\n    public ClearFonts(): void { this.native.ClearFonts(); }\r\n    // IMGUI_API void              Clear();                    // Clear all\r\n    public Clear(): void { this.native.Clear(); }\r\n\r\n    // Build atlas, retrieve pixel data.\r\n    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().\r\n    // RGBA32 format is provided for convenience and compatibility, but note that unless you use CustomRect to draw color data, the RGB pixels emitted from Fonts will all be white (~75% of waste).\r\n    // Pitch = Width * BytesPerPixels\r\n    // IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.\r\n    public Build(): boolean { return this.native.Build(); }\r\n    // IMGUI_API bool              IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }\r\n    public IsBuilt(): boolean { return this.native.IsBuilt(); }\r\n    // IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel\r\n    public GetTexDataAsAlpha8(): { pixels: Uint8ClampedArray, width: number, height: number, bytes_per_pixel: number } {\r\n        return this.native.GetTexDataAsAlpha8();\r\n    }\r\n    // IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel\r\n    public GetTexDataAsRGBA32(): { pixels: Uint8ClampedArray, width: number, height: number, bytes_per_pixel: number } {\r\n        return this.native.GetTexDataAsRGBA32();\r\n    }\r\n    // void                        SetTexID(ImTextureID id)    { TexID = id; }\r\n    public SetTexID(id: ImTextureID | null): void { this.TexID = id; }\r\n\r\n    //-------------------------------------------\r\n    // Glyph Ranges\r\n    //-------------------------------------------\r\n\r\n    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)\r\n    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8\"Hello world\" syntax. See FAQ for details.\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin\r\n    GetGlyphRangesDefault(): number { return this.native.GetGlyphRangesDefault(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters\r\n    GetGlyphRangesKorean(): number { return this.native.GetGlyphRangesKorean(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs\r\n    GetGlyphRangesJapanese(): number { return this.native.GetGlyphRangesJapanese(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs\r\n    GetGlyphRangesChineseFull(): number { return this.native.GetGlyphRangesChineseFull(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese\r\n    GetGlyphRangesChineseSimplifiedCommon(): number { return this.native.GetGlyphRangesChineseSimplifiedCommon(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters\r\n    GetGlyphRangesCyrillic(): number { return this.native.GetGlyphRangesCyrillic(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters\r\n    GetGlyphRangesThai(): number { return this.native.GetGlyphRangesThai(); }\r\n    // IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();       // Default + Vietnamese characters\r\n    GetGlyphRangesVietnamese(): number { return this.native.GetGlyphRangesVietnamese(); }\r\n\r\n    // Helpers to build glyph ranges from text data. Feed your application strings/characters to it then call BuildRanges().\r\n    // struct GlyphRangesBuilder\r\n    // {\r\n    //     ImVector<unsigned char> UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)\r\n    //     GlyphRangesBuilder()                { UsedChars.resize(0x10000 / 8); memset(UsedChars.Data, 0, 0x10000 / 8); }\r\n    //     bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }\r\n    //     void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  // Set bit 'c' in the array\r\n    //     void           AddChar(ImWchar c)   { SetBit(c); }                          // Add character\r\n    //     IMGUI_API void AddText(const char* text, const char* text_end = NULL);      // Add string (each character of the UTF-8 string are added)\r\n    //     IMGUI_API void AddRanges(const ImWchar* ranges);                            // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault) to force add all of ASCII/Latin+Ext\r\n    //     IMGUI_API void BuildRanges(ImVector<ImWchar>* out_ranges);                  // Output new ranges\r\n    // };\r\n\r\n    //-------------------------------------------\r\n    // Custom Rectangles/Glyphs API\r\n    //-------------------------------------------\r\n\r\n    // You can request arbitrary rectangles to be packed into the atlas, for your own purposes. After calling Build(), you can query the rectangle position and render your pixels.\r\n    // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point), so you can render e.g. custom colorful icons and use them as regular glyphs.\r\n    // struct CustomRect\r\n    // {\r\n    //     unsigned int    ID;             // Input    // User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other/internal/custom texture data.\r\n    //     unsigned short  Width, Height;  // Input    // Desired rectangle dimension\r\n    //     unsigned short  X, Y;           // Output   // Packed position in Atlas\r\n    //     float           GlyphAdvanceX;  // Input    // For custom font glyphs only (ID<0x10000): glyph xadvance\r\n    //     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only (ID<0x10000): glyph display offset\r\n    //     ImFont*         Font;           // Input    // For custom font glyphs only (ID<0x10000): target font\r\n    //     CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }\r\n    //     bool IsPacked() const   { return X != 0xFFFF; }\r\n    // };\r\n\r\n    // IMGUI_API int       AddCustomRectRegular(unsigned int id, int width, int height);                                                                   // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList\r\n    // IMGUI_API int       AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0,0));   // Id needs to be < 0x10000 to register a rectangle to map into a specific font.\r\n    // IMGUI_API void      CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);\r\n    // const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }\r\n\r\n    //-------------------------------------------\r\n    // Members\r\n    //-------------------------------------------\r\n\r\n    // bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.\r\n    get Locked(): boolean { return this.native.Locked; }\r\n    set Locked(value: boolean) { this.native.Locked = value; }\r\n    // ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)\r\n    get Flags(): ImFontAtlasFlags { return this.native.Flags; }\r\n    set Flags(value: ImFontAtlasFlags) { this.native.Flags = value; }\r\n    // ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.\r\n    get TexID(): ImTextureID | null {\r\n        return ImGuiContext.getTexture(this.native.TexID);\r\n    }\r\n    set TexID(value: ImTextureID | null) {\r\n        this.native.TexID = ImGuiContext.setTexture(value);\r\n    }\r\n    // int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.\r\n    get TexDesiredWidth(): number { return this.native.TexDesiredWidth; }\r\n    set TexDesiredWidth(value: number) { this.native.TexDesiredWidth = value; }\r\n    // int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.\r\n    get TexGlyphPadding(): number { return this.native.TexGlyphPadding; }\r\n    set TexGlyphPadding(value: number) { this.native.TexGlyphPadding = value; }\r\n\r\n    // [Internal]\r\n    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.\r\n    // unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight\r\n    // unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4\r\n    // int                         TexWidth;           // Texture width calculated during Build().\r\n    get TexWidth(): number { return this.native.TexWidth; }\r\n    // int                         TexHeight;          // Texture height calculated during Build().\r\n    get TexHeight(): number { return this.native.TexHeight; }\r\n    // ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)\r\n    get TexUvScale(): Readonly<Bind.reference_ImVec2> { return this.native.TexUvScale; }\r\n    // ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel\r\n    get TexUvWhitePixel(): Readonly<Bind.reference_ImVec2> { return this.native.TexUvWhitePixel; }\r\n    // ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.\r\n    get Fonts(): ImVector<ImFont> {\r\n        const fonts: ImVector<ImFont> = new ImVector<ImFont>();\r\n        this.native.IterateFonts((font: Bind.reference_ImFont) => {\r\n            fonts.push(new ImFont(font));\r\n        });\r\n        return fonts;\r\n    }\r\n    // ImVector<CustomRect>        CustomRects;        // Rectangles for packing custom texture data into the atlas.\r\n    // ImVector<ImFontConfig>      ConfigData;         // Internal data\r\n    // int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList\r\n}\r\n\r\n// Font runtime data and rendering\r\n// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().\r\nexport class ImFont\r\n{\r\n    constructor(public readonly native: Bind.reference_ImFont) {}\r\n\r\n    // Members: Hot ~62/78 bytes\r\n    // float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)\r\n    get FontSize(): number { return this.native.FontSize; }\r\n    // float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()\r\n    get Scale(): number { return this.native.Scale; }\r\n    set Scale(value: number) { this.native.Scale = value; }\r\n    // ImVec2                      DisplayOffset;      // = (0.f,1.f)  // Offset font rendering by xx pixels\r\n    get DisplayOffset(): Bind.interface_ImVec2 { return this.native.DisplayOffset; }\r\n    // ImVector<ImFontGlyph>       Glyphs;             //              // All glyphs.\r\n    get Glyphs(): ImVector<ImFontGlyph> {\r\n        const glyphs = new ImVector<ImFontGlyph>();\r\n        this.native.IterateGlyphs((glyph: Bind.reference_ImFontGlyph): void => {\r\n            glyphs.push(new ImFontGlyph(glyph)); // TODO: wrap native\r\n        });\r\n        return glyphs;\r\n    }\r\n    // ImVector<float>             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).\r\n    // get IndexAdvanceX(): any { return this.native.IndexAdvanceX; }\r\n    // ImVector<unsigned short>    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.\r\n    // get IndexLookup(): any { return this.native.IndexLookup; }\r\n    // const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)\r\n    get FallbackGlyph(): ImFontGlyph | null {\r\n        const glyph = this.native.FallbackGlyph;\r\n        return glyph && new ImFontGlyph(glyph);\r\n    }\r\n    set FallbackGlyph(value: ImFontGlyph | null) {\r\n        this.native.FallbackGlyph = value && value.internal as Bind.reference_ImFontGlyph;\r\n    }\r\n    // float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX\r\n    get FallbackAdvanceX(): number { return this.native.FallbackAdvanceX; }\r\n    // ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()\r\n    get FallbackChar(): number { return this.native.FallbackChar; }\r\n\r\n    // Members: Cold ~18/26 bytes\r\n    // short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.\r\n    get ConfigDataCount(): number { return this.ConfigData.length; }\r\n    // ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData\r\n    get ConfigData(): ImFontConfig[] {\r\n        const cfg_data: ImFontConfig[] = [];\r\n        this.native.IterateConfigData((cfg: Bind.interface_ImFontConfig): void => {\r\n            cfg_data.push(new ImFontConfig(cfg));\r\n        });\r\n        return cfg_data;\r\n    }\r\n    // ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into\r\n    get ContainerAtlas(): ImFontAtlas | null { return null; }\r\n    // float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]\r\n    get Ascent(): number { return this.native.Ascent; }\r\n    get Descent(): number { return this.native.Descent; }\r\n    // int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)\r\n    get MetricsTotalSurface(): number { return this.native.MetricsTotalSurface; }\r\n\r\n    // Methods\r\n    // IMGUI_API ImFont();\r\n    // IMGUI_API ~ImFont();\r\n    // IMGUI_API void              ClearOutputData();\r\n    public ClearOutputData(): void { return this.native.ClearOutputData(); }\r\n    // IMGUI_API void              BuildLookupTable();\r\n    public BuildLookupTable(): void { return this.native.BuildLookupTable(); }\r\n    // IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;\r\n    public FindGlyph(c: number): Readonly<ImFontGlyph> | null {\r\n        const glyph: Readonly<Bind.reference_ImFontGlyph> | null = this.native.FindGlyph(c);\r\n        return glyph && new ImFontGlyph(glyph);\r\n    }\r\n    // IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;\r\n    public FindGlyphNoFallback(c: number): ImFontGlyph | null {\r\n        const glyph: Readonly<Bind.reference_ImFontGlyph> | null = this.native.FindGlyphNoFallback(c);\r\n        return glyph && new ImFontGlyph(glyph);\r\n    }\r\n    // IMGUI_API void              SetFallbackChar(ImWchar c);\r\n    public SetFallbackChar(c: number): void { return this.native.SetFallbackChar(c); }\r\n    // float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }\r\n    public GetCharAdvance(c: number): number { return this.native.GetCharAdvance(c); }\r\n    // bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }\r\n    public IsLoaded(): boolean { return this.native.IsLoaded(); }\r\n    // const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : \"<unknown>\"; }\r\n    public GetDebugName(): string { return this.native.GetDebugName(); }\r\n\r\n    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.\r\n    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.\r\n    // IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8\r\n    public CalcTextSizeA(size: number, max_width: number, wrap_width: number, text_begin: string, text_end: number | null = null, remaining: Bind.ImScalar<number> | null = null): Bind.interface_ImVec2 {\r\n        return this.native.CalcTextSizeA(size, max_width, wrap_width, text_end !== null ? text_begin.substring(0, text_end) : text_begin, remaining, new ImVec2());\r\n    }\r\n    // IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;\r\n    public CalcWordWrapPositionA(scale: number, text: string, text_end: number | null = null, wrap_width: number): number {\r\n        return this.native.CalcWordWrapPositionA(scale, text_end !== null ? text.substring(0, text_end) : text, wrap_width);\r\n    }\r\n    // IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;\r\n    public RenderChar(draw_list: ImDrawList, size: number, pos: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, c: Bind.ImWchar): void {\r\n        this.native.RenderChar(draw_list.native, size, pos, col, c);\r\n    }\r\n    // IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;\r\n    public RenderText(draw_list: ImDrawList, size: number, pos: Readonly<Bind.interface_ImVec2>, col: Bind.ImU32, clip_rect: Readonly<Bind.interface_ImVec4>, text_begin: string, text_end: number | null = null, wrap_width: number = 0.0, cpu_fine_clip: boolean = false): void {}\r\n\r\n    // [Internal]\r\n    // IMGUI_API void              GrowIndex(int new_size);\r\n    // IMGUI_API void              AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);\r\n    // IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.\r\n\r\n    // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\r\n    // typedef ImFontGlyph Glyph; // OBSOLETE 1.52+\r\n    // #endif\r\n}\r\n\r\n// a script version of BindImGui.ImGuiStyle with matching interface\r\nclass script_ImGuiStyle implements Bind.interface_ImGuiStyle {\r\n    public Alpha: number = 1.0;\r\n    public WindowPadding: ImVec2 = new ImVec2(8, 8);\r\n    public WindowRounding: number = 7.0;\r\n    public WindowBorderSize: number = 0.0;\r\n    public WindowMinSize: ImVec2 = new ImVec2(32, 32);\r\n    public WindowTitleAlign: ImVec2 = new ImVec2(0.0, 0.5);\r\n    public WindowMenuButtonPosition: ImGuiDir = ImGuiDir.Left;\r\n    public ChildRounding: number = 0.0;\r\n    public ChildBorderSize: number = 1.0;\r\n    public PopupRounding: number = 0.0;\r\n    public PopupBorderSize: number = 1.0;\r\n    public FramePadding: ImVec2 = new ImVec2(4, 3);\r\n    public FrameRounding: number = 0.0;\r\n    public FrameBorderSize: number = 0.0;\r\n    public ItemSpacing: ImVec2 = new ImVec2(8, 4);\r\n    public ItemInnerSpacing: ImVec2 = new ImVec2(4, 4);\r\n    public TouchExtraPadding: ImVec2 = new ImVec2(0, 0);\r\n    public IndentSpacing: number = 21.0;\r\n    public ColumnsMinSpacing: number = 6.0;\r\n    public ScrollbarSize: number = 16.0;\r\n    public ScrollbarRounding: number = 9.0;\r\n    public GrabMinSize: number = 10.0;\r\n    public GrabRounding: number = 0.0;\r\n    public TabRounding: number = 0.0;\r\n    public TabBorderSize: number = 0.0;\r\n    public ButtonTextAlign: ImVec2 = new ImVec2(0.5, 0.5);\r\n    public SelectableTextAlign: ImVec2 = new ImVec2(0.0, 0.0);\r\n    public DisplayWindowPadding: ImVec2 = new ImVec2(22, 22);\r\n    public DisplaySafeAreaPadding: ImVec2 = new ImVec2(4, 4);\r\n    public MouseCursorScale: number = 1;\r\n    public AntiAliasedLines: boolean = true;\r\n    public AntiAliasedFill: boolean = true;\r\n    public CurveTessellationTol: number = 1.25;\r\n    private Colors: ImVec4[] = [];\r\n    public _getAt_Colors(index: number): Bind.interface_ImVec4 { return this.Colors[index]; }\r\n    public _setAt_Colors(index: number, color: Readonly<Bind.interface_ImVec4>): boolean { this.Colors[index].Copy(color); return true; }\r\n\r\n    constructor() {\r\n        for (let i = 0; i < ImGuiCol.COUNT; ++i) {\r\n            this.Colors[i] = new ImVec4();\r\n        }\r\n        const _this = new ImGuiStyle(this);\r\n        const native = new bind.ImGuiStyle();\r\n        const _that = new ImGuiStyle(native);\r\n        _that.Copy(_this);\r\n        bind.StyleColorsClassic(native);\r\n        _this.Copy(_that);\r\n        native.delete();\r\n    }\r\n\r\n    public ScaleAllSizes(scale_factor: number): void {\r\n        const _this = new ImGuiStyle(this);\r\n        const native = new bind.ImGuiStyle();\r\n        const _that = new ImGuiStyle(native);\r\n        _that.Copy(_this);\r\n        native.ScaleAllSizes(scale_factor);\r\n        _this.Copy(_that);\r\n        native.delete();\r\n    }\r\n}\r\n\r\nexport class ImGuiStyle\r\n{\r\n    constructor(public readonly internal: Bind.interface_ImGuiStyle = new script_ImGuiStyle()) {}\r\n\r\n    get Alpha(): number { return this.internal.Alpha; } set Alpha(value: number) { this.internal.Alpha = value; }\r\n    get WindowPadding(): Bind.interface_ImVec2 { return this.internal.WindowPadding; }\r\n    get WindowRounding(): number { return this.internal.WindowRounding; } set WindowRounding(value: number) { this.internal.WindowRounding = value; }\r\n    get WindowBorderSize(): number { return this.internal.WindowBorderSize; } set WindowBorderSize(value: number) { this.internal.WindowBorderSize = value; }\r\n    get WindowMinSize(): Bind.interface_ImVec2 { return this.internal.WindowMinSize; }\r\n    get WindowTitleAlign(): Bind.interface_ImVec2 { return this.internal.WindowTitleAlign; }\r\n    get WindowMenuButtonPosition(): ImGuiDir { return this.internal.WindowMenuButtonPosition; } set WindowMenuButtonPosition(value: ImGuiDir) { this.internal.WindowMenuButtonPosition = value; }\r\n    get ChildRounding(): number { return this.internal.ChildRounding; } set ChildRounding(value: number) { this.internal.ChildRounding = value; }\r\n    get ChildBorderSize(): number { return this.internal.ChildBorderSize; } set ChildBorderSize(value: number) { this.internal.ChildBorderSize = value; }\r\n    get PopupRounding(): number { return this.internal.PopupRounding; } set PopupRounding(value: number) { this.internal.PopupRounding = value; }\r\n    get PopupBorderSize(): number { return this.internal.PopupBorderSize; } set PopupBorderSize(value: number) { this.internal.PopupBorderSize = value; }\r\n    get FramePadding(): Bind.interface_ImVec2 { return this.internal.FramePadding; }\r\n    get FrameRounding(): number { return this.internal.FrameRounding; } set FrameRounding(value: number) { this.internal.FrameRounding = value; }\r\n    get FrameBorderSize(): number { return this.internal.FrameBorderSize; } set FrameBorderSize(value: number) { this.internal.FrameBorderSize = value; }\r\n    get ItemSpacing(): Bind.interface_ImVec2 { return this.internal.ItemSpacing; }\r\n    get ItemInnerSpacing(): Bind.interface_ImVec2 { return this.internal.ItemInnerSpacing; }\r\n    get TouchExtraPadding(): Bind.interface_ImVec2 { return this.internal.TouchExtraPadding; }\r\n    get IndentSpacing(): number { return this.internal.IndentSpacing; } set IndentSpacing(value: number) { this.internal.IndentSpacing = value; }\r\n    get ColumnsMinSpacing(): number { return this.internal.ColumnsMinSpacing; } set ColumnsMinSpacing(value: number) { this.internal.ColumnsMinSpacing = value; }\r\n    get ScrollbarSize(): number { return this.internal.ScrollbarSize; } set ScrollbarSize(value: number) { this.internal.ScrollbarSize = value; }\r\n    get ScrollbarRounding(): number { return this.internal.ScrollbarRounding; } set ScrollbarRounding(value: number) { this.internal.ScrollbarRounding = value; }\r\n    get GrabMinSize(): number { return this.internal.GrabMinSize; } set GrabMinSize(value: number) { this.internal.GrabMinSize = value; }\r\n    get GrabRounding(): number { return this.internal.GrabRounding; } set GrabRounding(value: number) { this.internal.GrabRounding = value; }\r\n    get TabRounding(): number { return this.internal.TabRounding; } set TabRounding(value: number) { this.internal.TabRounding = value; }\r\n    get TabBorderSize(): number { return this.internal.TabBorderSize; } set TabBorderSize(value: number) { this.internal.TabBorderSize = value; }\r\n    get ButtonTextAlign(): Bind.interface_ImVec2 { return this.internal.ButtonTextAlign; }\r\n    get SelectableTextAlign(): Bind.interface_ImVec2 { return this.internal.SelectableTextAlign; }\r\n    get DisplayWindowPadding(): Bind.interface_ImVec2 { return this.internal.DisplayWindowPadding; }\r\n    get DisplaySafeAreaPadding(): Bind.interface_ImVec2 { return this.internal.DisplaySafeAreaPadding; }\r\n    get MouseCursorScale(): number { return this.internal.MouseCursorScale; } set MouseCursorScale(value: number) { this.internal.MouseCursorScale = value; }\r\n    get AntiAliasedLines(): boolean { return this.internal.AntiAliasedLines; } set AntiAliasedLines(value: boolean) { this.internal.AntiAliasedLines = value; }\r\n    get AntiAliasedFill(): boolean { return this.internal.AntiAliasedFill; } set AntiAliasedFill(value: boolean) { this.internal.AntiAliasedFill = value; }\r\n    get CurveTessellationTol(): number { return this.internal.CurveTessellationTol; } set CurveTessellationTol(value: number) { this.internal.CurveTessellationTol = value; }\r\n    public Colors: Bind.interface_ImVec4[] = new Proxy([], {\r\n        get: (target: Bind.interface_ImVec4[], key: PropertyKey): number | Bind.interface_ImVec4 => {\r\n            if (key === \"length\") { return ImGuiCol.COUNT; }\r\n            return this.internal._getAt_Colors(Number(key));\r\n        },\r\n        set: (target: Bind.interface_ImVec4[], key: PropertyKey, value: Readonly<Bind.interface_ImVec4>): boolean => {\r\n            return this.internal._setAt_Colors(Number(key), value);\r\n        },\r\n    });\r\n\r\n    public Copy(other: Readonly<ImGuiStyle>): this {\r\n        this.Alpha = other.Alpha;\r\n        this.WindowPadding.Copy(other.WindowPadding);\r\n        this.WindowRounding = other.WindowRounding;\r\n        this.WindowBorderSize = other.WindowBorderSize;\r\n        this.WindowMinSize.Copy(other.WindowMinSize);\r\n        this.WindowTitleAlign.Copy(other.WindowTitleAlign);\r\n        this.WindowMenuButtonPosition = other.WindowMenuButtonPosition;\r\n        this.ChildRounding = other.ChildRounding;\r\n        this.ChildBorderSize = other.ChildBorderSize;\r\n        this.PopupRounding = other.PopupRounding;\r\n        this.PopupBorderSize = other.PopupBorderSize;\r\n        this.FramePadding.Copy(other.FramePadding);\r\n        this.FrameRounding = other.FrameRounding;\r\n        this.FrameBorderSize = other.FrameBorderSize;\r\n        this.ItemSpacing.Copy(other.ItemSpacing);\r\n        this.ItemInnerSpacing.Copy(other.ItemInnerSpacing);\r\n        this.TouchExtraPadding.Copy(other.TouchExtraPadding);\r\n        this.IndentSpacing = other.IndentSpacing;\r\n        this.ColumnsMinSpacing = other.ColumnsMinSpacing;\r\n        this.ScrollbarSize = other.ScrollbarSize;\r\n        this.ScrollbarRounding = other.ScrollbarRounding;\r\n        this.GrabMinSize = other.GrabMinSize;\r\n        this.GrabRounding = other.GrabRounding;\r\n        this.TabRounding = other.TabRounding;\r\n        this.TabBorderSize = other.TabBorderSize;\r\n        this.ButtonTextAlign.Copy(other.ButtonTextAlign);\r\n        this.DisplayWindowPadding.Copy(other.DisplayWindowPadding);\r\n        this.DisplaySafeAreaPadding.Copy(other.DisplaySafeAreaPadding);\r\n        this.MouseCursorScale = other.MouseCursorScale;\r\n        this.AntiAliasedLines = other.AntiAliasedLines;\r\n        this.AntiAliasedFill = other.AntiAliasedFill;\r\n        this.CurveTessellationTol = other.CurveTessellationTol;\r\n        for (let i = 0; i < ImGuiCol.COUNT; ++i) {\r\n            this.Colors[i].Copy(other.Colors[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public ScaleAllSizes(scale_factor: number): void { this.internal.ScaleAllSizes(scale_factor); }\r\n}\r\n\r\n// This is where your app communicate with Dear ImGui. Access via ImGui::GetIO().\r\n// Read 'Programmer guide' section in .cpp file for general usage.\r\nexport class ImGuiIO\r\n{\r\n    constructor(public readonly native: Bind.reference_ImGuiIO) {}\r\n\r\n    //------------------------------------------------------------------\r\n    // Settings (fill once)                 // Default value:\r\n    //------------------------------------------------------------------\r\n\r\n    // ImGuiConfigFlags   ConfigFlags;         // = 0                  // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.\r\n    get ConfigFlags(): ImGuiConfigFlags { return this.native.ConfigFlags; }\r\n    set ConfigFlags(value: ImGuiConfigFlags) { this.native.ConfigFlags = value; }\r\n    // ImGuiBackendFlags  BackendFlags;        // = 0                  // Set ImGuiBackendFlags_ enum. Set by imgui_impl_xxx files or custom back-end to communicate features supported by the back-end.\r\n    get BackendFlags(): ImGuiBackendFlags { return this.native.BackendFlags; }\r\n    set BackendFlags(value: ImGuiBackendFlags) { this.native.BackendFlags = value; }\r\n    // ImVec2        DisplaySize;              // <unset>              // Display size, in pixels. For clamping windows positions.\r\n    get DisplaySize(): Bind.reference_ImVec2 { return this.native.DisplaySize; }\r\n    // float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.\r\n    get DeltaTime(): number { return this.native.DeltaTime; }\r\n    set DeltaTime(value: number) { this.native.DeltaTime = value; }\r\n    // float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.\r\n    get IniSavingRate(): number { return this.native.IniSavingRate; }\r\n    set IniSavingRate(value: number) { this.native.IniSavingRate = value; }\r\n    // const char*   IniFilename;              // = \"imgui.ini\"        // Path to .ini file. NULL to disable .ini saving.\r\n    get IniFilename(): string { return this.native.IniFilename; }\r\n    set IniFilename(value: string) { this.native.IniFilename = value; }\r\n    // const char*   LogFilename;              // = \"imgui_log.txt\"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).\r\n    get LogFilename(): string { return this.native.LogFilename; }\r\n    set LogFilename(value: string) { this.native.LogFilename = value; }\r\n    // float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.\r\n    get MouseDoubleClickTime(): number { return this.native.MouseDoubleClickTime; }\r\n    set MouseDoubleClickTime(value: number) { this.native.MouseDoubleClickTime = value; }\r\n    // float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.\r\n    get MouseDoubleClickMaxDist(): number { return this.native.MouseDoubleClickMaxDist; }\r\n    set MouseDoubleClickMaxDist(value: number) { this.native.MouseDoubleClickMaxDist = value; }\r\n    // float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging\r\n    get MouseDragThreshold(): number { return this.native.MouseDragThreshold; }\r\n    set MouseDragThreshold(value: number) { this.native.MouseDragThreshold = value; }\r\n    // int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array\r\n    public KeyMap: number[] = new Proxy([], {\r\n        get: (target: number[], key: PropertyKey): number => {\r\n            if (key === \"length\") { return ImGuiKey.COUNT; }\r\n            return this.native._getAt_KeyMap(Number(key));\r\n        },\r\n        set: (target: number[], key: PropertyKey, value: number): boolean => {\r\n            return this.native._setAt_KeyMap(Number(key), value);\r\n        },\r\n    });\r\n    // float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).\r\n    get KeyRepeatDelay(): number { return this.native.KeyRepeatDelay; }\r\n    set KeyRepeatDelay(value: number) { this.native.KeyRepeatDelay = value; }\r\n    // float         KeyRepeatRate;            // = 0.050f             // When holding a key/button, rate at which it repeats, in seconds.\r\n    get KeyRepeatRate(): number { return this.native.KeyRepeatRate; }\r\n    set KeyRepeatRate(value: number) { this.native.KeyRepeatRate = value; }\r\n    // void*         UserData;                 // = NULL               // Store your own data for retrieval by callbacks.\r\n    get UserData(): any { return this.native.UserData; }\r\n    set UserData(value: any) { this.native.UserData = value; }\r\n\r\n    // ImFontAtlas*  Fonts;                    // <auto>               // Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.\r\n    get Fonts(): ImFontAtlas { return new ImFontAtlas(this.native.Fonts); }\r\n    // float         FontGlobalScale;          // = 1.0f               // Global scale all fonts\r\n    get FontGlobalScale(): number { return this.native.FontGlobalScale; }\r\n    set FontGlobalScale(value: number) { this.native.FontGlobalScale = value; }\r\n    // bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.\r\n    get FontAllowUserScaling(): boolean { return this.native.FontAllowUserScaling; }\r\n    set FontAllowUserScaling(value: boolean) { this.native.FontAllowUserScaling = value; }\r\n    // ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].\r\n    get FontDefault(): ImFont | null {\r\n        const font: Bind.reference_ImFont | null = this.native.FontDefault;\r\n        return (font === null) ? null : new ImFont(font);\r\n    }\r\n    set FontDefault(value: ImFont | null) {\r\n        this.native.FontDefault = value && value.native;\r\n    }\r\n    // ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.\r\n    get DisplayFramebufferScale(): Bind.reference_ImVec2 { return this.native.DisplayFramebufferScale; }\r\n\r\n    // Miscellaneous configuration options\r\n    // bool          OptMacOSXBehaviors;       // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl\r\n    get ConfigMacOSXBehaviors(): boolean { return this.native.ConfigMacOSXBehaviors; }\r\n    set ConfigMacOSXBehaviors(value: boolean) { this.native.ConfigMacOSXBehaviors = value; }\r\n    // bool          ConfigInputTextCursorBlink;   // = true               // Enable blinking cursor, for users who consider it annoying.\r\n    get ConfigInputTextCursorBlink(): boolean { return this.native.ConfigInputTextCursorBlink; }\r\n    set ConfigInputTextCursorBlink(value: boolean) { this.native.ConfigInputTextCursorBlink = value; }\r\n    // bool          ConfigWindowsResizeFromEdges; // = false          // [BETA] Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the ImGuiWindowFlags_ResizeFromAnySide flag)\r\n    get ConfigWindowsResizeFromEdges(): boolean { return this.native.ConfigWindowsResizeFromEdges; }\r\n    set ConfigWindowsResizeFromEdges(value: boolean) { this.native.ConfigWindowsResizeFromEdges = value; }\r\n    // bool        ConfigWindowsMoveFromTitleBarOnly;// = false        // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.\r\n    get ConfigWindowsMoveFromTitleBarOnly(): boolean { return this.native.ConfigWindowsMoveFromTitleBarOnly; }\r\n    set ConfigWindowsMoveFromTitleBarOnly(value: boolean) { this.native.ConfigWindowsMoveFromTitleBarOnly = value; }\r\n\r\n    //------------------------------------------------------------------\r\n    // Settings (User Functions)\r\n    //------------------------------------------------------------------\r\n\r\n    // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.\r\n    // const char* BackendPlatformName;            // = NULL\r\n    get BackendPlatformName(): string | null { return this.native.BackendPlatformName; }\r\n    set BackendPlatformName(value: string | null) { this.native.BackendPlatformName = value; }\r\n    // const char* BackendRendererName;            // = NULL\r\n    get BackendRendererName(): string | null { return this.native.BackendRendererName; }\r\n    set BackendRendererName(value: string | null) { this.native.BackendRendererName = value; }\r\n    // void*       BackendPlatformUserData;        // = NULL\r\n    get BackendPlatformUserData(): string | null { return this.native.BackendPlatformUserData; }\r\n    set BackendPlatformUserData(value: string | null) { this.native.BackendPlatformUserData = value; }\r\n    // void*       BackendRendererUserData;        // = NULL\r\n    get BackendRendererUserData(): string | null { return this.native.BackendRendererUserData; }\r\n    set BackendRendererUserData(value: string | null) { this.native.BackendRendererUserData = value; }\r\n    // void*       BackendLanguageUserData;        // = NULL\r\n    get BackendLanguageUserData(): string | null { return this.native.BackendLanguageUserData; }\r\n    set BackendLanguageUserData(value: string | null) { this.native.BackendLanguageUserData = value; }\r\n\r\n    // Optional: access OS clipboard\r\n    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)\r\n    // const char* (*GetClipboardTextFn)(void* user_data);\r\n    get GetClipboardTextFn(): ((user_data: any) => string) | null { return this.native.GetClipboardTextFn; }\r\n    set GetClipboardTextFn(value: ((user_data: any) => string) | null) { this.native.GetClipboardTextFn = value; }\r\n    // void        (*SetClipboardTextFn)(void* user_data, const char* text);\r\n    get SetClipboardTextFn(): ((user_data: any, text: string) => void) | null { return this.native.SetClipboardTextFn; }\r\n    set SetClipboardTextFn(value: ((user_data: any, text: string) => void) | null) { this.native.SetClipboardTextFn = value; }\r\n    // void*       ClipboardUserData;\r\n    get ClipboardUserData(): any { return this.native.ClipboardUserData; }\r\n    set ClipboardUserData(value: any) { this.native.ClipboardUserData = value; }\r\n\r\n    // Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.\r\n    // (default to posix malloc/free)\r\n    // void*       (*MemAllocFn)(size_t sz);\r\n    // void        (*MemFreeFn)(void* ptr);\r\n\r\n    // Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)\r\n    // (default to use native imm32 api on Windows)\r\n    // void        (*ImeSetInputScreenPosFn)(int x, int y);\r\n    // void*       ImeWindowHandle;            // (Windows) Set this to your HWND to get automatic IME cursor positioning.\r\n\r\n    //------------------------------------------------------------------\r\n    // Input - Fill before calling NewFrame()\r\n    //------------------------------------------------------------------\r\n\r\n    // ImVec2      MousePos;                   // Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)\r\n    get MousePos(): Bind.reference_ImVec2 { return this.native.MousePos; }\r\n    // bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.\r\n    public MouseDown: boolean[] = new Proxy([], {\r\n        get: (target: boolean[], key: PropertyKey): number | boolean => {\r\n            if (key === \"length\") { return 5; }\r\n            return this.native._getAt_MouseDown(Number(key));\r\n        },\r\n        set: (target: boolean[], key: PropertyKey, value: boolean): boolean => {\r\n            return this.native._setAt_MouseDown(Number(key), value);\r\n        },\r\n    });\r\n    // float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.\r\n    public get MouseWheel(): number { return this.native.MouseWheel; }\r\n    public set MouseWheel(value: number) { this.native.MouseWheel = value; }\r\n    // float       MouseWheelH;                    // Mouse wheel (Horizontal). Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.\r\n    public get MouseWheelH(): number { return this.native.MouseWheelH; }\r\n    public set MouseWheelH(value: number) { this.native.MouseWheelH = value; }\r\n    // bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).\r\n    get MouseDrawCursor(): boolean { return this.native.MouseDrawCursor; } set MouseDrawCursor(value: boolean) { this.native.MouseDrawCursor = value; }\r\n    // bool        KeyCtrl;                    // Keyboard modifier pressed: Control\r\n    get KeyCtrl(): boolean { return this.native.KeyCtrl; } set KeyCtrl(value: boolean) { this.native.KeyCtrl = value; }\r\n    // bool        KeyShift;                   // Keyboard modifier pressed: Shift\r\n    get KeyShift(): boolean { return this.native.KeyShift; } set KeyShift(value: boolean) { this.native.KeyShift = value; }\r\n    // bool        KeyAlt;                     // Keyboard modifier pressed: Alt\r\n    get KeyAlt(): boolean { return this.native.KeyAlt; } set KeyAlt(value: boolean) { this.native.KeyAlt = value; }\r\n    // bool        KeySuper;                   // Keyboard modifier pressed: Cmd/Super/Windows\r\n    get KeySuper(): boolean { return this.native.KeySuper; } set KeySuper(value: boolean) { this.native.KeySuper = value; }\r\n    // bool        KeysDown[512];              // Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)\r\n    public KeysDown: boolean[] = new Proxy([], {\r\n        get: (target: boolean[], key: PropertyKey): number | boolean => {\r\n            if (key === \"length\") { return 512; }\r\n            return this.native._getAt_KeysDown(Number(key));\r\n        },\r\n        set: (target: boolean[], key: PropertyKey, value: boolean): boolean => {\r\n            return this.native._setAt_KeysDown(Number(key), value);\r\n        },\r\n    });\r\n    // float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame)\r\n    public NavInputs: number[] = new Proxy([], {\r\n        get: (target: number[], key: PropertyKey): number => {\r\n            if (key === \"length\") { return ImGuiNavInput.COUNT; }\r\n            return this.native._getAt_NavInputs(Number(key));\r\n        },\r\n        set: (target: number[], key: PropertyKey, value: number): boolean => {\r\n            return this.native._setAt_NavInputs(Number(key), value);\r\n        },\r\n    });\r\n\r\n    // Functions\r\n    // IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]\r\n    public AddInputCharacter(c: number): void { this.native.AddInputCharacter(c); }\r\n    // IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string\r\n    public AddInputCharactersUTF8(utf8_chars: string): void { this.native.AddInputCharactersUTF8(utf8_chars); }\r\n    // inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually\r\n    public ClearInputCharacters(): void { this.native.ClearInputCharacters(); }\r\n\r\n    //------------------------------------------------------------------\r\n    // Output - Retrieve after calling NewFrame()\r\n    //------------------------------------------------------------------\r\n\r\n    // bool        WantCaptureMouse;           // When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application. This is set by ImGui when it wants to use your mouse (e.g. unclicked mouse is hovering a window, or a widget is active).\r\n    get WantCaptureMouse(): boolean { return this.native.WantCaptureMouse; } set WantCaptureMouse(value: boolean) { this.native.WantCaptureMouse = value; }\r\n    // bool        WantCaptureKeyboard;        // When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application. This is set by ImGui when it wants to use your keyboard inputs.\r\n    get WantCaptureKeyboard(): boolean { return this.native.WantCaptureKeyboard; } set WantCaptureKeyboard(value: boolean) { this.native.WantCaptureKeyboard = value; }\r\n    // bool        WantTextInput;              // Mobile/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).\r\n    get WantTextInput(): boolean { return this.native.WantTextInput; } set WantTextInput(value: boolean) { this.native.WantTextInput = value; }\r\n    // bool        WantSetMousePos;              // [BETA-NAV] MousePos has been altered, back-end should reposition mouse on next frame. Set only when 'NavMovesMouse=true'.\r\n    get WantSetMousePos(): boolean { return this.native.WantSetMousePos; } set WantSetMousePos(value: boolean) { this.native.WantSetMousePos = value; }\r\n    // bool        WantSaveIniSettings;        // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.\r\n    get WantSaveIniSettings(): boolean { return this.native.WantSaveIniSettings; } set WantSaveIniSettings(value: boolean) { this.native.WantSaveIniSettings = value; }\r\n    // bool        NavActive;                  // Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.\r\n    get NavActive(): boolean { return this.native.NavActive; } set NavActive(value: boolean) { this.native.NavActive = value; }\r\n    // bool        NavVisible;                 // Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).\r\n    get NavVisible(): boolean { return this.native.NavVisible; } set NavVisible(value: boolean) { this.native.NavVisible = value; }\r\n    // float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames\r\n    get Framerate(): number { return this.native.Framerate; }\r\n    // int         MetricsRenderVertices;      // Vertices output during last call to Render()\r\n    get MetricsRenderVertices(): number { return this.native.MetricsRenderVertices; }\r\n    // int         MetricsRenderIndices;       // Indices output during last call to Render() = number of triangles * 3\r\n    get MetricsRenderIndices(): number { return this.native.MetricsRenderIndices; }\r\n    // int         MetricsRenderWindows;       // Number of visible windows\r\n    get MetricsRenderWindows(): number { return this.native.MetricsRenderWindows; }\r\n    // int         MetricsActiveWindows;       // Number of visible root windows (exclude child windows)\r\n    get MetricsActiveWindows(): number { return this.native.MetricsActiveWindows; }\r\n    // int         MetricsActiveAllocations;   // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.\r\n    get MetricsActiveAllocations(): number { return this.native.MetricsActiveAllocations; }\r\n    // ImVec2      MouseDelta;                 // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.\r\n    get MouseDelta(): Readonly<Bind.reference_ImVec2> { return this.native.MouseDelta; }\r\n\r\n    //------------------------------------------------------------------\r\n    // [Internal] ImGui will maintain those fields. Forward compatibility not guaranteed!\r\n    //------------------------------------------------------------------\r\n\r\n    // ImVec2      MousePosPrev;               // Previous mouse position temporary storage (nb: not for public use, set to MousePos in NewFrame())\r\n    // ImVec2      MouseClickedPos[5];         // Position at time of clicking\r\n    public MouseClickedPos: Array<Readonly<Bind.reference_ImVec2>> = new Proxy([], {\r\n        get: (target: Array<Readonly<Bind.reference_ImVec2>>, key: PropertyKey): number | Readonly<Bind.reference_ImVec2> => {\r\n            if (key === \"length\") { return 5; }\r\n            return this.native._getAt_MouseClickedPos(Number(key));\r\n        },\r\n    });\r\n    // float       MouseClickedTime[5];        // Time of last click (used to figure out double-click)\r\n    // bool        MouseClicked[5];            // Mouse button went from !Down to Down\r\n    // bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?\r\n    // bool        MouseReleased[5];           // Mouse button went from Down to !Down\r\n    // bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.\r\n    // float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)\r\n    public MouseDownDuration: number[] = new Proxy([], {\r\n        get: (target: number[], key: PropertyKey): number => {\r\n            if (key === \"length\") { return 5; }\r\n            return this.native._getAt_MouseDownDuration(Number(key));\r\n        },\r\n    });\r\n    // float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down\r\n    // ImVec2      MouseDragMaxDistanceAbs[5]; // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point\r\n    // float       MouseDragMaxDistanceSqr[5]; // Squared maximum distance of how much mouse has traveled from the clicking point\r\n    // float       KeysDownDuration[512];      // Duration the keyboard key has been down (0.0f == just pressed)\r\n    public KeysDownDuration: number[] = new Proxy([], {\r\n        get: (target: number[], key: PropertyKey): number => {\r\n            if (key === \"length\") { return 512; }\r\n            return this.native._getAt_KeysDownDuration(Number(key));\r\n        },\r\n    });\r\n    // float       KeysDownDurationPrev[512];  // Previous duration the key has been down\r\n    // float       NavInputsDownDuration[ImGuiNavInput_COUNT];\r\n    public NavInputsDownDuration: number[] = new Proxy([], {\r\n        get: (target: number[], key: PropertyKey): number => {\r\n            if (key === \"length\") { return ImGuiNavInput.COUNT; }\r\n            return this.native._getAt_NavInputsDownDuration(Number(key));\r\n        },\r\n    });\r\n    // float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];\r\n\r\n    // IMGUI_API   ImGuiIO();\r\n}\r\n\r\n// Context creation and access, if you want to use multiple context, share context between modules (e.g. DLL).\r\n// All contexts share a same ImFontAtlas by default. If you want different font atlas, you can new() them and overwrite the GetIO().Fonts variable of an ImGui context.\r\n// All those functions are not reliant on the current context.\r\nexport class ImGuiContext {\r\n    public static current_ctx: ImGuiContext | null = null;\r\n    public static getTexture(index: number): ImTextureID | null {\r\n        if (ImGuiContext.current_ctx === null) { throw new Error(); }\r\n        return ImGuiContext.current_ctx._getTexture(index);\r\n    }\r\n    public static setTexture(texture: ImTextureID | null): number {\r\n        if (ImGuiContext.current_ctx === null) { throw new Error(); }\r\n        return ImGuiContext.current_ctx._setTexture(texture);\r\n    }\r\n\r\n    private textures: Array<ImTextureID | null> = [];\r\n    constructor(public readonly native: Bind.WrapImGuiContext) {}\r\n    private _getTexture(index: number): ImTextureID | null {\r\n        return this.textures[index] || null;\r\n    }\r\n    private _setTexture(texture: ImTextureID | null): number {\r\n        let index = this.textures.indexOf(texture);\r\n        if (index === -1) {\r\n            for (let i = 0; i < this.textures.length; ++i) {\r\n                if (this.textures[i] === null) {\r\n                    this.textures[i] = texture;\r\n                    return i;\r\n                }\r\n            }\r\n            index = this.textures.length;\r\n            this.textures.push(texture);\r\n        }\r\n        return index;\r\n    }\r\n}\r\n// IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);\r\nexport function CreateContext(shared_font_atlas: ImFontAtlas | null = null): ImGuiContext | null {\r\n    const ctx: ImGuiContext = new ImGuiContext(bind.CreateContext());\r\n    if (ImGuiContext.current_ctx === null) {\r\n        ImGuiContext.current_ctx = ctx;\r\n    }\r\n    return ctx;\r\n}\r\n// IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = Destroy current context\r\nexport function DestroyContext(ctx: ImGuiContext | null = null): void {\r\n    if (ctx === null) {\r\n        ctx = ImGuiContext.current_ctx;\r\n        ImGuiContext.current_ctx = null;\r\n    }\r\n    bind.DestroyContext((ctx === null) ? null : ctx.native);\r\n}\r\n// IMGUI_API ImGuiContext* GetCurrentContext();\r\nexport function GetCurrentContext(): ImGuiContext | null {\r\n    // const ctx_native: BindImGui.ImGuiContext | null = bind.GetCurrentContext();\r\n    return ImGuiContext.current_ctx;\r\n}\r\n// IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);\r\nexport function SetCurrentContext(ctx: ImGuiContext | null): void {\r\n    bind.SetCurrentContext((ctx === null) ? null : ctx.native);\r\n    ImGuiContext.current_ctx = ctx;\r\n}\r\n\r\n// IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert);\r\nexport function DebugCheckVersionAndDataLayout(version_str: string, sz_io: number, sz_style: number, sz_vec2: number, sz_vec4: number, sz_draw_vert: number, sz_draw_idx: number): boolean {\r\n    return bind.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx);\r\n}\r\n\r\n// Main\r\n// IMGUI_API ImGuiIO&      GetIO();\r\nexport function GetIO(): ImGuiIO { return new ImGuiIO(bind.GetIO()); }\r\n// IMGUI_API ImGuiStyle&   GetStyle();\r\nexport function GetStyle(): ImGuiStyle { return new ImGuiStyle(bind.GetStyle()); }\r\n// IMGUI_API void          NewFrame();                                 // start a new ImGui frame, you can submit any command from this point until Render()/EndFrame().\r\nexport function NewFrame(): void { bind.NewFrame(); }\r\n// IMGUI_API void          EndFrame();                                 // ends the ImGui frame. automatically called by Render(), so most likely don't need to ever call that yourself directly. If you don't need to render you may call EndFrame() but you'll have wasted CPU already. If you don't need to render, better to not create any imgui windows instead!\r\nexport function EndFrame(): void { bind.EndFrame(); }\r\n// IMGUI_API void          Render();                                   // ends the ImGui frame, finalize the draw data, then call your io.RenderDrawListsFn() function if set.\r\nexport function Render(): void { bind.Render(); }\r\n// IMGUI_API ImDrawData*   GetDrawData();                              // same value as passed to your io.RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()\r\nexport function GetDrawData(): ImDrawData | null {\r\n    const draw_data: Bind.reference_ImDrawData | null = bind.GetDrawData();\r\n    return (draw_data === null) ? null : new ImDrawData(draw_data);\r\n}\r\n\r\n// Demo, Debug, Informations\r\n// IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create demo/test window (previously called ShowTestWindow). demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!\r\nexport function ShowDemoWindow(p_open: Bind.ImScalar<boolean> | null = null): void { bind.ShowDemoWindow(p_open); }\r\n// IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create about window. display Dear ImGui version, credits and build/system information.\r\nexport function ShowAboutWindow(p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null): void {\r\n    if (p_open === null) {\r\n        bind.ShowAboutWindow(null);\r\n    } else if (Array.isArray(p_open)) {\r\n        bind.ShowAboutWindow(p_open);\r\n    } else {\r\n        const ref_open: Bind.ImScalar<boolean> = [ p_open() ];\r\n        bind.ShowAboutWindow(ref_open);\r\n        p_open(ref_open[0]);\r\n    }\r\n}\r\n// IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create metrics window. display ImGui internals: draw commands (with individual draw calls and vertices), window list, basic internal state, etc.\r\nexport function ShowMetricsWindow(p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null): void {\r\n    if (p_open === null) {\r\n        bind.ShowMetricsWindow(null);\r\n    } else if (Array.isArray(p_open)) {\r\n        bind.ShowMetricsWindow(p_open);\r\n    } else {\r\n        const ref_open: Bind.ImScalar<boolean> = [ p_open() ];\r\n        bind.ShowMetricsWindow(ref_open);\r\n        p_open(ref_open[0]);\r\n    }\r\n}\r\n// IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)\r\nexport function ShowStyleEditor(ref: ImGuiStyle | null = null): void {\r\n    if (ref === null) {\r\n        bind.ShowStyleEditor(null);\r\n    } else if (ref.internal instanceof bind.ImGuiStyle) {\r\n        bind.ShowStyleEditor(ref.internal);\r\n    } else {\r\n        const native = new bind.ImGuiStyle();\r\n        const wrap = new ImGuiStyle(native);\r\n        wrap.Copy(ref);\r\n        bind.ShowStyleEditor(native);\r\n        ref.Copy(wrap);\r\n        native.delete();\r\n    }\r\n}\r\n// IMGUI_API bool          ShowStyleSelector(const char* label);\r\nexport function ShowStyleSelector(label: string): boolean { return bind.ShowStyleSelector(label); }\r\n// IMGUI_API void          ShowFontSelector(const char* label);\r\nexport function ShowFontSelector(label: string): void { bind.ShowFontSelector(label); }\r\n// IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).\r\nexport function ShowUserGuide(): void { bind.ShowUserGuide(); }\r\n// IMGUI_API const char*   GetVersion();\r\nexport function GetVersion(): string { return bind.GetVersion(); }\r\n\r\n// Styles\r\n// IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL);\r\nexport function StyleColorsClassic(dst: ImGuiStyle | null = null): void {\r\n    if (dst === null) {\r\n        bind.StyleColorsClassic(null);\r\n    } else if (dst.internal instanceof bind.ImGuiStyle) {\r\n        bind.StyleColorsClassic(dst.internal);\r\n    } else {\r\n        const native = new bind.ImGuiStyle();\r\n        const wrap = new ImGuiStyle(native);\r\n        wrap.Copy(dst);\r\n        bind.StyleColorsClassic(native);\r\n        dst.Copy(wrap);\r\n        native.delete();\r\n    }\r\n}\r\n// IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);\r\nexport function StyleColorsDark(dst: ImGuiStyle | null = null): void {\r\n    if (dst === null) {\r\n        bind.StyleColorsDark(null);\r\n    } else if (dst.internal instanceof bind.ImGuiStyle) {\r\n        bind.StyleColorsDark(dst.internal);\r\n    } else {\r\n        const native = new bind.ImGuiStyle();\r\n        const wrap = new ImGuiStyle(native);\r\n        wrap.Copy(dst);\r\n        bind.StyleColorsDark(native);\r\n        dst.Copy(wrap);\r\n        native.delete();\r\n    }\r\n}\r\n// IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);\r\nexport function StyleColorsLight(dst: ImGuiStyle | null = null): void {\r\n    if (dst === null) {\r\n        bind.StyleColorsLight(null);\r\n    } else if (dst.internal instanceof bind.ImGuiStyle) {\r\n        bind.StyleColorsLight(dst.internal);\r\n    } else {\r\n        const native = new bind.ImGuiStyle();\r\n        const wrap = new ImGuiStyle(native);\r\n        wrap.Copy(dst);\r\n        bind.StyleColorsLight(native);\r\n        dst.Copy(wrap);\r\n        native.delete();\r\n    }\r\n}\r\n\r\n// Window\r\n// IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);                                                   // push window to the stack and start appending to it. see .cpp for details. return false when window is collapsed, so you can early out in your code. 'bool* p_open' creates a widget on the upper-right to close the window (which sets your bool to false).\r\nexport function Begin(name: string, open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null, flags: ImGuiWindowFlags = 0): boolean {\r\n    if (open === null) {\r\n        return bind.Begin(name, null, flags);\r\n    } else if (Array.isArray(open)) {\r\n        return bind.Begin(name, open, flags);\r\n    } else {\r\n        const ref_open: Bind.ImScalar<boolean> = [ open() ];\r\n        const opened: boolean = bind.Begin(name, ref_open, flags);\r\n        open(ref_open[0]);\r\n        return opened;\r\n    }\r\n}\r\n// IMGUI_API void          End();                                                                                                                      // finish appending to current window, pop it off the window stack.\r\nexport function End(): void { bind.End(); }\r\n// IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags extra_flags = 0);    // begin a scrolling region. size==0.0f: use remaining window size, size<0.0f: use remaining window size minus abs(size). size>0.0f: fixed size. each axis can use a different mode, e.g. ImVec2(0,400).\r\n// IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags extra_flags = 0);            // \"\r\nexport function BeginChild(id: string | Bind.ImGuiID, size: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, border: boolean = false, extra_flags: ImGuiWindowFlags = 0): boolean {\r\n    return bind.BeginChild(id, size, border, extra_flags);\r\n}\r\n// IMGUI_API void          EndChild();\r\nexport function EndChild(): void { bind.EndChild(); }\r\n// IMGUI_API ImVec2        GetContentRegionMax();                                              // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates\r\nexport function GetContentRegionMax(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetContentRegionMax(out);\r\n}\r\n// IMGUI_API ImVec2        GetContentRegionAvail();                                            // == GetContentRegionMax() - GetCursorPos()\r\nexport function GetContentRegionAvail(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetContentRegionAvail(out);\r\n}\r\n// IMGUI_API ImVec2        GetWindowContentRegionMin();                                        // content boundaries min (roughly (0,0)-Scroll), in window coordinates\r\nexport function GetWindowContentRegionMin(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetWindowContentRegionMin(out);\r\n}\r\n// IMGUI_API ImVec2        GetWindowContentRegionMax();                                        // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates\r\nexport function GetWindowContentRegionMax(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetWindowContentRegionMax(out);\r\n}\r\n// IMGUI_API float         GetWindowContentRegionWidth();                                      //\r\nexport function GetWindowContentRegionWidth(): number { return bind.GetWindowContentRegionWidth(); }\r\n// IMGUI_API ImDrawList*   GetWindowDrawList();                                                // get rendering command-list if you want to append your own draw primitives\r\nexport function GetWindowDrawList(): ImDrawList {\r\n    return new ImDrawList(bind.GetWindowDrawList());\r\n}\r\n// IMGUI_API ImVec2        GetWindowPos();                                                     // get current window position in screen space (useful if you want to do your own drawing via the DrawList api)\r\nexport function GetWindowPos(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetWindowPos(out);\r\n}\r\n// IMGUI_API ImVec2        GetWindowSize();                                                    // get current window size\r\nexport function GetWindowSize(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetWindowSize(out);\r\n}\r\n// IMGUI_API float         GetWindowWidth();\r\nexport function GetWindowWidth(): number { return bind.GetWindowWidth(); }\r\n// IMGUI_API float         GetWindowHeight();\r\nexport function GetWindowHeight(): number { return bind.GetWindowHeight(); }\r\n// IMGUI_API bool          IsWindowCollapsed();\r\nexport function IsWindowCollapsed(): boolean { return bind.IsWindowCollapsed(); }\r\n// IMGUI_API bool          IsWindowAppearing();\r\nexport function IsWindowAppearing(): boolean { return bind.IsWindowAppearing(); }\r\n// IMGUI_API void          SetWindowFontScale(float scale);                                    // per-window font scale. Adjust IO.FontGlobalScale if you want to scale all windows\r\nexport function SetWindowFontScale(scale: number): void { bind.SetWindowFontScale(scale); }\r\n\r\n// IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0,0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.\r\nexport function SetNextWindowPos(pos: Readonly<Bind.interface_ImVec2>, cond: ImGuiCond = 0, pivot: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO): void {\r\n    bind.SetNextWindowPos(pos, cond, pivot);\r\n}\r\n// IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);          // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()\r\nexport function SetNextWindowSize(pos: Readonly<Bind.interface_ImVec2>, cond: ImGuiCond = 0): void {\r\n    bind.SetNextWindowSize(pos, cond);\r\n}\r\n// IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeConstraintCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Use callback to apply non-trivial programmatic constraints.\r\nexport function SetNextWindowSizeConstraints(size_min: Readonly<Bind.interface_ImVec2>, size_max: Readonly<Bind.interface_ImVec2>, custom_callback: ImGuiSizeConstraintCallback | null = null, custom_callback_data: any = null): void {\r\n    if (custom_callback) {\r\n        bind.SetNextWindowSizeConstraints(size_min, size_max, (data: Bind.reference_ImGuiSizeCallbackData): void => {\r\n            custom_callback(new ImGuiSizeCallbackData(data, custom_callback_data));\r\n        }, null);\r\n    } else {\r\n        bind.SetNextWindowSizeConstraints(size_min, size_max, null, null);\r\n    }\r\n}\r\n// IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                       // set next window content size (~ enforce the range of scrollbars). not including window decorations (title bar, menu bar, etc.). set an axis to 0.0f to leave it automatic. call before Begin()\r\nexport function SetNextWindowContentSize(size: Readonly<Bind.interface_ImVec2>): void {\r\n    bind.SetNextWindowContentSize(size);\r\n}\r\n// IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);         // set next window collapsed state. call before Begin()\r\nexport function SetNextWindowCollapsed(collapsed: boolean, cond: ImGuiCond = 0): void {\r\n    bind.SetNextWindowCollapsed(collapsed, cond);\r\n}\r\n// IMGUI_API void          SetNextWindowFocus();                                               // set next window to be focused / front-most. call before Begin()\r\nexport function SetNextWindowFocus(): void { bind.SetNextWindowFocus(); }\r\n// IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                  // set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.\r\nexport function SetNextWindowBgAlpha(alpha: number): void { bind.SetNextWindowBgAlpha(alpha); }\r\n// IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.\r\n// IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);              // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0,0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.\r\n// IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);             // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().\r\n// IMGUI_API void          SetWindowFocus();                                                   // (not recommended) set current window to be focused / front-most. prefer using SetNextWindowFocus().\r\n// IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.\r\n// IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.\r\n// IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state\r\n// IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / front-most. use NULL to remove focus.\r\nexport function SetWindowPos(name_or_pos: string | Readonly<Bind.interface_ImVec2>, pos_or_cond: Readonly<Bind.interface_ImVec2> | ImGuiCond = 0, cond: ImGuiCond = 0): void {\r\n    if (typeof(name_or_pos) === \"string\") {\r\n        bind.SetWindowNamePos(name_or_pos, pos_or_cond as Readonly<Bind.interface_ImVec2>, cond);\r\n        return;\r\n    } else {\r\n        bind.SetWindowPos(name_or_pos, pos_or_cond as ImGuiCond);\r\n    }\r\n}\r\nexport function SetWindowSize(name_or_size: string | Readonly<Bind.interface_ImVec2>, size_or_cond: Readonly<Bind.interface_ImVec2> | ImGuiCond = 0, cond: ImGuiCond = 0): void {\r\n    if (typeof(name_or_size) === \"string\") {\r\n        bind.SetWindowNamePos(name_or_size, size_or_cond as Readonly<Bind.interface_ImVec2>, cond);\r\n    } else {\r\n        bind.SetWindowSize(name_or_size, size_or_cond as ImGuiCond);\r\n    }\r\n}\r\nexport function SetWindowCollapsed(name_or_collapsed: string | boolean, collapsed_or_cond: boolean | ImGuiCond = 0, cond: ImGuiCond = 0): void {\r\n    if (typeof(name_or_collapsed) === \"string\") {\r\n        bind.SetWindowNameCollapsed(name_or_collapsed, collapsed_or_cond as boolean, cond);\r\n    } else {\r\n        bind.SetWindowCollapsed(name_or_collapsed, collapsed_or_cond as ImGuiCond);\r\n    }\r\n}\r\nexport function SetWindowFocus(name?: string): void {\r\n    if (typeof(name) === \"string\") {\r\n        bind.SetWindowNameFocus(name);\r\n    } else {\r\n        bind.SetWindowFocus();\r\n    }\r\n}\r\n\r\n// IMGUI_API float         GetScrollX();                                                       // get scrolling amount [0..GetScrollMaxX()]\r\nexport function GetScrollX(): number { return bind.GetScrollX(); }\r\n// IMGUI_API float         GetScrollY();                                                       // get scrolling amount [0..GetScrollMaxY()]\r\nexport function GetScrollY(): number { return bind.GetScrollY(); }\r\n// IMGUI_API float         GetScrollMaxX();                                                    // get maximum scrolling amount ~~ ContentSize.X - WindowSize.X\r\nexport function GetScrollMaxX(): number { return bind.GetScrollMaxX(); }\r\n// IMGUI_API float         GetScrollMaxY();                                                    // get maximum scrolling amount ~~ ContentSize.Y - WindowSize.Y\r\nexport function GetScrollMaxY(): number { return bind.GetScrollMaxY(); }\r\n// IMGUI_API void          SetScrollX(float scroll_x);                                         // set scrolling amount [0..GetScrollMaxX()]\r\nexport function SetScrollX(scroll_x: number): void { bind.SetScrollX(scroll_x); }\r\n// IMGUI_API void          SetScrollY(float scroll_y);                                         // set scrolling amount [0..GetScrollMaxY()]\r\nexport function SetScrollY(scroll_y: number): void { bind.SetScrollY(scroll_y); }\r\n// IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                         // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.\r\nexport function SetScrollHereY(center_y_ratio: number = 0.5): void {\r\n    bind.SetScrollHereY(center_y_ratio);\r\n}\r\n// IMGUI_API void          SetScrollFromPosY(float pos_y, float center_y_ratio = 0.5f);        // adjust scrolling amount to make given position valid. use GetCursorPos() or GetCursorStartPos()+offset to get valid positions.\r\nexport function SetScrollFromPosY(pos_y: number, center_y_ratio: number = 0.5): void {\r\n    bind.SetScrollFromPosY(pos_y, center_y_ratio);\r\n}\r\n// IMGUI_API void          SetStateStorage(ImGuiStorage* tree);                                // replace tree state storage with our own (if you want to manipulate it yourself, typically clear subsection of it)\r\n// IMGUI_API ImGuiStorage* GetStateStorage();\r\n\r\n// Parameters stacks (shared)\r\n// IMGUI_API void          PushFont(ImFont* font);                                             // use NULL as a shortcut to push default font\r\nexport function PushFont(font: ImFont | null): void { bind.PushFont(font ? font.native : null); }\r\n// IMGUI_API void          PopFont();\r\nexport function PopFont(): void { bind.PopFont(); }\r\n// IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);\r\n// IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);\r\nexport function PushStyleColor(idx: ImGuiCol, col: Bind.ImU32 | Readonly<Bind.interface_ImVec4> | Readonly<ImColor>): void {\r\n    if (col instanceof ImColor) {\r\n        bind.PushStyleColor(idx, col.Value);\r\n    } else {\r\n        bind.PushStyleColor(idx, col as (Bind.ImU32 | Readonly<Bind.interface_ImVec4>));\r\n    }\r\n}\r\n// IMGUI_API void          PopStyleColor(int count = 1);\r\nexport function PopStyleColor(count: number = 1): void {\r\n    bind.PopStyleColor(count);\r\n}\r\n// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);\r\n// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);\r\nexport function PushStyleVar(idx: ImGuiStyleVar, val: number | Readonly<Bind.interface_ImVec2>): void {\r\n    bind.PushStyleVar(idx, val);\r\n}\r\n// IMGUI_API void          PopStyleVar(int count = 1);\r\nexport function PopStyleVar(count: number = 1): void {\r\n    bind.PopStyleVar(count);\r\n}\r\n// IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                    // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwhise use GetColorU32() to get style color + style alpha.\r\nexport function GetStyleColorVec4(idx: ImGuiCol): Readonly<Bind.reference_ImVec4> {\r\n    return bind.GetStyleColorVec4(idx);\r\n}\r\n// IMGUI_API ImFont*       GetFont();                                                          // get current font\r\nexport function GetFont(): ImFont {\r\n    return new ImFont(bind.GetFont());\r\n}\r\n// IMGUI_API float         GetFontSize();                                                      // get current font size (= height in pixels) of current font with current scale applied\r\nexport function GetFontSize(): number { return bind.GetFontSize(); }\r\n// IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                           // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API\r\nexport function GetFontTexUvWhitePixel(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetFontTexUvWhitePixel(out);\r\n}\r\n// IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);                  // retrieve given style color with style alpha applied and optional extra alpha multiplier\r\n// IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                     // retrieve given color with style alpha applied\r\n// IMGUI_API ImU32         GetColorU32(ImU32 col);                                             // retrieve given color with style alpha applied\r\nexport function GetColorU32(idx: ImGuiCol, alpha_mul?: number): Bind.ImU32;\r\nexport function GetColorU32(col: Readonly<Bind.reference_ImVec4>): Bind.ImU32;\r\nexport function GetColorU32(col: Bind.ImU32): Bind.ImU32;\r\nexport function GetColorU32(...args: any[]): Bind.ImU32 {\r\n    if (args.length === 1) {\r\n        if (typeof(args[0]) === \"number\") {\r\n            // TODO: ImGuiCol or ImU32\r\n            const idx: ImGuiCol = args[0];\r\n            return bind.GetColorU32_A(idx, 1.0);\r\n        } else {\r\n            const col: Readonly<Bind.reference_ImVec4> = args[0];\r\n            return bind.GetColorU32_B(col);\r\n        }\r\n    } else {\r\n        const idx: ImGuiCol = args[0];\r\n        const alpha_mul: number = args[1];\r\n        return bind.GetColorU32_A(idx, alpha_mul);\r\n    }\r\n}\r\n\r\n// Parameters stacks (current window)\r\n// IMGUI_API void          PushItemWidth(float item_width);                                    // width of items for the common item+label case, pixels. 0.0f = default to ~2/3 of windows width, >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)\r\nexport function PushItemWidth(item_width: number): void { bind.PushItemWidth(item_width); }\r\n// IMGUI_API void          PopItemWidth();\r\nexport function PopItemWidth(): void { bind.PopItemWidth(); }\r\n// IMGUI_API float         CalcItemWidth();                                                    // width of item given pushed settings and current cursor position\r\nexport function SetNextItemWidth(item_width: number): void { bind.SetNextItemWidth(item_width); } // set width of the _next_ common large \"item+label\" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)\r\nexport function CalcItemWidth(): number { return bind.CalcItemWidth(); }\r\n// IMGUI_API void          PushTextWrapPos(float wrap_pos_x = 0.0f);                           // word-wrapping for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space\r\nexport function PushTextWrapPos(wrap_pos_x: number = 0.0): void {\r\n    bind.PushTextWrapPos(wrap_pos_x);\r\n}\r\n// IMGUI_API void          PopTextWrapPos();\r\nexport function PopTextWrapPos(): void { bind.PopTextWrapPos(); }\r\n// IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);                  // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets\r\nexport function PushAllowKeyboardFocus(allow_keyboard_focus: boolean): void { bind.PushAllowKeyboardFocus(allow_keyboard_focus); }\r\n// IMGUI_API void          PopAllowKeyboardFocus();\r\nexport function PopAllowKeyboardFocus(): void { bind.PopAllowKeyboardFocus(); }\r\n// IMGUI_API void          PushButtonRepeat(bool repeat);                                      // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.\r\nexport function PushButtonRepeat(repeat: boolean): void { bind.PushButtonRepeat(repeat); }\r\n// IMGUI_API void          PopButtonRepeat();\r\nexport function PopButtonRepeat(): void { bind.PopButtonRepeat(); }\r\n\r\n// Cursor / Layout\r\n// IMGUI_API void          Separator();                                                        // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.\r\nexport function Separator(): void { bind.Separator(); }\r\n// IMGUI_API void          SameLine(float pos_x = 0.0f, float spacing_w = -1.0f);              // call between widgets or groups to layout them horizontally\r\nexport function SameLine(pos_x: number = 0.0, spacing_w: number = -1.0): void {\r\n    bind.SameLine(pos_x, spacing_w);\r\n}\r\n// IMGUI_API void          NewLine();                                                          // undo a SameLine()\r\nexport function NewLine(): void { bind.NewLine(); }\r\n// IMGUI_API void          Spacing();                                                          // add vertical spacing\r\nexport function Spacing(): void { bind.Spacing(); }\r\n// IMGUI_API void          Dummy(const ImVec2& size);                                          // add a dummy item of given size\r\nexport function Dummy(size: Readonly<Bind.interface_ImVec2>): void { bind.Dummy(size); }\r\n// IMGUI_API void          Indent(float indent_w = 0.0f);                                      // move content position toward the right, by style.IndentSpacing or indent_w if != 0\r\nexport function Indent(indent_w: number = 0.0) { bind.Indent(indent_w); }\r\n// IMGUI_API void          Unindent(float indent_w = 0.0f);                                    // move content position back to the left, by style.IndentSpacing or indent_w if != 0\r\nexport function Unindent(indent_w: number = 0.0) { bind.Unindent(indent_w); }\r\n// IMGUI_API void          BeginGroup();                                                       // lock horizontal starting position + capture group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)\r\nexport function BeginGroup(): void { bind.BeginGroup(); }\r\n// IMGUI_API void          EndGroup();\r\nexport function EndGroup(): void { bind.EndGroup(); }\r\n// IMGUI_API ImVec2        GetCursorPos();                                                     // cursor position is relative to window position\r\nexport function GetCursorPos(out: Bind.interface_ImVec2 = new ImVec2()): typeof out { return bind.GetCursorPos(out); }\r\n// IMGUI_API float         GetCursorPosX();                                                    // \"\r\nexport function GetCursorPosX(): number { return bind.GetCursorPosX(); }\r\n// IMGUI_API float         GetCursorPosY();                                                    // \"\r\nexport function GetCursorPosY(): number { return bind.GetCursorPosY(); }\r\n// IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                              // \"\r\nexport function SetCursorPos(local_pos: Readonly<Bind.interface_ImVec2>): void { bind.SetCursorPos(local_pos); }\r\n// IMGUI_API void          SetCursorPosX(float x);                                             // \"\r\nexport function SetCursorPosX(x: number): void { bind.SetCursorPosX(x); }\r\n// IMGUI_API void          SetCursorPosY(float y);                                             // \"\r\nexport function SetCursorPosY(y: number): void { bind.SetCursorPosY(y); }\r\n// IMGUI_API ImVec2        GetCursorStartPos();                                                // initial cursor position\r\nexport function GetCursorStartPos(out: Bind.interface_ImVec2 = new ImVec2()): typeof out { return bind.GetCursorStartPos(out); }\r\n// IMGUI_API ImVec2        GetCursorScreenPos();                                               // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)\r\nexport function GetCursorScreenPos(out: Bind.interface_ImVec2 = new ImVec2()): typeof out { return bind.GetCursorScreenPos(out); }\r\n// IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                              // cursor position in absolute screen coordinates [0..io.DisplaySize]\r\nexport function SetCursorScreenPos(pos: Readonly<Bind.interface_ImVec2>): void { bind.SetCursorScreenPos(pos); }\r\n// IMGUI_API void          AlignTextToFramePadding();                                          // vertically align/lower upcoming text to FramePadding.y so that it will aligns to upcoming widgets (call if you have text on a line before regular widgets)\r\nexport function AlignTextToFramePadding(): void { bind.AlignTextToFramePadding(); }\r\n// IMGUI_API float         GetTextLineHeight();                                                // ~ FontSize\r\nexport function GetTextLineHeight(): number { return bind.GetTextLineHeight(); }\r\n// IMGUI_API float         GetTextLineHeightWithSpacing();                                     // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)\r\nexport function GetTextLineHeightWithSpacing(): number { return bind.GetTextLineHeightWithSpacing(); }\r\n// IMGUI_API float         GetFrameHeight();                                                   // ~ FontSize + style.FramePadding.y * 2\r\nexport function GetFrameHeight(): number { return bind.GetFrameHeight(); }\r\n// IMGUI_API float         GetFrameHeightWithSpacing();                                        // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)\r\nexport function GetFrameHeightWithSpacing(): number { return bind.GetFrameHeightWithSpacing(); }\r\n\r\n// Columns\r\n// You can also use SameLine(pos_x) for simplified columns. The columns API is still work-in-progress and rather lacking.\r\n// IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);\r\nexport function Columns(count: number = 1, id: string | null = null, border: boolean = true): void {\r\n    id = id || \"\";\r\n    bind.Columns(count, id, border);\r\n}\r\n// IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished\r\nexport function NextColumn(): void { bind.NextColumn(); }\r\n// IMGUI_API int           GetColumnIndex();                                                   // get current column index\r\nexport function GetColumnIndex(): number { return bind.GetColumnIndex(); }\r\n// IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column\r\nexport function GetColumnWidth(column_index: number = -1): number {\r\n    return bind.GetColumnWidth(column_index);\r\n}\r\n// IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column\r\nexport function SetColumnWidth(column_index: number, width: number): void { bind.SetColumnWidth(column_index, width); }\r\n// IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f\r\nexport function GetColumnOffset(column_index: number = -1): number {\r\n    return bind.GetColumnOffset(column_index);\r\n}\r\n// IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column\r\nexport function SetColumnOffset(column_index: number, offset_x: number): void { bind.SetColumnOffset(column_index, offset_x); }\r\n// IMGUI_API int           GetColumnsCount();\r\nexport function GetColumnsCount(): number { return bind.GetColumnsCount(); }\r\n\r\n// ID scopes\r\n// If you are creating widgets in a loop you most likely want to push a unique identifier (e.g. object pointer, loop index) so ImGui can differentiate them.\r\n// You can also use the \"##foobar\" syntax within widget label to distinguish them from each others. Read \"A primer on the use of labels/IDs\" in the FAQ for more details.\r\n// IMGUI_API void          PushID(const char* str_id);                                         // push identifier into the ID stack. IDs are hash of the entire stack!\r\n// IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);\r\n// IMGUI_API void          PushID(const void* ptr_id);\r\n// IMGUI_API void          PushID(int int_id);\r\nexport function PushID(id: string | number): void { bind.PushID(id); }\r\n// IMGUI_API void          PopID();\r\nexport function PopID(): void { bind.PopID(); }\r\n// IMGUI_API ImGuiID       GetID(const char* str_id);                                          // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself\r\n// IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);\r\n// IMGUI_API ImGuiID       GetID(const void* ptr_id);\r\nexport function GetID(id: string | number): Bind.ImGuiID { return bind.GetID(id); }\r\n\r\n// Widgets: Text\r\n// IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL);               // raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.\r\nexport function TextUnformatted(text: string, text_end: number | null = null): void { bind.TextUnformatted(text_end !== null ? text.substring(0, text_end) : text); }\r\n// IMGUI_API void          Text(const char* fmt, ...)                                     IM_FMTARGS(1); // simple formatted text\r\n// IMGUI_API void          TextV(const char* fmt, va_list args)                           IM_FMTLIST(1);\r\nexport function Text(fmt: string/*, ...args: any[]*/): void { bind.Text(fmt/*, ...args*/); }\r\n// IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)           IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();\r\n// IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args) IM_FMTLIST(2);\r\nexport function TextColored(col: Readonly<Bind.interface_ImVec4> | Readonly<ImColor>, fmt: string/*, ...args: any[]*/): void {\r\n    bind.TextColored((col instanceof ImColor) ? col.Value : col as Readonly<Bind.interface_ImVec4>, fmt/*, ...args*/);\r\n}\r\n// IMGUI_API void          TextDisabled(const char* fmt, ...)                             IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();\r\n// IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                   IM_FMTLIST(1);\r\nexport function TextDisabled(fmt: string/*, ...args: any[]*/): void { bind.TextDisabled(fmt/*, ...args*/); }\r\n// IMGUI_API void          TextWrapped(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().\r\n// IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                    IM_FMTLIST(1);\r\nexport function TextWrapped(fmt: string/*, ...args: any[]*/): void { bind.TextWrapped(fmt/*, ...args*/); }\r\n// IMGUI_API void          LabelText(const char* label, const char* fmt, ...)             IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets\r\n// IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)   IM_FMTLIST(2);\r\nexport function LabelText(label: string, fmt: string/*, ...args: any[]*/): void { bind.LabelText(label, fmt/*, ...args*/); }\r\n// IMGUI_API void          BulletText(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for Bullet()+Text()\r\n// IMGUI_API void          BulletTextV(const char* fmt, va_list args)                     IM_FMTLIST(1);\r\nexport function BulletText(fmt: string/*, ...args: any[]*/): void { bind.BulletText(fmt/*, ...args*/); }\r\n// IMGUI_API void          Bullet();                                                                     // draw a small circle and keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses\r\nexport function Bullet(): void { bind.Bullet(); }\r\n\r\n// Widgets: Main\r\n// IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0,0));            // button\r\nexport function Button(label: string, size: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO): boolean {\r\n    return bind.Button(label, size);\r\n}\r\n// IMGUI_API bool          SmallButton(const char* label);                                         // button with FramePadding=(0,0) to easily embed within text\r\nexport function SmallButton(label: string): boolean { return bind.SmallButton(label); }\r\n// IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape\r\nexport function ArrowButton(str_id: string, dir: ImGuiDir): boolean { return bind.ArrowButton(str_id, dir); }\r\n// IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size);                // button behavior without the visuals, useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)\r\nexport function InvisibleButton(str_id: string, size: Readonly<Bind.interface_ImVec2>): boolean {\r\n    return bind.InvisibleButton(str_id, size);\r\n}\r\n// IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));\r\nexport function Image(user_texture_id: ImTextureID | null, size: Readonly<Bind.interface_ImVec2>, uv0: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, uv1: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT, tint_col: Readonly<Bind.interface_ImVec4> = ImVec4.WHITE, border_col: Readonly<Bind.interface_ImVec4> = ImVec4.ZERO): void {\r\n    bind.Image(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, tint_col, border_col);\r\n}\r\n// IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));    // <0 frame_padding uses default frame padding settings. 0 for no padding\r\nexport function ImageButton(user_texture_id: ImTextureID | null, size: Readonly<Bind.interface_ImVec2>, uv0: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, uv1: Readonly<Bind.interface_ImVec2> = ImVec2.UNIT, frame_padding: number = -1, bg_col: Readonly<Bind.interface_ImVec4> = ImVec4.ZERO, tint_col: Readonly<Bind.interface_ImVec4> = ImVec4.WHITE): boolean {\r\n    return bind.ImageButton(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, frame_padding, bg_col, tint_col);\r\n}\r\n// IMGUI_API bool          Checkbox(const char* label, bool* v);\r\nexport function Checkbox(label: string, v: Bind.ImScalar<boolean> | Bind.ImAccess<boolean>): boolean {\r\n    if (Array.isArray(v)) {\r\n        return bind.Checkbox(label, v);\r\n    } else {\r\n        const ref_v: Bind.ImScalar<boolean> = [ v() ];\r\n        const ret = bind.Checkbox(label, ref_v);\r\n        v(ref_v[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);\r\nexport function CheckboxFlags(label: string, flags: Bind.ImAccess<number> | Bind.ImScalar<number>, flags_value: number): boolean {\r\n    if (Array.isArray(flags)) {\r\n        return bind.CheckboxFlags(label, flags, flags_value);\r\n    } else {\r\n        const ref_flags: Bind.ImScalar<number> = [ flags() ];\r\n        const ret = bind.CheckboxFlags(label, ref_flags, flags_value);\r\n        flags(ref_flags[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API bool          RadioButton(const char* label, bool active);\r\n// IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);\r\nexport function RadioButton(label: string, active: boolean): boolean;\r\nexport function RadioButton(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number>, v_button: number): boolean;\r\nexport function RadioButton(label: string, ...args: any[]): boolean {\r\n    if (typeof(args[0]) === \"boolean\") {\r\n        const active: boolean = args[0];\r\n        return bind.RadioButton_A(label, active);\r\n    } else {\r\n        const v: Bind.ImAccess<number> | Bind.ImScalar<number> = args[0];\r\n        const v_button: number = args[1];\r\n        const _v: Bind.ImScalar<number> = Array.isArray(v) ? v : [ v() ];\r\n        const ret = bind.RadioButton_B(label, _v, v_button);\r\n        if (!Array.isArray(v)) { v(_v[0]); }\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0), int stride = sizeof(float));\r\n// IMGUI_API void          PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0));\r\nexport type PlotLinesValueGetter = (data: any, idx: number) => number;\r\nexport function PlotLines(label: string, values: ArrayLike<number>, values_count?: number, value_offset?: number, overlay_text?: string | null, scale_min?: number, scale_max?: number, graph_size?: Readonly<Bind.interface_ImVec2>, stride?: number): void;\r\nexport function PlotLines(label: string, values_getter: PlotLinesValueGetter, data: any, values_count?: number, value_offset?: number, overlay_text?: string | null, scale_min?: number, scale_max?: number, graph_size?: Readonly<Bind.interface_ImVec2>): void;\r\nexport function PlotLines(label: string, ...args: any[]): void {\r\n    if (Array.isArray(args[0])) {\r\n        const values: ArrayLike<number> = args[0];\r\n        const values_getter: PlotLinesValueGetter = (data: any, idx: number): number => values[idx * stride];\r\n        const values_count: number = typeof(args[1]) === \"number\" ? args[1] : values.length;\r\n        const values_offset: number = typeof(args[2]) === \"number\" ? args[2] : 0;\r\n        const overlay_text: string | null = typeof(args[3]) === \"string\" ? args[3] : null;\r\n        const scale_min: number = typeof(args[4]) === \"number\" ? args[4] : Number.MAX_VALUE;\r\n        const scale_max: number = typeof(args[5]) === \"number\" ? args[5] : Number.MAX_VALUE;\r\n        const graph_size: Readonly<Bind.interface_ImVec2> = args[6] || ImVec2.ZERO;\r\n        const stride: number = typeof(args[7]) === \"number\" ? args[7] : 1;\r\n        bind.PlotLines(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\r\n    } else {\r\n        const values_getter: PlotLinesValueGetter = args[0];\r\n        const data: any = args[1];\r\n        const values_count: number = args[2];\r\n        const values_offset: number = typeof(args[3]) === \"number\" ? args[3] : 0;\r\n        const overlay_text: string | null = typeof(args[4]) === \"string\" ? args[4] : null;\r\n        const scale_min: number = typeof(args[5]) === \"number\" ? args[5] : Number.MAX_VALUE;\r\n        const scale_max: number = typeof(args[6]) === \"number\" ? args[6] : Number.MAX_VALUE;\r\n        const graph_size: Readonly<Bind.interface_ImVec2> = args[7] || ImVec2.ZERO;\r\n        bind.PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\r\n    }\r\n}\r\n// IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0), int stride = sizeof(float));\r\n// IMGUI_API void          PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0,0));\r\nexport type PlotHistogramValueGetter = (data: any, idx: number) => number;\r\nexport function PlotHistogram(label: string, values: ArrayLike<number>, values_count?: number, value_offset?: number, overlay_text?: string | null, scale_min?: number, scale_max?: number, graph_size?: Readonly<Bind.interface_ImVec2>, stride?: number): void;\r\nexport function PlotHistogram(label: string, values_getter: PlotHistogramValueGetter, data: any, values_count?: number, value_offset?: number, overlay_text?: string | null, scale_min?: number, scale_max?: number, graph_size?: Readonly<Bind.interface_ImVec2>): void;\r\nexport function PlotHistogram(label: string, ...args: any[]): void {\r\n    if (Array.isArray(args[0])) {\r\n        const values: ArrayLike<number> = args[0];\r\n        const values_getter: PlotHistogramValueGetter = (data: any, idx: number): number => values[idx * stride];\r\n        const values_count: number = typeof(args[1]) === \"number\" ? args[1] : values.length;\r\n        const values_offset: number = typeof(args[2]) === \"number\" ? args[2] : 0;\r\n        const overlay_text: string | null = typeof(args[3]) === \"string\" ? args[3] : null;\r\n        const scale_min: number = typeof(args[4]) === \"number\" ? args[4] : Number.MAX_VALUE;\r\n        const scale_max: number = typeof(args[5]) === \"number\" ? args[5] : Number.MAX_VALUE;\r\n        const graph_size: Readonly<Bind.interface_ImVec2> = args[6] || ImVec2.ZERO;\r\n        const stride: number = typeof(args[7]) === \"number\" ? args[7] : 1;\r\n        bind.PlotHistogram(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\r\n    } else {\r\n        const values_getter: PlotHistogramValueGetter = args[0];\r\n        const data: any = args[1];\r\n        const values_count: number = args[2];\r\n        const values_offset: number = typeof(args[3]) === \"number\" ? args[3] : 0;\r\n        const overlay_text: string | null = typeof(args[4]) === \"string\" ? args[4] : null;\r\n        const scale_min: number = typeof(args[5]) === \"number\" ? args[5] : Number.MAX_VALUE;\r\n        const scale_max: number = typeof(args[6]) === \"number\" ? args[6] : Number.MAX_VALUE;\r\n        const graph_size: Readonly<Bind.interface_ImVec2> = args[7] || ImVec2.ZERO;\r\n        bind.PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);\r\n    }\r\n}\r\n// IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-1,0), const char* overlay = NULL);\r\nexport function ProgressBar(fraction: number, size_arg: Readonly<Bind.interface_ImVec2> = new ImVec2(-1, 0), overlay: string | null = null): void {\r\n    bind.ProgressBar(fraction, size_arg, overlay);\r\n}\r\n\r\n// Widgets: Combo Box\r\n// The new BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it.\r\n// The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.\r\n// IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);\r\nexport function BeginCombo(label: string, preview_value: string | null = null, flags: ImGuiComboFlags = 0): boolean {\r\n    return bind.BeginCombo(label, preview_value, flags);\r\n}\r\n// IMGUI_API void          EndCombo();\r\nexport function EndCombo(): void { bind.EndCombo(); }\r\n// IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);\r\n// IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\"\r\n// IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);\r\nexport type ComboValueGetter = (data: any, idx: number, out_text: [string]) => boolean;\r\nexport function Combo(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, items: string[], items_count?: number, popup_max_height_in_items?: number): boolean;\r\nexport function Combo(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, items_separated_by_zeros: string, popup_max_height_in_items?: number): boolean;\r\nexport function Combo(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, items_getter: ComboValueGetter, data: any, items_count: number, popup_max_height_in_items?: number): boolean;\r\nexport function Combo(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, ...args: any[]): boolean {\r\n    let ret = false;\r\n    const _current_item: Bind.ImScalar<number> = Array.isArray(current_item) ? current_item : [ current_item() ];\r\n    if (Array.isArray(args[0])) {\r\n        const items: string[] = args[0];\r\n        const items_count = typeof(args[1]) === \"number\" ? args[1] : items.length;\r\n        const popup_max_height_in_items: number = typeof(args[2]) === \"number\" ? args[2] : -1;\r\n        const items_getter = (data: any, idx: number, out_text: [string]): boolean => { out_text[0] = items[idx]; return true; };\r\n        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);\r\n    } else if (typeof(args[0]) === \"string\") {\r\n        const items_separated_by_zeros: string = args[0]\r\n        const popup_max_height_in_items: number = typeof(args[1]) === \"number\" ? args[1] : -1;\r\n        const items: string[] = items_separated_by_zeros.replace(/^\\0+|\\0+$/g, \"\").split(\"\\0\");\r\n        const items_count: number = items.length;\r\n        const items_getter = (data: any, idx: number, out_text: [string]): boolean => { out_text[0] = items[idx]; return true; };\r\n        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);\r\n    } else {\r\n        const items_getter: (data: any, idx: number, out_text: [string]) => boolean = args[0];\r\n        const data: any = args[1];\r\n        const items_count = args[2];\r\n        const popup_max_height_in_items: number = typeof(args[3]) === \"number\" ? args[3] : -1;\r\n        ret = bind.Combo(label, _current_item, items_getter, data, items_count, popup_max_height_in_items);\r\n    }\r\n    if (!Array.isArray(current_item)) { current_item(_current_item[0]); }\r\n    return ret;\r\n}\r\n\r\n// Widgets: Drags (tip: ctrl+click on a drag box to input with keyboard. manually input values aren't clamped, can go off-bounds)\r\n// For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x\r\n// IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);     // If v_min >= v_max we have no bound\r\nexport function DragFloat(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0.0, v_max: number = 0.0, display_format: string | null = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.DragFloat(label, _v, v_speed, v_min, v_max, display_format, power);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\r\nexport function DragFloat2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | ImVec2, v_speed: number = 1.0, v_min: number = 0.0, v_max: number = 0.0, display_format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.DragFloat2(label, _v, v_speed, v_min, v_max, display_format, power);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\r\nexport function DragFloat3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0.0, v_max: number = 0.0, display_format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.DragFloat3(label, _v, v_speed, v_min, v_max, display_format, power);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", float power = 1.0f);\r\nexport function DragFloat4(label: string, v: XYZW | Bind.ImTuple4<number> | ImVec4, v_speed: number = 1.0, v_min: number = 0.0, v_max: number = 0.0, display_format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.DragFloat4(label, _v, v_speed, v_min, v_max, display_format, power);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* display_format = \"%.3f\", const char* display_format_max = NULL, float power = 1.0f);\r\nexport function DragFloatRange2(label: string, v_current_min: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_current_max: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0.0, v_max: number = 0.0, display_format: string = \"%.3f\", display_format_max: string | null = null, power: number = 1.0): boolean {\r\n    const _v_current_min = import_Scalar(v_current_min);\r\n    const _v_current_max = import_Scalar(v_current_max);\r\n    const ret = bind.DragFloatRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, display_format, display_format_max, power);\r\n    export_Scalar(_v_current_min, v_current_min);\r\n    export_Scalar(_v_current_max, v_current_max);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%d\");                                       // If v_min >= v_max we have no bound\r\nexport function DragInt(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0, v_max: number = 0, format: string = \"%d\"): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.DragInt(label, _v, v_speed, v_min, v_max, format);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\r\nexport function DragInt2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0, v_max: number = 0, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.DragInt2(label, _v, v_speed, v_min, v_max, format);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\r\nexport function DragInt3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0, v_max: number = 0, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.DragInt3(label, _v, v_speed, v_min, v_max, format);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\r\nexport function DragInt4(label: string, v: XYZW | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0, v_max: number = 0, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.DragInt4(label, _v, v_speed, v_min, v_max, format);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* display_format = \"%.0f\", const char* display_format_max = NULL);\r\nexport function DragIntRange2(label: string, v_current_min: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_current_max: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_speed: number = 1.0, v_min: number = 0, v_max: number = 0, format: string = \"%d\", format_max: string | null = null): boolean {\r\n    const _v_current_min = import_Scalar(v_current_min);\r\n    const _v_current_max = import_Scalar(v_current_max);\r\n    const ret = bind.DragIntRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, format, format_max);\r\n    export_Scalar(_v_current_min, v_current_min);\r\n    export_Scalar(_v_current_max, v_current_max);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);\r\n// IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);\r\nexport function DragScalar(label: string, v: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, v_speed: number, v_min: number | null = null, v_max: number | null = null, format: string | null = null, power: number = 1.0): boolean {\r\n    if (v instanceof Int8Array) { return bind.DragScalar(label, ImGuiDataType.S8, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Uint8Array) { return bind.DragScalar(label, ImGuiDataType.U8, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Int16Array) { return bind.DragScalar(label, ImGuiDataType.S16, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Uint16Array) { return bind.DragScalar(label, ImGuiDataType.U16, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Int32Array) { return bind.DragScalar(label, ImGuiDataType.S32, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Uint32Array) { return bind.DragScalar(label, ImGuiDataType.U32, v, v_speed, v_min, v_max, format, power); }\r\n    // if (v instanceof Int64Array) { return bind.DragScalar(label, ImGuiDataType.S64, v, v_speed, v_min, v_max, format, power); }\r\n    // if (v instanceof Uint64Array) { return bind.DragScalar(label, ImGuiDataType.U64, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Float32Array) { return bind.DragScalar(label, ImGuiDataType.Float, v, v_speed, v_min, v_max, format, power); }\r\n    if (v instanceof Float64Array) { return bind.DragScalar(label, ImGuiDataType.Double, v, v_speed, v_min, v_max, format, power); }\r\n    throw new Error();\r\n}\r\n\r\n// Widgets: Input with Keyboard\r\n// IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\r\nexport function InputText(label: string, buf: ImStringBuffer | Bind.ImAccess<string> | Bind.ImScalar<string>, buf_size: number = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback | null = null, user_data: any = null): boolean {\r\n    const _callback = callback && ((data: Bind.reference_ImGuiInputTextCallbackData): number => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;\r\n    if (Array.isArray(buf)) {\r\n        return bind.InputText(label, buf, buf_size, flags, _callback, null);\r\n    } else if (buf instanceof ImStringBuffer) {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf.buffer ];\r\n        const _buf_size: number = Math.min(buf_size, buf.size);\r\n        const ret: boolean = bind.InputText(label, ref_buf, _buf_size, flags, _callback, null);\r\n        buf.buffer = ref_buf[0];\r\n        return ret;\r\n    } else {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf() ];\r\n        const ret: boolean = bind.InputText(label, ref_buf, buf_size, flags, _callback, null);\r\n        buf(ref_buf[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\r\nexport function InputTextWithHint(label: string, hint: string, buf: ImStringBuffer | Bind.ImAccess<string> | Bind.ImScalar<string>, buf_size: number = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback | null = null, user_data: any = null): boolean {\r\n    const _callback = callback && ((data: Bind.reference_ImGuiInputTextCallbackData): number => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;\r\n    if (Array.isArray(buf)) {\r\n        return bind.InputTextWithHint(label, hint, buf, buf_size, flags, _callback, null);\r\n    } else if (buf instanceof ImStringBuffer) {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf.buffer ];\r\n        const _buf_size: number = Math.min(buf_size, buf.size);\r\n        const ret: boolean = bind.InputTextWithHint(label, hint, ref_buf, _buf_size, flags, _callback, null);\r\n        buf.buffer = ref_buf[0];\r\n        return ret;\r\n    } else {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf() ];\r\n        const ret: boolean = bind.InputTextWithHint(label, hint, ref_buf, buf_size, flags, _callback, null);\r\n        buf(ref_buf[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0,0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\r\nexport function InputTextMultiline(label: string, buf: ImStringBuffer | Bind.ImAccess<string> | Bind.ImScalar<string>, buf_size: number = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize, size: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback | null = null, user_data: any = null): boolean {\r\n    const _callback = callback && ((data: Bind.reference_ImGuiInputTextCallbackData): number => callback(new ImGuiInputTextCallbackData(data, user_data))) || null;\r\n    if (Array.isArray(buf)) {\r\n        return bind.InputTextMultiline(label, buf, buf_size, size, flags, _callback, null);\r\n    } else if (buf instanceof ImStringBuffer) {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf.buffer ];\r\n        const _buf_size: number = Math.min(buf_size, buf.size);\r\n        const ret: boolean = bind.InputTextMultiline(label, ref_buf, _buf_size, size, flags, _callback, null);\r\n        buf.buffer = ref_buf[0];\r\n        return ret;\r\n    } else {\r\n        const ref_buf: Bind.ImScalar<string> = [ buf() ];\r\n        const ret: boolean = bind.InputTextMultiline(label, ref_buf, buf_size, size, flags, _callback, null);\r\n        buf(ref_buf[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = \"%.3f\", ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputFloat(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, step: number = 0.0, step_fast: number = 0.0, format: string = \"%.3f\", extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.InputFloat(label, _v, step, step_fast, format, extra_flags);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = \"%.3f\", ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputFloat2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, format: string = \"%.3f\", extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.InputFloat2(label, _v, format, extra_flags);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = \"%.3f\", ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputFloat3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, format: string = \"%.3f\", extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.InputFloat3(label, _v, format, extra_flags);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = \"%.3f\", ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputFloat4(label: string, v: XYZW | Bind.ImTuple4<number>, format: string = \"%.3f\", extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.InputFloat4(label, _v, format, extra_flags);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputInt(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, step: number = 1, step_fast: number = 100, extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.InputInt(label, _v, step, step_fast, extra_flags);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputInt2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.InputInt2(label, _v, extra_flags);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputInt3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.InputInt3(label, _v, extra_flags);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputInt4(label: string, v: XYZW | Bind.ImTuple4<number>, extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.InputInt4(label, _v, extra_flags);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputDouble(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = \"%.6f\", ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputDouble(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, step: number = 0.0, step_fast: number = 0.0, format: string = \"%.6f\", extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.InputDouble(label, _v, step, step_fast, format, extra_flags);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* v, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags extra_flags = 0);\r\n// IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags extra_flags = 0);\r\nexport function InputScalar(label: string, v: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, step: number | null = null, step_fast: number | null = null, format: string | null = null, extra_flags: ImGuiInputTextFlags = 0): boolean {\r\n    if (v instanceof Int8Array) { return bind.InputScalar(label, ImGuiDataType.S8, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Uint8Array) { return bind.InputScalar(label, ImGuiDataType.U8, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Int16Array) { return bind.InputScalar(label, ImGuiDataType.S16, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Uint16Array) { return bind.InputScalar(label, ImGuiDataType.U16, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Int32Array) { return bind.InputScalar(label, ImGuiDataType.S32, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Uint32Array) { return bind.InputScalar(label, ImGuiDataType.U32, v, step, step_fast, format, extra_flags); }\r\n    // if (v instanceof Int64Array) { return bind.InputScalar(label, ImGuiDataType.S64, v, step, step_fast, format, extra_flags); }\r\n    // if (v instanceof Uint64Array) { return bind.InputScalar(label, ImGuiDataType.U64, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Float32Array) { return bind.InputScalar(label, ImGuiDataType.Float, v, step, step_fast, format, extra_flags); }\r\n    if (v instanceof Float64Array) { return bind.InputScalar(label, ImGuiDataType.Double, v, step, step_fast, format, extra_flags); }\r\n    throw new Error();\r\n}\r\n\r\n// Widgets: Sliders (tip: ctrl+click on a slider to input with keyboard. manually input values aren't clamped, can go off-bounds)\r\n// IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display. Use power!=1.0 for logarithmic sliders\r\nexport function SliderFloat(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.SliderFloat(label, _v, v_min, v_max, format, power);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\r\nexport function SliderFloat2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec2, v_min: number, v_max: number, format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.SliderFloat2(label, _v, v_min, v_max, format, power);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\r\nexport function SliderFloat3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.SliderFloat3(label, _v, v_min, v_max, format, power);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\r\nexport function SliderFloat4(label: string, v: XYZW | Bind.ImTuple4<number> | XYZW, v_min: number, v_max: number, format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.SliderFloat4(label, _v, v_min, v_max, format, power);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f);\r\nexport function SliderAngle(label: string, v_rad: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_degrees_min: number = -360.0, v_degrees_max: number = +360.0): boolean {\r\n    const _v_rad = import_Scalar(v_rad);\r\n    const ret = bind.SliderAngle(label, _v_rad, v_degrees_min, v_degrees_max);\r\n    export_Scalar(_v_rad, v_rad);\r\n    return ret;\r\n}\r\nexport function SliderAngle3(label: string, v_rad: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_degrees_min: number = -360.0, v_degrees_max: number = +360.0): boolean {\r\n    const _v_rad = import_Vector3(v_rad);\r\n    _v_rad[0] = Math.floor(_v_rad[0] * 180 / Math.PI);\r\n    _v_rad[1] = Math.floor(_v_rad[1] * 180 / Math.PI);\r\n    _v_rad[2] = Math.floor(_v_rad[2] * 180 / Math.PI);\r\n    const ret = bind.SliderInt3(label, _v_rad, v_degrees_min, v_degrees_max, \"%d deg\");\r\n    _v_rad[0] = _v_rad[0] * Math.PI / 180;\r\n    _v_rad[1] = _v_rad[1] * Math.PI / 180;\r\n    _v_rad[2] = _v_rad[2] * Math.PI / 180;\r\n    export_Vector3(_v_rad, v_rad);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = \"%d\");\r\nexport function SliderInt(label: string, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%d\"): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.SliderInt(label, _v, v_min, v_max, format);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = \"%d\");\r\nexport function SliderInt2(label: string, v: XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector2(v);\r\n    const ret = bind.SliderInt2(label, _v, v_min, v_max, format);\r\n    export_Vector2(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = \"%d\");\r\nexport function SliderInt3(label: string, v: XYZ | XYZW | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector3(v);\r\n    const ret = bind.SliderInt3(label, _v, v_min, v_max, format);\r\n    export_Vector3(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = \"%d\");\r\nexport function SliderInt4(label: string, v: XYZW | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%d\"): boolean {\r\n    const _v = import_Vector4(v);\r\n    const ret = bind.SliderInt4(label, _v, v_min, v_max, format);\r\n    export_Vector4(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);\r\n// IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);\r\nexport function SliderScalar(label: string, v: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, v_min: number, v_max: number, format: string | null = null, power: number = 1.0): boolean {\r\n    if (v instanceof Int8Array) { return bind.SliderScalar(label, ImGuiDataType.S8, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint8Array) { return bind.SliderScalar(label, ImGuiDataType.U8, v, v_min, v_max, format, power); }\r\n    if (v instanceof Int16Array) { return bind.SliderScalar(label, ImGuiDataType.S16, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint16Array) { return bind.SliderScalar(label, ImGuiDataType.U16, v, v_min, v_max, format, power); }\r\n    if (v instanceof Int32Array) { return bind.SliderScalar(label, ImGuiDataType.S32, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint32Array) { return bind.SliderScalar(label, ImGuiDataType.U32, v, v_min, v_max, format, power); }\r\n    // if (v instanceof Int64Array) { return bind.SliderScalar(label, ImGuiDataType.S64, v, v_min, v_max, format, power); }\r\n    // if (v instanceof Uint64Array) { return bind.SliderScalar(label, ImGuiDataType.U64, v, v_min, v_max, format, power); }\r\n    if (v instanceof Float32Array) { return bind.SliderScalar(label, ImGuiDataType.Float, v, v_min, v_max, format, power); }\r\n    if (v instanceof Float64Array) { return bind.SliderScalar(label, ImGuiDataType.Double, v, v_min, v_max, format, power); }\r\n    throw new Error();\r\n}\r\n// IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\r\nexport function VSliderFloat(label: string, size: Readonly<Bind.interface_ImVec2>, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%.3f\", power: number = 1.0): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.VSliderFloat(label, size, _v, v_min, v_max, format, power);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = \"%d\");\r\nexport function VSliderInt(label: string, size: Readonly<Bind.interface_ImVec2>, v: Bind.ImAccess<number> | Bind.ImScalar<number> | XY | XYZ | XYZW | Bind.ImTuple2<number> | Bind.ImTuple3<number> | Bind.ImTuple4<number>, v_min: number, v_max: number, format: string = \"%d\"): boolean {\r\n    const _v = import_Scalar(v);\r\n    const ret = bind.VSliderInt(label, size, _v, v_min, v_max, format);\r\n    export_Scalar(_v, v);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);\r\nexport function VSliderScalar(label: string, size: Readonly<Bind.interface_ImVec2>, data_type: ImGuiDataType, v: Bind.ImAccess<number> | Bind.ImScalar<number>, v_min: number, v_max: number, format: string | null = null, power: number = 1.0): boolean {\r\n    if (v instanceof Int8Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S8, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint8Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U8, v, v_min, v_max, format, power); }\r\n    if (v instanceof Int16Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S16, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint16Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U16, v, v_min, v_max, format, power); }\r\n    if (v instanceof Int32Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S32, v, v_min, v_max, format, power); }\r\n    if (v instanceof Uint32Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U32, v, v_min, v_max, format, power); }\r\n    // if (v instanceof Int64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S64, v, v_min, v_max, format, power); }\r\n    // if (v instanceof Uint64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U64, v, v_min, v_max, format, power); }\r\n    if (v instanceof Float32Array) { return bind.VSliderScalar(label, size, ImGuiDataType.Float, v, v_min, v_max, format, power); }\r\n    if (v instanceof Float64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.Double, v, v_min, v_max, format, power); }\r\n    throw new Error();\r\n}\r\n\r\n// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little colored preview square that can be left-clicked to open a picker, and right-clicked to open an option menu.)\r\n// Note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can the pass the address of a first float element out of a contiguous structure, e.g. &myvector.x\r\n// IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);\r\nexport function ColorEdit3(label: string, col: RGB | RGBA | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4, flags: ImGuiColorEditFlags = 0): boolean {\r\n    const _col = import_Color3(col);\r\n    const ret = bind.ColorEdit3(label, _col, flags);\r\n    export_Color3(_col, col);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);\r\nexport function ColorEdit4(label: string, col: RGBA | Bind.ImTuple4<number> | Bind.interface_ImVec4, flags: ImGuiColorEditFlags = 0): boolean {\r\n    const _col = import_Color4(col);\r\n    const ret = bind.ColorEdit4(label, _col, flags);\r\n    export_Color4(_col, col);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);\r\nexport function ColorPicker3(label: string, col: RGB | RGBA | Bind.ImTuple3<number> | Bind.ImTuple4<number> | Bind.interface_ImVec4, flags: ImGuiColorEditFlags = 0): boolean {\r\n    const _col = import_Color3(col);\r\n    const ret = bind.ColorPicker3(label, _col, flags);\r\n    export_Color3(_col, col);\r\n    return ret;\r\n}\r\n// IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);\r\nexport function ColorPicker4(label: string, col: RGBA | Bind.ImTuple4<number> | Bind.interface_ImVec4, flags: ImGuiColorEditFlags = 0, ref_col: Bind.ImTuple4<number> | Bind.interface_ImVec4 | null = null): boolean {\r\n    const _col = import_Color4(col);\r\n    const _ref_col = ref_col ? import_Color4(ref_col) : null;\r\n    const ret = bind.ColorPicker4(label, _col, flags, _ref_col);\r\n    export_Color4(_col, col);\r\n    if (_ref_col && ref_col) { export_Color4(_ref_col, ref_col); }\r\n    return ret;\r\n}\r\n// IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0,0));  // display a colored square/button, hover for details, return true when pressed.\r\nexport function ColorButton(desc_id: string, col: Readonly<Bind.interface_ImVec4>, flags: ImGuiColorEditFlags = 0, size: Readonly<Bind.interface_ImVec2> = ImVec2.ZERO): boolean {\r\n    return bind.ColorButton(desc_id, col, flags, size);\r\n}\r\n// IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                         // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.\r\nexport function SetColorEditOptions(flags: ImGuiColorEditFlags): void {\r\n    bind.SetColorEditOptions(flags);\r\n}\r\n\r\n// Widgets: Trees\r\n// IMGUI_API bool          TreeNode(const char* label);                                            // if returning 'true' the node is open and the tree id is pushed into the id stack. user is responsible for calling TreePop().\r\n// IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);       // read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().\r\n// IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);       // \"\r\n// IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);\r\n// IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);\r\nexport function TreeNode(label: string): boolean;\r\nexport function TreeNode(label: string, fmt: string): boolean;\r\nexport function TreeNode(label: number, fmt: string): boolean;\r\nexport function TreeNode(...args: any[]): boolean {\r\n    if (typeof(args[0]) === \"string\") {\r\n        if (args.length === 1) {\r\n            const label: string = args[0];\r\n            return bind.TreeNode_A(label);\r\n        } else {\r\n            const str_id: string = args[0];\r\n            const fmt: string = args[1];\r\n            return bind.TreeNode_B(str_id, fmt);\r\n        }\r\n    } else {\r\n        const ptr_id: number = args[0];\r\n        const fmt: string = args[1];\r\n        return bind.TreeNode_C(ptr_id, fmt);\r\n    }\r\n}\r\n// IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);\r\n// IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);\r\n// IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);\r\n// IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);\r\n// IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);\r\nexport function TreeNodeEx(label: string, flags?: ImGuiTreeNodeFlags): boolean;\r\nexport function TreeNodeEx(str_id: string, flags: ImGuiTreeNodeFlags, fmt: string): boolean;\r\nexport function TreeNodeEx(ptr_id: number, flags: ImGuiTreeNodeFlags, fmt: string): boolean;\r\nexport function TreeNodeEx(...args: any[]): boolean {\r\n    if (typeof(args[0]) === \"string\") {\r\n        if (args.length < 3) {\r\n            const label: string = args[0];\r\n            const flags: ImGuiTreeNodeFlags = args[1] || 0;\r\n            return bind.TreeNodeEx_A(label, flags);\r\n        } else {\r\n            const str_id: string = args[0];\r\n            const flags: ImGuiTreeNodeFlags = args[1];\r\n            const fmt: string = args[2];\r\n            return bind.TreeNodeEx_B(str_id, flags, fmt);\r\n        }\r\n    } else {\r\n        const ptr_id: number = args[0];\r\n        const flags: ImGuiTreeNodeFlags = args[1];\r\n        const fmt: string = args[2];\r\n        return bind.TreeNodeEx_C(ptr_id, flags, fmt);\r\n    }\r\n}\r\n// IMGUI_API void          TreePush(const char* str_id);                                           // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call Push/Pop yourself for layout purpose\r\n// IMGUI_API void          TreePush(const void* ptr_id = NULL);                                    // \"\r\nexport function TreePush(str_id: string): void;\r\nexport function TreePush(ptr_id: number): void;\r\nexport function TreePush(...args: any[]): void {\r\n    if (typeof(args[0]) === \"string\") {\r\n        const str_id: string = args[0];\r\n        bind.TreePush_A(str_id);\r\n    } else {\r\n        const ptr_id: number = args[0];\r\n        bind.TreePush_B(ptr_id);\r\n    }\r\n}\r\n// IMGUI_API void          TreePop();                                                              // ~ Unindent()+PopId()\r\nexport function TreePop(): void { bind.TreePop(); }\r\n// IMGUI_API void          TreeAdvanceToLabelPos();                                                // advance cursor x position by GetTreeNodeToLabelSpacing()\r\nexport function TreeAdvanceToLabelPos(): void { bind.TreeAdvanceToLabelPos(); }\r\n// IMGUI_API float         GetTreeNodeToLabelSpacing();                                            // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode\r\nexport function GetTreeNodeToLabelSpacing(): number { return bind.GetTreeNodeToLabelSpacing(); }\r\n// IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);      // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().\r\n// IMGUI_API bool          CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags = 0); // when 'p_open' isn't NULL, display an additional small close button on upper right of the header\r\nexport function CollapsingHeader(label: string, flags?: ImGuiTreeNodeFlags): boolean;\r\nexport function CollapsingHeader(label: string, p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean>, flags?: ImGuiTreeNodeFlags): boolean;\r\nexport function CollapsingHeader(label: string, ...args: any[]): boolean {\r\n    if (args.length === 0) {\r\n        return bind.CollapsingHeader_A(label, 0);\r\n    } else {\r\n        if (typeof(args[0]) === \"number\") {\r\n            const flags: ImGuiTreeNodeFlags = args[0];\r\n            return bind.CollapsingHeader_A(label, flags);\r\n        } else {\r\n            const p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> = args[0];\r\n            const flags: ImGuiTreeNodeFlags = args[1] || 0;\r\n            const ref_open: Bind.ImScalar<boolean> = Array.isArray(p_open) ? p_open : [ p_open() ];\r\n            const ret = bind.CollapsingHeader_B(label, ref_open, flags);\r\n            if (!Array.isArray(p_open)) { p_open(ref_open[0]); }\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n// IMGUI_API void          SetNextItemOpen(bool is_open, ImGuiCond cond = 0);                  // set next TreeNode/CollapsingHeader open state.\r\nexport function SetNextItemOpen(is_open: boolean, cond: ImGuiCond = 0): void {\r\n    bind.SetNextItemOpen(is_open, cond);\r\n}\r\n\r\n// Widgets: Selectable / Lists\r\n// IMGUI_API bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));  // size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height\r\n// IMGUI_API bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));\r\nexport function Selectable(label: string, selected?: boolean, flags?: ImGuiSelectableFlags, size?: Readonly<Bind.interface_ImVec2>): boolean;\r\nexport function Selectable(label: string, p_selected: Bind.ImScalar<boolean> | Bind.ImAccess<boolean>, flags?: ImGuiSelectableFlags, size?: Readonly<Bind.interface_ImVec2>): boolean;\r\nexport function Selectable(label: string, ...args: any[]): boolean {\r\n    if (args.length === 0) {\r\n        return bind.Selectable_A(label, false, 0, ImVec2.ZERO);\r\n    } else {\r\n        if (typeof(args[0]) === \"boolean\") {\r\n            const selected: boolean = args[0];\r\n            const flags: ImGuiSelectableFlags = args[1] || 0;\r\n            const size: Readonly<Bind.interface_ImVec2> = args[2] || ImVec2.ZERO;\r\n            return bind.Selectable_A(label, selected, flags, size);\r\n        } else {\r\n            const p_selected: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> = args[0];\r\n            const flags: ImGuiSelectableFlags = args[1] || 0;\r\n            const size: Readonly<Bind.interface_ImVec2> = args[2] || ImVec2.ZERO;\r\n            const ref_selected: Bind.ImScalar<boolean> = Array.isArray(p_selected) ? p_selected : [ p_selected() ];\r\n            const ret = bind.Selectable_B(label, ref_selected, flags, size);\r\n            if (!Array.isArray(p_selected)) { p_selected(ref_selected[0]); }\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n// IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items = -1);\r\n// IMGUI_API bool          ListBox(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);\r\nexport type ListBoxItemGetter = (data: any, idx: number, out_text: [string]) => boolean;\r\nexport function ListBox(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, items: string[], items_count?: number, height_in_items?: number): boolean;\r\nexport function ListBox(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, items_getter: ListBoxItemGetter, data: any, items_count: number, height_in_items?: number): boolean;\r\nexport function ListBox(label: string, current_item: Bind.ImAccess<number> | Bind.ImScalar<number>, ...args: any[]): boolean {\r\n    let ret: boolean = false;\r\n    const _current_item: Bind.ImScalar<number> = Array.isArray(current_item) ? current_item : [ current_item() ];\r\n    if (Array.isArray(args[0])) {\r\n        const items: string[] = args[0];\r\n        const items_count: number = typeof(args[1]) === \"number\" ? args[1] : items.length;\r\n        const height_in_items: number = typeof(args[2]) === \"number\" ? args[2] : -1;\r\n        ret = bind.ListBox_A(label, _current_item, items, items_count, height_in_items);\r\n    } else {\r\n        const items_getter: ListBoxItemGetter = args[0];\r\n        const data: any = args[1];\r\n        const items_count: number = args[2];\r\n        const height_in_items: number = typeof(args[3]) === \"number\" ? args[3] : -1;\r\n        ret = bind.ListBox_B(label, _current_item, items_getter, data, items_count, height_in_items);\r\n    }\r\n    if (!Array.isArray(current_item)) { current_item(_current_item[0]); }\r\n    return ret;\r\n}\r\n// IMGUI_API bool          ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0,0));     // use if you want to reimplement ListBox() will custom data or interactions. make sure to call ListBoxFooter() afterwards.\r\n// IMGUI_API bool          ListBoxHeader(const char* label, int items_count, int height_in_items = -1); // \"\r\nexport function ListBoxHeader(label: string, size: Readonly<Bind.interface_ImVec2>): boolean;\r\nexport function ListBoxHeader(label: string, items_count: number, height_in_items?: number): boolean;\r\nexport function ListBoxHeader(label: string, ...args: any[]): boolean {\r\n    if (typeof(args[0]) === \"object\") {\r\n        const size: Readonly<Bind.interface_ImVec2> = args[0];\r\n        return bind.ListBoxHeader_A(label, size);\r\n    } else {\r\n        const items_count: number = args[0];\r\n        const height_in_items: number = typeof(args[1]) === \"number\" ? args[1] : -1;\r\n        return bind.ListBoxHeader_B(label, items_count, height_in_items);\r\n    }\r\n}\r\n// IMGUI_API void          ListBoxFooter();                                                        // terminate the scrolling region\r\nexport function ListBoxFooter(): void {\r\n    bind.ListBoxFooter();\r\n}\r\n\r\n// Widgets: Value() Helpers. Output single value in \"name: value\" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)\r\n// IMGUI_API void          Value(const char* prefix, bool b);\r\n// IMGUI_API void          Value(const char* prefix, int v);\r\n// IMGUI_API void          Value(const char* prefix, unsigned int v);\r\n// IMGUI_API void          Value(const char* prefix, float v, const char* float_format = NULL);\r\nexport function Value(prefix: string, b: boolean): void;\r\nexport function Value(prefix: string, v: number): void;\r\nexport function Value(prefix: string, v: number, float_format?: string | null): void;\r\nexport function Value(prefix: string, v: any): void;\r\nexport function Value(prefix: string, ...args: any[]): void {\r\n    if (typeof(args[0]) === \"boolean\") {\r\n        bind.Value_A(prefix, args[0]);\r\n    } else if (typeof(args[0]) === \"number\") {\r\n        if (Number.isInteger(args[0])) {\r\n            bind.Value_B(prefix, args[0]);\r\n        } else {\r\n            bind.Value_D(prefix, args[0], typeof(args[1]) === \"string\" ? args[1] : null);\r\n        }\r\n    } else {\r\n        bind.Text(prefix + String(args[0]));\r\n    }\r\n}\r\n\r\n// Tooltips\r\n// IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of contents).\r\nexport function BeginTooltip(): void { bind.BeginTooltip(); }\r\n// IMGUI_API void          EndTooltip();\r\nexport function EndTooltip(): void { bind.EndTooltip(); }\r\n// IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set text tooltip under mouse-cursor, typically use with ImGui::IsItemHovered(). overidde any previous call to SetTooltip().\r\n// IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);\r\nexport function SetTooltip(fmt: string): void {\r\n    bind.SetTooltip(fmt);\r\n}\r\n\r\n// Menus\r\n// IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar. only call EndMainMenuBar() if this returns true!\r\nexport function BeginMainMenuBar(): boolean { return bind.BeginMainMenuBar(); }\r\n// IMGUI_API void          EndMainMenuBar();\r\nexport function EndMainMenuBar(): void { bind.EndMainMenuBar(); }\r\n// IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window). only call EndMenuBar() if this returns true!\r\nexport function BeginMenuBar(): boolean { return bind.BeginMenuBar(); }\r\n// IMGUI_API void          EndMenuBar();\r\nexport function EndMenuBar(): void { bind.EndMenuBar(); }\r\n// IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!\r\nexport function BeginMenu(label: string, enabled: boolean = true): boolean { return bind.BeginMenu(label, enabled); }\r\n// IMGUI_API void          EndMenu();\r\nexport function EndMenu(): void { bind.EndMenu(); }\r\n// IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment\r\n// IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL\r\nexport function MenuItem(label: string, shortcut?: string | null, selected?: boolean, enabled?: boolean): boolean;\r\nexport function MenuItem(label: string, shortcut: string | null, p_selected: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null, enabled?: boolean): boolean;\r\nexport function MenuItem(label: string, ...args: any[]): boolean {\r\n    if (args.length === 0) {\r\n        return bind.MenuItem_A(label, null, false, true);\r\n    } else if (args.length === 1) {\r\n        const shortcut: string | null = args[0];\r\n        return bind.MenuItem_A(label, shortcut, false, true);\r\n    } else {\r\n        const shortcut: string | null = args[0];\r\n        if (typeof(args[1]) === \"boolean\") {\r\n            const selected: boolean = args[1];\r\n            const enabled: boolean = typeof(args[2]) === \"boolean\" ? args[2] : true;\r\n            return bind.MenuItem_A(label, shortcut, selected, enabled);\r\n        } else {\r\n            const p_selected: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> = args[1];\r\n            const enabled: boolean = typeof(args[2]) === \"boolean\" ? args[2] : true;\r\n            const ref_selected: Bind.ImScalar<boolean> = Array.isArray(p_selected) ? p_selected : [ p_selected() ];\r\n            const ret = bind.MenuItem_B(label, shortcut, ref_selected, enabled);\r\n            if (!Array.isArray(p_selected)) { p_selected(ref_selected[0]); }\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n\r\n// Popups\r\n// IMGUI_API void          OpenPopup(const char* str_id);                                      // call to mark popup as open (don't call every frame!). popups are closed when user click outside, or if CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block. By default, Selectable()/MenuItem() are calling CloseCurrentPopup(). Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).\r\nexport function OpenPopup(str_id: string): void { bind.OpenPopup(str_id); }\r\n// IMGUI_API bool          OpenPopupOnItemClick(const char* str_id = NULL, int mouse_button = 1);                                  // helper to open popup when clicked on last item. return true when just opened.\r\nexport function OpenPopupOnItemClick(str_id: string | null = null, mouse_button: number = 1): boolean {\r\n    return bind.OpenPopupOnItemClick(str_id, mouse_button);\r\n}\r\n// IMGUI_API bool          BeginPopup(const char* str_id);                                     // return true if the popup is open, and you can start outputting to it. only call EndPopup() if BeginPopup() returned true!\r\nexport function BeginPopup(str_id: string): boolean { return bind.BeginPopup(str_id); }\r\n// IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags extra_flags = 0);               // modal dialog (block interactions behind the modal window, can't close the modal window by clicking outside)\r\nexport function BeginPopupModal(str_id: string = \"\", p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null, extra_flags: ImGuiWindowFlags = 0): boolean {\r\n    if (Array.isArray(p_open)) {\r\n        return bind.BeginPopupModal(str_id, p_open, extra_flags);\r\n    } else if (typeof(p_open) === \"function\") {\r\n        const _p_open: Bind.ImScalar<boolean> = [ p_open() ];\r\n        const ret = bind.BeginPopupModal(str_id, _p_open, extra_flags);\r\n        p_open(_p_open[0]);\r\n        return ret;\r\n    } else {\r\n        return bind.BeginPopupModal(str_id, null, extra_flags);\r\n    }\r\n}\r\n// IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, int mouse_button = 1);                                 // helper to open and begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!\r\nexport function BeginPopupContextItem(str_id: string | null = null, mouse_button: number = 1): boolean {\r\n    return bind.BeginPopupContextItem(str_id, mouse_button);\r\n}\r\n// IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, int mouse_button = 1, bool also_over_items = true);  // helper to open and begin popup when clicked on current window.\r\nexport function BeginPopupContextWindow(str_id: string | null = null, mouse_button: number = 1, also_over_items: boolean = true): boolean {\r\n    return bind.BeginPopupContextWindow(str_id, mouse_button, also_over_items);\r\n}\r\n// IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, int mouse_button = 1);                                 // helper to open and begin popup when clicked in void (where there are no imgui windows).\r\nexport function BeginPopupContextVoid(str_id: string | null = null, mouse_button: number = 1): boolean {\r\n    return bind.BeginPopupContextVoid(str_id, mouse_button);\r\n}\r\n// IMGUI_API void          EndPopup();\r\nexport function EndPopup(): void { bind.EndPopup(); }\r\n// IMGUI_API bool          IsPopupOpen(const char* str_id);                                    // return true if the popup is open\r\nexport function IsPopupOpen(str_id: string): boolean { return bind.IsPopupOpen(str_id); }\r\n// IMGUI_API void          CloseCurrentPopup();                                                // close the popup we have begin-ed into. clicking on a MenuItem or Selectable automatically close the current popup.\r\nexport function CloseCurrentPopup(): void { bind.CloseCurrentPopup(); }\r\n\r\n// Tab Bars, Tabs\r\n// [BETA API] API may evolve!\r\n// IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar\r\nexport function BeginTabBar(str_id: string, flags: ImGuiTabBarFlags = 0): boolean { return bind.BeginTabBar(str_id, flags); }\r\n// IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!\r\nexport function EndTabBar(): void { bind.EndTabBar(); }\r\n// IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0);// create a Tab. Returns true if the Tab is selected.\r\nexport function BeginTabItem(label: string, p_open: Bind.ImScalar<boolean> | Bind.ImAccess<boolean> | null = null, flags: ImGuiTabItemFlags = 0): boolean {\r\n    // return bind.BeginTabItem(label, p_open, flags);\r\n    if (p_open === null) {\r\n        return bind.BeginTabItem(label, null, flags);\r\n    } else if (Array.isArray(p_open)) {\r\n        return bind.BeginTabItem(label, p_open, flags);\r\n    } else {\r\n        const ref_open: Bind.ImScalar<boolean> = [ p_open() ];\r\n        const ret = bind.BeginTabItem(label, ref_open, flags);\r\n        p_open(ref_open[0]);\r\n        return ret;\r\n    }\r\n}\r\n// IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!\r\nexport function EndTabItem(): void { bind.EndTabItem(); }\r\n// IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.\r\nexport function SetTabItemClosed(tab_or_docked_window_label: string): void { bind.SetTabItemClosed(tab_or_docked_window_label); }\r\n\r\n// Logging/Capture: all text output from interface is captured to tty/file/clipboard. By default, tree nodes are automatically opened during logging.\r\n// IMGUI_API void          LogToTTY(int max_depth = -1);                                       // start logging to tty\r\nexport function LogToTTY(max_depth: number = -1): void {\r\n    bind.LogToTTY(max_depth);\r\n}\r\n// IMGUI_API void          LogToFile(int max_depth = -1, const char* filename = NULL);         // start logging to file\r\nexport function LogToFile(max_depth: number = -1, filename: string | null = null): void {\r\n    bind.LogToFile(max_depth, filename);\r\n}\r\n// IMGUI_API void          LogToClipboard(int max_depth = -1);                                 // start logging to OS clipboard\r\nexport function LogToClipboard(max_depth: number = -1): void {\r\n    bind.LogToClipboard(max_depth);\r\n}\r\n// IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)\r\nexport function LogFinish(): void { bind.LogFinish(); }\r\n// IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard\r\nexport function LogButtons(): void { bind.LogButtons(); }\r\n// IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)\r\nexport function LogText(fmt: string): void {\r\n    bind.LogText(fmt);\r\n}\r\n\r\nconst _ImGui_DragDropPayload_data: {[key: string]: any} = {};\r\n// Drag and Drop\r\n// [BETA API] Missing Demo code. API may evolve.\r\n// IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()\r\nexport function BeginDragDropSource(flags: ImGuiDragDropFlags = 0): boolean {\r\n    return bind.BeginDragDropSource(flags);\r\n}\r\n// IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t size, ImGuiCond cond = 0);// type is a user defined string of maximum 8 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.\r\nexport function SetDragDropPayload<T>(type: string, data: T, cond: ImGuiCond = 0): boolean {\r\n    _ImGui_DragDropPayload_data[type] = data;\r\n    return bind.SetDragDropPayload(type, data, 0, cond);\r\n}\r\n// IMGUI_API void          EndDragDropSource();\r\nexport function EndDragDropSource(): void {\r\n    bind.EndDragDropSource();\r\n}\r\n// IMGUI_API bool          BeginDragDropTarget();                                                                  // call after submitting an item that may receive an item. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()\r\nexport function BeginDragDropTarget(): boolean {\r\n    return bind.BeginDragDropTarget();\r\n}\r\n// IMGUI_API const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);            // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.\r\nexport function AcceptDragDropPayload<T>(type: string, flags: ImGuiDragDropFlags = 0): ImGuiPayload<T> | null {\r\n    const data: T = _ImGui_DragDropPayload_data[type];\r\n    return bind.AcceptDragDropPayload(type, flags) ? { Data: data } : null;\r\n}\r\n// IMGUI_API void          EndDragDropTarget();\r\nexport function EndDragDropTarget(): void {\r\n    bind.EndDragDropTarget();\r\n}\r\n\r\n// Clipping\r\n// IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);\r\nexport function PushClipRect(clip_rect_min: Readonly<Bind.interface_ImVec2>, clip_rect_max: Readonly<Bind.interface_ImVec2>, intersect_with_current_clip_rect: boolean): void {\r\n    bind.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);\r\n}\r\n// IMGUI_API void          PopClipRect();\r\nexport function PopClipRect(): void {\r\n    bind.PopClipRect();\r\n}\r\n\r\n// Focus\r\n// (FIXME: Those functions will be reworked after we merge the navigation branch + have a pass at focusing/tabbing features.)\r\n// (Prefer using \"SetItemDefaultFocus()\" over \"if (IsWindowAppearing()) SetScrollHere()\" when applicable, to make your code more forward compatible when navigation branch is merged)\r\n// IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window (WIP navigation branch only). Pleaase use instead of SetScrollHere().\r\nexport function SetItemDefaultFocus(): void { bind.SetItemDefaultFocus(); }\r\n// IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.\r\nexport function SetKeyboardFocusHere(offset: number = 0): void {\r\n    bind.SetKeyboardFocusHere(offset);\r\n}\r\n\r\n// Utilities\r\n// IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.\r\nexport function IsItemHovered(flags: ImGuiHoveredFlags = 0): boolean {\r\n    return bind.IsItemHovered(flags);\r\n}\r\n// IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited- items that don't interact will always return false)\r\nexport function IsItemActive(): boolean { return bind.IsItemActive(); }\r\n// IMGUI_API bool          IsItemEdited();                                                     // is the last item active? (e.g. button being held, text field being edited- items that don't interact will always return false)\r\nexport function IsItemEdited(): boolean { return bind.IsItemEdited(); }\r\n// IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?\r\nexport function IsItemFocused(): boolean { return bind.IsItemFocused(); }\r\n// IMGUI_API bool          IsItemClicked(int mouse_button = 0);                                // is the last item clicked? (e.g. button/node just clicked on)\r\nexport function IsItemClicked(mouse_button: number = 0): boolean {\r\n    return bind.IsItemClicked(mouse_button);\r\n}\r\n// IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (aka not out of sight due to clipping/scrolling.)\r\nexport function IsItemVisible(): boolean { return bind.IsItemVisible(); }\r\n// IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).\r\nexport function IsItemActivated(): boolean { return bind.IsItemActivated(); }\r\n// IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.\r\nexport function IsItemDeactivated(): boolean { return bind.IsItemDeactivated(); }\r\n// IMGUI_API bool          IsItemDeactivatedAfterEdit();                                     // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).\r\nexport function IsItemDeactivatedAfterEdit(): boolean { return bind.IsItemDeactivatedAfterEdit(); }\r\n// IMGUI_API bool          IsAnyItemHovered();\r\nexport function IsAnyItemHovered(): boolean { return bind.IsAnyItemHovered(); }\r\n// IMGUI_API bool          IsAnyItemActive();\r\nexport function IsAnyItemActive(): boolean { return bind.IsAnyItemActive(); }\r\n// IMGUI_API bool          IsAnyItemFocused();\r\nexport function IsAnyItemFocused(): boolean { return bind.IsAnyItemFocused(); }\r\n// IMGUI_API ImVec2        GetItemRectMin();                                                   // get bounding rectangle of last item, in screen space\r\nexport function GetItemRectMin(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetItemRectMin(out);\r\n}\r\n// IMGUI_API ImVec2        GetItemRectMax();                                                   // \"\r\nexport function GetItemRectMax(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetItemRectMax(out);\r\n}\r\n// IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item, in screen space\r\nexport function GetItemRectSize(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetItemRectSize(out);\r\n}\r\n// IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.\r\nexport function SetItemAllowOverlap(): void { bind.SetItemAllowOverlap(); }\r\n// IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags = 0);                       // is current window focused? or its root/child, depending on flags. see flags for options.\r\nexport function IsWindowFocused(flags: ImGuiFocusedFlags = 0): boolean {\r\n    return bind.IsWindowFocused(flags);\r\n}\r\n// IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags = 0);                       // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options.\r\nexport function IsWindowHovered(flags: ImGuiHoveredFlags = 0): boolean {\r\n    return bind.IsWindowHovered(flags);\r\n}\r\n// IMGUI_API bool          IsRectVisible(const ImVec2& size);                                  // test if rectangle (of given size, starting from cursor position) is visible / not clipped.\r\n// IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);      // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.\r\nexport function IsRectVisible(size: Readonly<Bind.interface_ImVec2>): boolean;\r\nexport function IsRectVisible(rect_min: Readonly<Bind.interface_ImVec2>, rect_max: Readonly<Bind.interface_ImVec2>): boolean;\r\nexport function IsRectVisible(...args: any[]): boolean {\r\n    if (args.length === 1) {\r\n        const size: Readonly<Bind.interface_ImVec2> = args[0];\r\n        return bind.IsRectVisible_A(size);\r\n    } else {\r\n        const rect_min: Readonly<Bind.interface_ImVec2> = args[0];\r\n        const rect_max: Readonly<Bind.interface_ImVec2> = args[1];\r\n        return bind.IsRectVisible_B(rect_min, rect_max);\r\n    }\r\n}\r\n// IMGUI_API float         GetTime();\r\nexport function GetTime(): number { return bind.GetTime(); }\r\n// IMGUI_API int           GetFrameCount();\r\nexport function GetFrameCount(): number { return bind.GetFrameCount(); }\r\nexport function GetBackgroundDrawList(): ImDrawList {\r\n    return new ImDrawList(bind.GetBackgroundDrawList());\r\n}\r\nexport function GetForegroundDrawList(): ImDrawList {\r\n    return new ImDrawList(bind.GetForegroundDrawList());\r\n}\r\n// IMGUI_API ImDrawListSharedData* GetDrawListSharedData();\r\nexport function GetDrawListSharedData(): ImDrawListSharedData {\r\n    return new ImDrawListSharedData(bind.GetDrawListSharedData());\r\n}\r\n// IMGUI_API const char*   GetStyleColorName(ImGuiCol idx);\r\nexport function GetStyleColorName(idx: ImGuiCol): string { return bind.GetStyleColorName(idx); }\r\n// IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);\r\nexport function CalcTextSize(text: string, text_end: number | null = null, hide_text_after_double_hash: boolean = false, wrap_width: number = -1, out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.CalcTextSize(text_end !== null ? text.substring(0, text_end) : text, hide_text_after_double_hash, wrap_width, out);\r\n}\r\n// IMGUI_API void          CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);    // calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.\r\nexport function CalcListClipping(items_count: number, items_height: number, out_items_display_start: Bind.ImScalar<number>, out_items_display_end: Bind.ImScalar<number>): void {\r\n    return bind.CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end);\r\n}\r\n\r\n// IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags = 0);    // helper to create a child window / scrolling region that looks like a normal widget frame\r\nexport function BeginChildFrame(id: Bind.ImGuiID, size: Readonly<Bind.interface_ImVec2>, extra_flags: ImGuiWindowFlags = 0): boolean {\r\n    return bind.BeginChildFrame(id, size, extra_flags);\r\n}\r\n// IMGUI_API void          EndChildFrame();\r\nexport function EndChildFrame(): void { bind.EndChildFrame(); }\r\n\r\n// IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);\r\nexport function ColorConvertU32ToFloat4(in_: Bind.ImU32, out: Bind.interface_ImVec4 = new ImVec4()): typeof out {\r\n    return bind.ColorConvertU32ToFloat4(in_, out);\r\n}\r\n// IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);\r\nexport function ColorConvertFloat4ToU32(in_: Readonly<Bind.interface_ImVec4>): Bind.ImU32 {\r\n    return bind.ColorConvertFloat4ToU32(in_);\r\n}\r\n// IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);\r\nexport function ColorConvertRGBtoHSV(r: number, g: number, b: number, out_h: Bind.ImScalar<number>, out_s: Bind.ImScalar<number>, out_v: Bind.ImScalar<number>): void { bind.ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }\r\n// IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);\r\nexport function ColorConvertHSVtoRGB(h: number, s: number, v: number, out_r: Bind.ImScalar<number>, out_g: Bind.ImScalar<number>, out_b: Bind.ImScalar<number>): void { bind.ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }\r\n\r\n// Inputs\r\n// IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]\r\nexport function GetKeyIndex(imgui_key: ImGuiKey): number {\r\n    return bind.GetKeyIndex(imgui_key);\r\n}\r\n// IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index]. note that imgui doesn't know the semantic of each entry of io.KeyDown[]. Use your own indices/enums according to how your backend/engine stored them into KeyDown[]!\r\nexport function IsKeyDown(user_key_index: number): boolean {\r\n    return bind.IsKeyDown(user_key_index);\r\n}\r\n// IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down). if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate\r\nexport function IsKeyPressed(user_key_index: number, repeat: boolean = true): boolean {\r\n    return bind.IsKeyPressed(user_key_index, repeat);\r\n}\r\n// IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)..\r\nexport function IsKeyReleased(user_key_index: number): boolean {\r\n    return bind.IsKeyReleased(user_key_index);\r\n}\r\n// IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate\r\nexport function GetKeyPressedAmount(user_key_index: number, repeat_delay: number, rate: number): number {\r\n    return bind.GetKeyPressedAmount(user_key_index, repeat_delay, rate);\r\n}\r\n// IMGUI_API bool          IsMouseDown(int button);                                            // is mouse button held\r\nexport function IsMouseDown(button: number): boolean {\r\n    return bind.IsMouseDown(button);\r\n}\r\n// IMGUI_API bool          IsMouseClicked(int button, bool repeat = false);                    // did mouse button clicked (went from !Down to Down)\r\nexport function IsMouseClicked(button: number, repeat: boolean = false): boolean {\r\n    return bind.IsMouseClicked(button, repeat);\r\n}\r\n// IMGUI_API bool          IsMouseDoubleClicked(int button);                                   // did mouse button double-clicked. a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.\r\nexport function IsMouseDoubleClicked(button: number): boolean {\r\n    return bind.IsMouseDoubleClicked(button);\r\n}\r\n// IMGUI_API bool          IsMouseReleased(int button);                                        // did mouse button released (went from Down to !Down)\r\nexport function IsMouseReleased(button: number): boolean {\r\n    return bind.IsMouseReleased(button);\r\n}\r\n// IMGUI_API bool          IsMouseDragging(int button = 0, float lock_threshold = -1.0f);      // is mouse dragging. if lock_threshold < -1.0f uses io.MouseDraggingThreshold\r\nexport function IsMouseDragging(button: number = 0, lock_threshold: number = -1.0): boolean {\r\n    return bind.IsMouseDragging(button, lock_threshold);\r\n}\r\n// IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);  // is mouse hovering given bounding rect (in screen space). clipped by current clipping settings. disregarding of consideration of focus/window ordering/blocked by a popup.\r\nexport function IsMouseHoveringRect(r_min: Readonly<Bind.interface_ImVec2>, r_max: Readonly<Bind.interface_ImVec2>, clip: boolean = true): boolean {\r\n    return bind.IsMouseHoveringRect(r_min, r_max, clip);\r\n}\r\n// IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    //\r\nexport function IsMousePosValid(mouse_pos: Readonly<Bind.interface_ImVec2> | null = null): boolean {\r\n    return bind.IsMousePosValid(mouse_pos);\r\n}\r\n// IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls\r\nexport function GetMousePos(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetMousePos(out);\r\n}\r\n// IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve backup of mouse positioning at the time of opening popup we have BeginPopup() into\r\nexport function GetMousePosOnOpeningCurrentPopup(out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetMousePosOnOpeningCurrentPopup(out);\r\n}\r\n// IMGUI_API ImVec2        GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f);    // dragging amount since clicking. if lock_threshold < -1.0f uses io.MouseDraggingThreshold\r\nexport function GetMouseDragDelta(button: number = 0, lock_threshold: number = -1.0, out: Bind.interface_ImVec2 = new ImVec2()): typeof out {\r\n    return bind.GetMouseDragDelta(button, lock_threshold, out);\r\n}\r\n// IMGUI_API void          ResetMouseDragDelta(int button = 0);                                //\r\nexport function ResetMouseDragDelta(button: number = 0): void {\r\n    bind.ResetMouseDragDelta(button);\r\n}\r\n// IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you\r\nexport function GetMouseCursor(): ImGuiMouseCursor { return bind.GetMouseCursor(); }\r\n// IMGUI_API void          SetMouseCursor(ImGuiMouseCursor type);                              // set desired cursor type\r\nexport function SetMouseCursor(type: ImGuiMouseCursor): void { bind.SetMouseCursor(type); }\r\n// IMGUI_API void          CaptureKeyboardFromApp(bool capture = true);                        // manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application handle). e.g. force capture keyboard when your widget is being hovered.\r\nexport function CaptureKeyboardFromApp(capture: boolean = true) {\r\n    return bind.CaptureKeyboardFromApp(capture);\r\n}\r\n// IMGUI_API void          CaptureMouseFromApp(bool capture = true);                           // manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application handle).\r\nexport function CaptureMouseFromApp(capture: boolean = true): void {\r\n    bind.CaptureMouseFromApp(capture);\r\n}\r\n\r\n// Clipboard Utilities (also see the LogToClipboard() function to capture or output text data to the clipboard)\r\n// IMGUI_API const char*   GetClipboardText();\r\nexport function GetClipboardText(): string { return bind.GetClipboardText(); }\r\n// IMGUI_API void          SetClipboardText(const char* text);\r\nexport function SetClipboardText(text: string): void { bind.SetClipboardText(text); }\r\n\r\n// Settings/.Ini Utilities\r\n// The disk functions are automatically called if io.IniFilename != NULL (default is \"imgui.ini\").\r\n// Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.\r\n// IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).\r\nexport function LoadIniSettingsFromDisk(ini_filename: string): void { throw new Error(); } // TODO\r\n// IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.\r\nexport function LoadIniSettingsFromMemory(ini_data: string, ini_size: number = 0): void { bind.LoadIniSettingsFromMemory(ini_data); }\r\n// IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);\r\nexport function SaveIniSettingsToDisk(ini_filename: string): void { throw new Error(); } // TODO\r\n// IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.\r\nexport function SaveIniSettingsToMemory(out_ini_size: Bind.ImScalar<number> | null = null): string { return bind.SaveIniSettingsToMemory(); }\r\n\r\n// Memory Utilities\r\n// All those functions are not reliant on the current context.\r\n// If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again.\r\n// IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void(*free_func)(void* ptr, void* user_data), void* user_data = NULL);\r\nexport function SetAllocatorFunctions(alloc_func: (sz: number, user_data: any) => number, free_func: (ptr: number, user_data: any) => void, user_data: any = null): void {\r\n    bind.SetAllocatorFunctions(alloc_func, free_func, user_data);\r\n}\r\n// IMGUI_API void*         MemAlloc(size_t sz);\r\nexport function MemAlloc(sz: number): void { bind.MemAlloc(sz); }\r\n// IMGUI_API void          MemFree(void* ptr);\r\nexport function MemFree(ptr: any): void { bind.MemFree(ptr); }\r\n","import * as ImGui from \"../imgui\";\r\n\r\nlet clipboard_text: string = \"\";\r\n\r\nlet canvas: HTMLCanvasElement | null = null;\r\n\r\nexport let gl: WebGLRenderingContext | null = null;\r\nlet g_ShaderHandle: WebGLProgram | null = null;\r\nlet g_VertHandle: WebGLShader | null = null;\r\nlet g_FragHandle: WebGLShader | null = null;\r\nlet g_AttribLocationTex: WebGLUniformLocation | null = null;\r\nlet g_AttribLocationProjMtx: WebGLUniformLocation | null = null;\r\nlet g_AttribLocationPosition: GLint = -1;\r\nlet g_AttribLocationUV: GLint = -1;\r\nlet g_AttribLocationColor: GLint = -1;\r\nlet g_VboHandle: WebGLBuffer | null = null;\r\nlet g_ElementsHandle: WebGLBuffer | null = null;\r\nlet g_FontTexture: WebGLTexture | null = null;\r\n\r\nexport let ctx: CanvasRenderingContext2D | null = null;\r\n\r\nlet prev_time: number = 0;\r\n\r\nfunction document_on_copy(event: ClipboardEvent): void {\r\n    if (event.clipboardData) {\r\n        event.clipboardData.setData(\"text/plain\", clipboard_text);\r\n    }\r\n    // console.log(`${event.type}: \"${clipboard_text}\"`);\r\n    event.preventDefault();\r\n}\r\n\r\nfunction document_on_cut(event: ClipboardEvent): void {\r\n    if (event.clipboardData) {\r\n        event.clipboardData.setData(\"text/plain\", clipboard_text);\r\n    }\r\n    // console.log(`${event.type}: \"${clipboard_text}\"`);\r\n    event.preventDefault();\r\n}\r\n\r\nfunction document_on_paste(event: ClipboardEvent): void {\r\n    if (event.clipboardData) {\r\n        clipboard_text = event.clipboardData.getData(\"text/plain\");\r\n    }\r\n    // console.log(`${event.type}: \"${clipboard_text}\"`);\r\n    event.preventDefault();\r\n}\r\n\r\nfunction window_on_resize(): void {\r\n    if (canvas !== null) {\r\n        const devicePixelRatio: number = window.devicePixelRatio || 1;\r\n        canvas.width = Math.floor(canvas.scrollWidth * devicePixelRatio);\r\n        canvas.height = Math.floor(canvas.scrollHeight * devicePixelRatio);\r\n    }\r\n}\r\n\r\nfunction window_on_gamepadconnected(event: any /* GamepadEvent */): void {\r\n    console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n    event.gamepad.index, event.gamepad.id,\r\n    event.gamepad.buttons.length, event.gamepad.axes.length);\r\n}\r\n\r\nfunction window_on_gamepaddisconnected(event: any /* GamepadEvent */): void {\r\n    console.log(\"Gamepad disconnected at index %d: %s.\",\r\n    event.gamepad.index, event.gamepad.id);\r\n}\r\n\r\nfunction canvas_on_blur(event: FocusEvent): void {\r\n    const io = ImGui.GetIO();\r\n    io.KeyCtrl = false;\r\n    io.KeyShift = false;\r\n    io.KeyAlt = false;\r\n    io.KeySuper = false;\r\n    for (let i = 0; i < io.KeysDown.length; ++i) {\r\n        io.KeysDown[i] = false;\r\n    }\r\n    for (let i = 0; i < io.MouseDown.length; ++i) {\r\n        io.MouseDown[i] = false;\r\n    }\r\n}\r\n\r\nfunction canvas_on_keydown(event: KeyboardEvent): void {\r\n    // console.log(event.type, event.key, event.keyCode);\r\n    const io = ImGui.GetIO();\r\n    io.KeyCtrl = event.ctrlKey;\r\n    io.KeyShift = event.shiftKey;\r\n    io.KeyAlt = event.altKey;\r\n    io.KeySuper = event.metaKey;\r\n    ImGui.IM_ASSERT(event.keyCode >= 0 && event.keyCode < ImGui.IM_ARRAYSIZE(io.KeysDown));\r\n    io.KeysDown[event.keyCode] = true;\r\n    // forward to the keypress event\r\n    if (/*io.WantCaptureKeyboard ||*/ event.key === \"Tab\") {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nfunction canvas_on_keyup(event: KeyboardEvent): void  {\r\n    // console.log(event.type, event.key, event.keyCode);\r\n    const io = ImGui.GetIO();\r\n    io.KeyCtrl = event.ctrlKey;\r\n    io.KeyShift = event.shiftKey;\r\n    io.KeyAlt = event.altKey;\r\n    io.KeySuper = event.metaKey;\r\n    ImGui.IM_ASSERT(event.keyCode >= 0 && event.keyCode < ImGui.IM_ARRAYSIZE(io.KeysDown));\r\n    io.KeysDown[event.keyCode] = false;\r\n    if (io.WantCaptureKeyboard) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nfunction canvas_on_keypress(event: KeyboardEvent): void  {\r\n    // console.log(event.type, event.key, event.keyCode);\r\n    const io = ImGui.GetIO();\r\n    io.AddInputCharacter(event.charCode);\r\n    if (io.WantCaptureKeyboard) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nfunction canvas_on_pointermove(event: PointerEvent): void  {\r\n    const io = ImGui.GetIO();\r\n    io.MousePos.x = event.offsetX;\r\n    io.MousePos.y = event.offsetY;\r\n    if (io.WantCaptureMouse) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n// MouseEvent.button\r\n// A number representing a given button:\r\n// 0: Main button pressed, usually the left button or the un-initialized state\r\n// 1: Auxiliary button pressed, usually the wheel button or the middle button (if present)\r\n// 2: Secondary button pressed, usually the right button\r\n// 3: Fourth button, typically the Browser Back button\r\n// 4: Fifth button, typically the Browser Forward button\r\nconst mouse_button_map: number[] = [ 0, 2, 1, 3, 4 ];\r\n\r\nfunction canvas_on_pointerdown(event: PointerEvent): void  {\r\n    const io = ImGui.GetIO();\r\n    io.MousePos.x = event.offsetX;\r\n    io.MousePos.y = event.offsetY;\r\n    io.MouseDown[mouse_button_map[event.button]] = true;\r\n    // if (io.WantCaptureMouse) {\r\n    //     event.preventDefault();\r\n    // }\r\n}\r\nfunction canvas_on_contextmenu(event: Event): void  {\r\n    const io = ImGui.GetIO();\r\n    if (io.WantCaptureMouse) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nfunction canvas_on_pointerup(event: PointerEvent): void  {\r\n    const io = ImGui.GetIO();\r\n    io.MouseDown[mouse_button_map[event.button]] = false;\r\n    if (io.WantCaptureMouse) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nfunction canvas_on_wheel(event: WheelEvent): void  {\r\n    const io = ImGui.GetIO();\r\n    let scale: number = 1.0;\r\n    switch (event.deltaMode) {\r\n        case event.DOM_DELTA_PIXEL: scale = 0.01; break;\r\n        case event.DOM_DELTA_LINE: scale = 0.2; break;\r\n        case event.DOM_DELTA_PAGE: scale = 1.0; break;\r\n    }\r\n    io.MouseWheelH = event.deltaX * scale;\r\n    io.MouseWheel = -event.deltaY * scale; // Mouse wheel: 1 unit scrolls about 5 lines text.\r\n    if (io.WantCaptureMouse) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\nexport function Init(value: HTMLCanvasElement | WebGLRenderingContext | CanvasRenderingContext2D | null): void {\r\n    const io = ImGui.GetIO();\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        io.BackendPlatformName = \"imgui_impl_html5\";\r\n        ImGui.LoadIniSettingsFromMemory(window.localStorage.getItem(\"imgui.ini\") || \"\");\r\n    }\r\n\r\n    if (typeof(navigator) !== \"undefined\") {\r\n        io.ConfigMacOSXBehaviors = navigator.platform.match(/Mac/) !== null;\r\n    }\r\n\r\n    if (typeof(document) !== \"undefined\") {\r\n        document.body.addEventListener(\"copy\", document_on_copy);\r\n        document.body.addEventListener(\"cut\", document_on_cut);\r\n        document.body.addEventListener(\"paste\", document_on_paste);\r\n    }\r\n\r\n    io.SetClipboardTextFn = (user_data: any, text: string): void => {\r\n        clipboard_text = text;\r\n        // console.log(`set clipboard_text: \"${clipboard_text}\"`);\r\n        if (typeof navigator !== \"undefined\" && typeof (navigator as any).clipboard !== \"undefined\") {\r\n            // console.log(`clipboard.writeText: \"${clipboard_text}\"`);\r\n            (navigator as any).clipboard.writeText(clipboard_text).then((): void => {\r\n                // console.log(`clipboard.writeText: \"${clipboard_text}\" done.`);\r\n            });\r\n        }\r\n    };\r\n    io.GetClipboardTextFn = (user_data: any): string => {\r\n        // if (typeof navigator !== \"undefined\" && typeof (navigator as any).clipboard !== \"undefined\") {\r\n        //     console.log(`clipboard.readText: \"${clipboard_text}\"`);\r\n        //     (navigator as any).clipboard.readText().then((text: string): void => {\r\n        //         clipboard_text = text;\r\n        //         console.log(`clipboard.readText: \"${clipboard_text}\" done.`);\r\n        //     });\r\n        // }\r\n        // console.log(`get clipboard_text: \"${clipboard_text}\"`);\r\n        return clipboard_text;\r\n    };\r\n    io.ClipboardUserData = null;\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        window.addEventListener(\"resize\", window_on_resize);\r\n        window.addEventListener(\"gamepadconnected\", window_on_gamepadconnected);\r\n        window.addEventListener(\"gamepaddisconnected\", window_on_gamepaddisconnected);\r\n    }\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        if (value instanceof(HTMLCanvasElement)) {\r\n            value = value.getContext(\"webgl\", { alpha: false }) || value.getContext(\"2d\");\r\n        }\r\n        if (value instanceof(WebGLRenderingContext)) {\r\n            io.BackendRendererName = \"imgui_impl_webgl\";\r\n            canvas = value.canvas as HTMLCanvasElement;\r\n            gl = value;\r\n        }\r\n        if (value instanceof(CanvasRenderingContext2D)) {\r\n            io.BackendRendererName = \"imgui_impl_ctx2d\";\r\n            canvas = value.canvas;\r\n            ctx = value;\r\n        }\r\n    }\r\n\r\n    if (canvas !== null) {\r\n        window_on_resize();\r\n        canvas.style.touchAction = \"none\"; // Disable browser handling of all panning and zooming gestures.\r\n        canvas.addEventListener(\"blur\", canvas_on_blur);\r\n        canvas.addEventListener(\"keydown\", canvas_on_keydown);\r\n        canvas.addEventListener(\"keyup\", canvas_on_keyup);\r\n        canvas.addEventListener(\"keypress\", canvas_on_keypress);\r\n        canvas.addEventListener(\"pointermove\", canvas_on_pointermove);\r\n        canvas.addEventListener(\"pointerdown\", canvas_on_pointerdown);\r\n        canvas.addEventListener(\"contextmenu\", canvas_on_contextmenu);\r\n        canvas.addEventListener(\"pointerup\", canvas_on_pointerup);\r\n        canvas.addEventListener(\"wheel\", canvas_on_wheel);\r\n    }\r\n\r\n    // Setup back-end capabilities flags\r\n    io.BackendFlags |= ImGui.BackendFlags.HasMouseCursors;   // We can honor GetMouseCursor() values (optional)\r\n\r\n    // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.\r\n    io.KeyMap[ImGui.Key.Tab] = 9;\r\n    io.KeyMap[ImGui.Key.LeftArrow] = 37;\r\n    io.KeyMap[ImGui.Key.RightArrow] = 39;\r\n    io.KeyMap[ImGui.Key.UpArrow] = 38;\r\n    io.KeyMap[ImGui.Key.DownArrow] = 40;\r\n    io.KeyMap[ImGui.Key.PageUp] = 33;\r\n    io.KeyMap[ImGui.Key.PageDown] = 34;\r\n    io.KeyMap[ImGui.Key.Home] = 36;\r\n    io.KeyMap[ImGui.Key.End] = 35;\r\n    io.KeyMap[ImGui.Key.Insert] = 45;\r\n    io.KeyMap[ImGui.Key.Delete] = 46;\r\n    io.KeyMap[ImGui.Key.Backspace] = 8;\r\n    io.KeyMap[ImGui.Key.Space] = 32;\r\n    io.KeyMap[ImGui.Key.Enter] = 13;\r\n    io.KeyMap[ImGui.Key.Escape] = 27;\r\n    io.KeyMap[ImGui.Key.A] = 65;\r\n    io.KeyMap[ImGui.Key.C] = 67;\r\n    io.KeyMap[ImGui.Key.V] = 86;\r\n    io.KeyMap[ImGui.Key.X] = 88;\r\n    io.KeyMap[ImGui.Key.Y] = 89;\r\n    io.KeyMap[ImGui.Key.Z] = 90;\r\n\r\n    CreateDeviceObjects();\r\n}\r\n\r\nexport function Shutdown(): void {\r\n    DestroyDeviceObjects();\r\n\r\n    if (canvas !== null) {\r\n        canvas.removeEventListener(\"blur\", canvas_on_blur);\r\n        canvas.removeEventListener(\"keydown\", canvas_on_keydown);\r\n        canvas.removeEventListener(\"keyup\", canvas_on_keyup);\r\n        canvas.removeEventListener(\"keypress\", canvas_on_keypress);\r\n        canvas.removeEventListener(\"pointermove\", canvas_on_pointermove);\r\n        canvas.removeEventListener(\"pointerdown\", canvas_on_pointerdown);\r\n        canvas.removeEventListener(\"contextmenu\", canvas_on_contextmenu);\r\n        canvas.removeEventListener(\"pointerup\", canvas_on_pointerup);\r\n        canvas.removeEventListener(\"wheel\", canvas_on_wheel);\r\n    }\r\n\r\n    gl = null;\r\n    ctx = null;\r\n    canvas = null;\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        window.removeEventListener(\"resize\", window_on_resize);\r\n        window.removeEventListener(\"gamepadconnected\", window_on_gamepadconnected);\r\n        window.removeEventListener(\"gamepaddisconnected\", window_on_gamepaddisconnected);\r\n    }\r\n\r\n    if (typeof(document) !== \"undefined\") {\r\n        document.body.removeEventListener(\"copy\", document_on_copy);\r\n        document.body.removeEventListener(\"cut\", document_on_cut);\r\n        document.body.removeEventListener(\"paste\", document_on_paste);\r\n    }\r\n}\r\n\r\nexport function NewFrame(time: number): void {\r\n    const io = ImGui.GetIO();\r\n\r\n    if (io.WantSaveIniSettings) {\r\n        io.WantSaveIniSettings = false;\r\n        if (typeof(window) !== \"undefined\") {\r\n            window.localStorage.setItem(\"imgui.ini\", ImGui.SaveIniSettingsToMemory());\r\n        }\r\n    }\r\n\r\n    const w: number = canvas && canvas.scrollWidth || 640;\r\n    const h: number = canvas && canvas.scrollHeight || 480;\r\n    const display_w: number = gl && gl.drawingBufferWidth || w;\r\n    const display_h: number = gl && gl.drawingBufferHeight || h;\r\n    io.DisplaySize.x = w;\r\n    io.DisplaySize.y = h;\r\n    io.DisplayFramebufferScale.x = w > 0 ? (display_w / w) : 0;\r\n    io.DisplayFramebufferScale.y = h > 0 ? (display_h / h) : 0;\r\n\r\n    const dt: number = time - prev_time;\r\n    prev_time = time;\r\n    io.DeltaTime = dt / 1000;\r\n\r\n    if (io.WantSetMousePos) {\r\n        console.log(\"TODO: MousePos\", io.MousePos.x, io.MousePos.y);\r\n    }\r\n\r\n    if (typeof(document) !== \"undefined\") {\r\n        if (io.MouseDrawCursor) {\r\n            document.body.style.cursor = \"none\";\r\n        } else {\r\n            switch (ImGui.GetMouseCursor()) {\r\n                case ImGui.MouseCursor.None: document.body.style.cursor = \"none\"; break;\r\n                default: case ImGui.MouseCursor.Arrow: document.body.style.cursor = \"default\"; break;\r\n                case ImGui.MouseCursor.TextInput: document.body.style.cursor = \"text\"; break;         // When hovering over InputText, etc.\r\n                case ImGui.MouseCursor.ResizeAll: document.body.style.cursor = \"move\"; break;         // Unused\r\n                case ImGui.MouseCursor.ResizeNS: document.body.style.cursor = \"ns-resize\"; break;     // When hovering over an horizontal border\r\n                case ImGui.MouseCursor.ResizeEW: document.body.style.cursor = \"ew-resize\"; break;     // When hovering over a vertical border or a column\r\n                case ImGui.MouseCursor.ResizeNESW: document.body.style.cursor = \"nesw-resize\"; break; // When hovering over the bottom-left corner of a window\r\n                case ImGui.MouseCursor.ResizeNWSE: document.body.style.cursor = \"nwse-resize\"; break; // When hovering over the bottom-right corner of a window\r\n                case ImGui.MouseCursor.Hand: document.body.style.cursor = \"move\"; break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gamepad navigation mapping [BETA]\r\n    for (let i = 0; i < io.NavInputs.length; ++i) {\r\n        io.NavInputs[i] = 0.0;\r\n    }\r\n    if (io.ConfigFlags & ImGui.ConfigFlags.NavEnableGamepad) {\r\n        // Update gamepad inputs\r\n        const gamepads: (Gamepad | null)[] = (typeof(navigator) !== \"undefined\" && typeof(navigator.getGamepads) === \"function\") ? navigator.getGamepads() : [];\r\n        for (let i = 0; i < gamepads.length; ++i) {\r\n            const gamepad: Gamepad | null = gamepads[i];\r\n            if (!gamepad) { continue; }\r\n            const buttons_count: number = gamepad.buttons.length;\r\n            const axes_count: number = gamepad.axes.length;\r\n            function MAP_BUTTON(NAV_NO: number, BUTTON_NO: number): void {\r\n                if (!gamepad) { return; }\r\n                if (buttons_count > BUTTON_NO && gamepad.buttons[BUTTON_NO].pressed)\r\n                    io.NavInputs[NAV_NO] = 1.0;\r\n            }\r\n            function MAP_ANALOG(NAV_NO: number, AXIS_NO: number, V0: number, V1: number): void {\r\n                if (!gamepad) { return; }\r\n                let v: number = (axes_count > AXIS_NO) ? gamepad.axes[AXIS_NO] : V0;\r\n                v = (v - V0) / (V1 - V0);\r\n                if (v > 1.0) v = 1.0;\r\n                if (io.NavInputs[NAV_NO] < v) io.NavInputs[NAV_NO] = v;\r\n            }\r\n            // TODO: map input based on vendor and product id\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id\r\n            const match: RegExpMatchArray | null = gamepad.id.match(/^([0-9a-f]{4})-([0-9a-f]{4})-.*$/);\r\n            const match_chrome: RegExpMatchArray | null = gamepad.id.match(/^.*\\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\\).*$/);\r\n            const vendor: string = (match && match[1]) || (match_chrome && match_chrome[1]) || \"0000\";\r\n            const product: string = (match && match[2]) || (match_chrome && match_chrome[2]) || \"0000\";\r\n            switch (vendor + product) {\r\n                case \"046dc216\": // Logitech Logitech Dual Action (Vendor: 046d Product: c216)\r\n                MAP_BUTTON(ImGui.NavInput.Activate,    1); // Cross / A\r\n                MAP_BUTTON(ImGui.NavInput.Cancel,      2); // Circle / B\r\n                MAP_BUTTON(ImGui.NavInput.Menu,        0); // Square / X\r\n                MAP_BUTTON(ImGui.NavInput.Input,       3); // Triangle / Y\r\n                MAP_ANALOG(ImGui.NavInput.DpadLeft,    4, -0.3, -0.9); // D-Pad Left\r\n                MAP_ANALOG(ImGui.NavInput.DpadRight,   4, +0.3, +0.9); // D-Pad Right\r\n                MAP_ANALOG(ImGui.NavInput.DpadUp,      5, -0.3, -0.9); // D-Pad Up\r\n                MAP_ANALOG(ImGui.NavInput.DpadDown,    5, +0.3, +0.9); // D-Pad Down\r\n                MAP_BUTTON(ImGui.NavInput.FocusPrev,   4); // L1 / LB\r\n                MAP_BUTTON(ImGui.NavInput.FocusNext,   5); // R1 / RB\r\n                MAP_BUTTON(ImGui.NavInput.TweakSlow,   6); // L2 / LT\r\n                MAP_BUTTON(ImGui.NavInput.TweakFast,   7); // R2 / RT\r\n                MAP_ANALOG(ImGui.NavInput.LStickLeft,  0, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickRight, 0, +0.3, +0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickUp,    1, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickDown,  1, +0.3, +0.9);\r\n                break;\r\n                case \"046dc21d\": // Logitech Gamepad F310 (STANDARD GAMEPAD Vendor: 046d Product: c21d)\r\n                MAP_BUTTON(ImGui.NavInput.Activate,    0); // Cross / A\r\n                MAP_BUTTON(ImGui.NavInput.Cancel,      1); // Circle / B\r\n                MAP_BUTTON(ImGui.NavInput.Menu,        2); // Square / X\r\n                MAP_BUTTON(ImGui.NavInput.Input,       3); // Triangle / Y\r\n                MAP_BUTTON(ImGui.NavInput.DpadLeft,    14); // D-Pad Left\r\n                MAP_BUTTON(ImGui.NavInput.DpadRight,   15); // D-Pad Right\r\n                MAP_BUTTON(ImGui.NavInput.DpadUp,      12); // D-Pad Up\r\n                MAP_BUTTON(ImGui.NavInput.DpadDown,    13); // D-Pad Down\r\n                MAP_BUTTON(ImGui.NavInput.FocusPrev,   4); // L1 / LB\r\n                MAP_BUTTON(ImGui.NavInput.FocusNext,   5); // R1 / RB\r\n                MAP_ANALOG(ImGui.NavInput.TweakSlow,   6, +0.3, +0.9); // L2 / LT\r\n                MAP_ANALOG(ImGui.NavInput.TweakFast,   7, +0.3, +0.9); // R2 / RT\r\n                MAP_ANALOG(ImGui.NavInput.LStickLeft,  0, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickRight, 0, +0.3, +0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickUp,    1, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickDown,  1, +0.3, +0.9);\r\n                break;\r\n                case \"2dc86001\": // 8Bitdo SN30 Pro  8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6001)\r\n                case \"2dc86101\": // 8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6101)\r\n                MAP_BUTTON(ImGui.NavInput.Activate,    1); // Cross / A\r\n                MAP_BUTTON(ImGui.NavInput.Cancel,      0); // Circle / B\r\n                MAP_BUTTON(ImGui.NavInput.Menu,        4); // Square / X\r\n                MAP_BUTTON(ImGui.NavInput.Input,       3); // Triangle / Y\r\n                MAP_ANALOG(ImGui.NavInput.DpadLeft,    6, -0.3, -0.9); // D-Pad Left\r\n                MAP_ANALOG(ImGui.NavInput.DpadRight,   6, +0.3, +0.9); // D-Pad Right\r\n                MAP_ANALOG(ImGui.NavInput.DpadUp,      7, -0.3, -0.9); // D-Pad Up\r\n                MAP_ANALOG(ImGui.NavInput.DpadDown,    7, +0.3, +0.9); // D-Pad Down\r\n                MAP_BUTTON(ImGui.NavInput.FocusPrev,   6); // L1 / LB\r\n                MAP_BUTTON(ImGui.NavInput.FocusNext,   7); // R1 / RB\r\n                MAP_BUTTON(ImGui.NavInput.TweakSlow,   8); // L2 / LT\r\n                MAP_BUTTON(ImGui.NavInput.TweakFast,   9); // R2 / RT\r\n                MAP_ANALOG(ImGui.NavInput.LStickLeft,  0, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickRight, 0, +0.3, +0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickUp,    1, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickDown,  1, +0.3, +0.9);\r\n                break;\r\n                default: // standard gamepad: https://w3c.github.io/gamepad/#remapping\r\n                MAP_BUTTON(ImGui.NavInput.Activate,    0); // Cross / A\r\n                MAP_BUTTON(ImGui.NavInput.Cancel,      1); // Circle / B\r\n                MAP_BUTTON(ImGui.NavInput.Menu,        2); // Square / X\r\n                MAP_BUTTON(ImGui.NavInput.Input,       3); // Triangle / Y\r\n                MAP_BUTTON(ImGui.NavInput.DpadLeft,    14); // D-Pad Left\r\n                MAP_BUTTON(ImGui.NavInput.DpadRight,   15); // D-Pad Right\r\n                MAP_BUTTON(ImGui.NavInput.DpadUp,      12); // D-Pad Up\r\n                MAP_BUTTON(ImGui.NavInput.DpadDown,    13); // D-Pad Down\r\n                MAP_BUTTON(ImGui.NavInput.FocusPrev,   4); // L1 / LB\r\n                MAP_BUTTON(ImGui.NavInput.FocusNext,   5); // R1 / RB\r\n                MAP_BUTTON(ImGui.NavInput.TweakSlow,   6); // L2 / LT\r\n                MAP_BUTTON(ImGui.NavInput.TweakFast,   7); // R2 / RT\r\n                MAP_ANALOG(ImGui.NavInput.LStickLeft,  0, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickRight, 0, +0.3, +0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickUp,    1, -0.3, -0.9);\r\n                MAP_ANALOG(ImGui.NavInput.LStickDown,  1, +0.3, +0.9);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function RenderDrawData(draw_data: ImGui.ImDrawData | null = ImGui.GetDrawData()): void {\r\n    const io = ImGui.GetIO();\r\n    if (draw_data === null) { throw new Error(); }\r\n\r\n    gl || ctx || console.log(draw_data);\r\n\r\n    // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)\r\n    const fb_width: number = io.DisplaySize.x * io.DisplayFramebufferScale.x;\r\n    const fb_height: number = io.DisplaySize.y * io.DisplayFramebufferScale.y;\r\n    if (fb_width === 0 || fb_height === 0) {\r\n        return;\r\n    }\r\n    draw_data.ScaleClipRects(io.DisplayFramebufferScale);\r\n\r\n    // Backup GL state\r\n    const last_active_texture: GLenum | null = gl && gl.getParameter(gl.ACTIVE_TEXTURE) || null;\r\n    const last_program: WebGLProgram | null = gl && gl.getParameter(gl.CURRENT_PROGRAM) || null;\r\n    const last_texture: WebGLTexture | null = gl && gl.getParameter(gl.TEXTURE_BINDING_2D) || null;\r\n    const last_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ARRAY_BUFFER_BINDING) || null;\r\n    const last_element_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING) || null;\r\n    // GLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);\r\n    const last_viewport: Int32Array | null = gl && gl.getParameter(gl.VIEWPORT) || null;\r\n    const last_scissor_box: Int32Array | null = gl && gl.getParameter(gl.SCISSOR_BOX) || null;\r\n    const last_blend_src_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_RGB) || null;\r\n    const last_blend_dst_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_RGB) || null;\r\n    const last_blend_src_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_ALPHA) || null;\r\n    const last_blend_dst_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_ALPHA) || null;\r\n    const last_blend_equation_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_RGB) || null;\r\n    const last_blend_equation_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_ALPHA) || null;\r\n    const last_enable_blend: GLboolean | null = gl && gl.getParameter(gl.BLEND) || null;\r\n    const last_enable_cull_face: GLboolean | null = gl && gl.getParameter(gl.CULL_FACE) || null;\r\n    const last_enable_depth_test: GLboolean | null = gl && gl.getParameter(gl.DEPTH_TEST) || null;\r\n    const last_enable_scissor_test: GLboolean | null = gl && gl.getParameter(gl.SCISSOR_TEST) || null;\r\n\r\n    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill\r\n    gl && gl.enable(gl.BLEND);\r\n    gl && gl.blendEquation(gl.FUNC_ADD);\r\n    gl && gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl && gl.disable(gl.CULL_FACE);\r\n    gl && gl.disable(gl.DEPTH_TEST);\r\n    gl && gl.enable(gl.SCISSOR_TEST);\r\n    // glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\r\n\r\n    // Setup viewport, orthographic projection matrix\r\n    // Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayMin is typically (0,0) for single viewport apps.\r\n    gl && gl.viewport(0, 0, fb_width, fb_height);\r\n    const L: number = draw_data.DisplayPos.x;\r\n    const R: number = draw_data.DisplayPos.x + draw_data.DisplaySize.x;\r\n    const T: number = draw_data.DisplayPos.y;\r\n    const B: number = draw_data.DisplayPos.y + draw_data.DisplaySize.y;\r\n    const ortho_projection: Float32Array = new Float32Array([\r\n        2.0 / (R - L),     0.0,                0.0, 0.0,\r\n        0.0,               2.0 / (T - B),      0.0, 0.0,\r\n        0.0,               0.0,               -1.0, 0.0,\r\n        (R + L) / (L - R), (T + B) / (B - T),  0.0, 1.0,\r\n    ]);\r\n    gl && gl.useProgram(g_ShaderHandle);\r\n    gl && gl.uniform1i(g_AttribLocationTex, 0);\r\n    gl && g_AttribLocationProjMtx && gl.uniformMatrix4fv(g_AttribLocationProjMtx, false, ortho_projection);\r\n\r\n    // Render command lists\r\n    gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);\r\n    gl && gl.enableVertexAttribArray(g_AttribLocationPosition);\r\n    gl && gl.enableVertexAttribArray(g_AttribLocationUV);\r\n    gl && gl.enableVertexAttribArray(g_AttribLocationColor);\r\n\r\n    gl && gl.vertexAttribPointer(g_AttribLocationPosition, 2, gl.FLOAT, false, ImGui.ImDrawVertSize, ImGui.ImDrawVertPosOffset);\r\n    gl && gl.vertexAttribPointer(g_AttribLocationUV, 2, gl.FLOAT, false, ImGui.ImDrawVertSize, ImGui.ImDrawVertUVOffset);\r\n    gl && gl.vertexAttribPointer(g_AttribLocationColor, 4, gl.UNSIGNED_BYTE, true, ImGui.ImDrawVertSize, ImGui.ImDrawVertColOffset);\r\n\r\n    // Draw\r\n    const pos = draw_data.DisplayPos;\r\n    const idx_buffer_type: GLenum = gl && ((ImGui.ImDrawIdxSize === 4) ? gl.UNSIGNED_INT : gl.UNSIGNED_SHORT) || 0;\r\n    draw_data.IterateDrawLists((draw_list: ImGui.ImDrawList): void => {\r\n        gl || ctx || console.log(draw_list);\r\n        gl || ctx || console.log(\"VtxBuffer.length\", draw_list.VtxBuffer.length);\r\n        gl || ctx || console.log(\"IdxBuffer.length\", draw_list.IdxBuffer.length);\r\n        \r\n        let idx_buffer_offset: number = 0;\r\n\r\n        gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);\r\n        gl && gl.bufferData(gl.ARRAY_BUFFER, draw_list.VtxBuffer, gl.STREAM_DRAW);\r\n        gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, g_ElementsHandle);\r\n        gl && gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, draw_list.IdxBuffer, gl.STREAM_DRAW);\r\n\r\n        draw_list.IterateDrawCmds((draw_cmd: ImGui.ImDrawCmd): void => {\r\n            gl || ctx || console.log(draw_cmd);\r\n            gl || ctx || console.log(\"ElemCount\", draw_cmd.ElemCount);\r\n            gl || ctx || console.log(\"ClipRect\", draw_cmd.ClipRect.x, fb_height - draw_cmd.ClipRect.w, draw_cmd.ClipRect.z - draw_cmd.ClipRect.x, draw_cmd.ClipRect.w - draw_cmd.ClipRect.y);\r\n            gl || ctx || console.log(\"TextureId\", draw_cmd.TextureId);\r\n            if (!gl && !ctx) {\r\n                console.log(\"i: pos.x pos.y uv.x uv.y col\");\r\n                for (let i = 0; i < Math.min(3, draw_cmd.ElemCount); ++i) {\r\n                    const view: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i * ImGui.ImDrawVertSize);\r\n                    console.log(`${i}: ${view.pos[0].toFixed(2)} ${view.pos[1].toFixed(2)} ${view.uv[0].toFixed(5)} ${view.uv[1].toFixed(5)} ${(\"00000000\" + view.col[0].toString(16)).substr(-8)}`);\r\n                }\r\n            }\r\n\r\n            if (draw_cmd.UserCallback !== null) {\r\n                // User callback (registered via ImDrawList::AddCallback)\r\n                draw_cmd.UserCallback(draw_list, draw_cmd);\r\n            } else {\r\n                const clip_rect = new ImGui.ImVec4(draw_cmd.ClipRect.x - pos.x, draw_cmd.ClipRect.y - pos.y, draw_cmd.ClipRect.z - pos.x, draw_cmd.ClipRect.w - pos.y);\r\n                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0 && clip_rect.w >= 0.0) {\r\n                    // Apply scissor/clipping rectangle\r\n                    gl && gl.scissor(clip_rect.x, fb_height - clip_rect.w, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);\r\n\r\n                    // Bind texture, Draw\r\n                    gl && gl.activeTexture(gl.TEXTURE0);\r\n                    gl && gl.bindTexture(gl.TEXTURE_2D, draw_cmd.TextureId);\r\n                    gl && gl.drawElements(gl.TRIANGLES, draw_cmd.ElemCount, idx_buffer_type, idx_buffer_offset);\r\n\r\n                    if (ctx) {\r\n                        ctx.save();\r\n                        ctx.beginPath();\r\n                        ctx.rect(clip_rect.x, clip_rect.y, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);\r\n                        ctx.clip();\r\n                        const idx = ImGui.ImDrawIdxSize === 4 ? \r\n                            new Uint32Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset) : \r\n                            new Uint16Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset);\r\n                        for (let i = 0; i < draw_cmd.ElemCount; i += 3) {\r\n                            const i0: number = idx[i + 0];\r\n                            const i1: number = idx[i + 1];\r\n                            const i2: number = idx[i + 2];\r\n                            const v0: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i0 * ImGui.ImDrawVertSize);\r\n                            const v1: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i1 * ImGui.ImDrawVertSize);\r\n                            const v2: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i2 * ImGui.ImDrawVertSize);\r\n                            const i3: number = idx[i + 3];\r\n                            const i4: number = idx[i + 4];\r\n                            const i5: number = idx[i + 5];\r\n                            const v3: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i3 * ImGui.ImDrawVertSize);\r\n                            const v4: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i4 * ImGui.ImDrawVertSize);\r\n                            const v5: ImGui.ImDrawVert = new ImGui.ImDrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i5 * ImGui.ImDrawVertSize);\r\n                            let quad = true;\r\n                            let minmin: ImGui.ImDrawVert = v0;\r\n                            let minmax: ImGui.ImDrawVert = v0;\r\n                            let maxmin: ImGui.ImDrawVert = v0;\r\n                            let maxmax: ImGui.ImDrawVert = v0;\r\n                            for (const v of [ v1, v2, v3, v4, v5 ]) {\r\n                                let found = false;\r\n                                if (v.pos[0] <= minmin.pos[0] && v.pos[1] <= minmin.pos[1]) { minmin = v; found = true; }\r\n                                if (v.pos[0] <= minmax.pos[0] && v.pos[1] >= minmax.pos[1]) { minmax = v; found = true; }\r\n                                if (v.pos[0] >= maxmin.pos[0] && v.pos[1] <= maxmin.pos[1]) { maxmin = v; found = true; }\r\n                                if (v.pos[0] >= maxmax.pos[0] && v.pos[1] >= maxmax.pos[1]) { maxmax = v; found = true; }\r\n                                if (!found) { quad = false; }\r\n                            }\r\n                            quad = quad && (minmin.pos[0] === minmax.pos[0]);\r\n                            quad = quad && (maxmin.pos[0] === maxmax.pos[0]);\r\n                            quad = quad && (minmin.pos[1] === maxmin.pos[1]);\r\n                            quad = quad && (minmax.pos[1] === maxmax.pos[1]);\r\n                            if (quad) {\r\n                                if (minmin.uv[0] < 0.01 && minmin.uv[1] < 0.01) {\r\n                                    // one vertex color\r\n                                    ctx.beginPath();\r\n                                    ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);\r\n                                    ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;\r\n                                    ctx.fill();\r\n                                } else {\r\n                                    // no vertex color\r\n                                    const image = draw_cmd.TextureId as HTMLCanvasElement;\r\n                                    ctx.drawImage(image,\r\n                                        minmin.uv[0] * image.width, minmin.uv[1] * image.height,\r\n                                        (maxmax.uv[0] - minmin.uv[0]) * image.width, (maxmax.uv[1] - minmin.uv[1]) * image.height,\r\n                                        minmin.pos[0], minmin.pos[1], \r\n                                        maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);\r\n                                    // ctx.beginPath();\r\n                                    // ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);\r\n                                    // ctx.strokeStyle = \"yellow\";\r\n                                    // ctx.stroke();\r\n                                }\r\n                                i += 3;\r\n                            } else {\r\n                                // one vertex color, no texture\r\n                                ctx.beginPath();\r\n                                ctx.moveTo(v0.pos[0], v0.pos[1]);\r\n                                ctx.lineTo(v1.pos[0], v1.pos[1]);\r\n                                ctx.lineTo(v2.pos[0], v2.pos[1]);\r\n                                ctx.closePath();\r\n                                ctx.fillStyle = `rgba(${v0.col[0] >> 0 & 0xff}, ${v0.col[0] >> 8 & 0xff}, ${v0.col[0] >> 16 & 0xff}, ${(v0.col[0] >> 24 & 0xff) / 0xff})`;\r\n                                ctx.fill();\r\n                            }\r\n                        }\r\n                        ctx.restore();\r\n                    }\r\n                }\r\n            }\r\n\r\n            idx_buffer_offset += draw_cmd.ElemCount * ImGui.ImDrawIdxSize;\r\n        });\r\n    });\r\n\r\n    // Restore modified GL state\r\n    gl && (last_program !== null) && gl.useProgram(last_program);\r\n    gl && (last_texture !== null) && gl.bindTexture(gl.TEXTURE_2D, last_texture);\r\n    gl && (last_active_texture !== null) && gl.activeTexture(last_active_texture);\r\n    gl && gl.disableVertexAttribArray(g_AttribLocationPosition);\r\n    gl && gl.disableVertexAttribArray(g_AttribLocationUV);\r\n    gl && gl.disableVertexAttribArray(g_AttribLocationColor);\r\n    gl && (last_array_buffer !== null) && gl.bindBuffer(gl.ARRAY_BUFFER, last_array_buffer);\r\n    gl && (last_element_array_buffer !== null) && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, last_element_array_buffer);\r\n    gl && (last_blend_equation_rgb !== null && last_blend_equation_alpha !== null) && gl.blendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);\r\n    gl && (last_blend_src_rgb !== null && last_blend_src_alpha !== null && last_blend_dst_rgb !== null && last_blend_dst_alpha !== null) && gl.blendFuncSeparate(last_blend_src_rgb, last_blend_src_alpha, last_blend_dst_rgb, last_blend_dst_alpha);\r\n    gl && (last_enable_blend ? gl.enable(gl.BLEND) : gl.disable(gl.BLEND));\r\n    gl && (last_enable_cull_face ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE));\r\n    gl && (last_enable_depth_test ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST));\r\n    gl && (last_enable_scissor_test ? gl.enable(gl.SCISSOR_TEST) : gl.disable(gl.SCISSOR_TEST));\r\n    // glPolygonMode(GL_FRONT_AND_BACK, (GLenum)last_polygon_mode[0]);\r\n    gl && (last_viewport !== null) && gl.viewport(last_viewport[0], last_viewport[1], last_viewport[2], last_viewport[3]);\r\n    gl && (last_scissor_box !== null) && gl.scissor(last_scissor_box[0], last_scissor_box[1], last_scissor_box[2], last_scissor_box[3]);\r\n}\r\n\r\nexport function CreateFontsTexture(): void {\r\n    const io = ImGui.GetIO();\r\n\r\n    // Backup GL state\r\n    const last_texture: WebGLTexture | null = gl && gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n\r\n    // Build texture atlas\r\n    // const width: number = 256;\r\n    // const height: number = 256;\r\n    // const pixels: Uint8Array = new Uint8Array(4 * width * height).fill(0xff);\r\n    const { width, height, pixels } = io.Fonts.GetTexDataAsRGBA32();   // Load as RGBA 32-bits (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.\r\n    // console.log(`font texture ${width} x ${height} @ ${pixels.length}`);\r\n\r\n    // Upload texture to graphics system\r\n    g_FontTexture = gl && gl.createTexture();\r\n    gl && gl.bindTexture(gl.TEXTURE_2D, g_FontTexture);\r\n    gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    // gl && gl.pixelStorei(gl.UNPACK_ROW_LENGTH); // WebGL2\r\n    gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n\r\n    // Store our identifier\r\n    io.Fonts.TexID = g_FontTexture || { foo: \"bar\" };\r\n    // console.log(\"font texture id\", g_FontTexture);\r\n\r\n    if (ctx) {\r\n        const image_canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n        image_canvas.width = width;\r\n        image_canvas.height = height;\r\n        const image_ctx = image_canvas.getContext(\"2d\");\r\n        if (image_ctx === null) { throw new Error(); }\r\n        const image_data = image_ctx.getImageData(0, 0, width, height);\r\n        image_data.data.set(pixels);\r\n        image_ctx.putImageData(image_data, 0, 0);\r\n        io.Fonts.TexID = image_canvas;\r\n    }\r\n\r\n    // Restore modified GL state\r\n    gl && last_texture && gl.bindTexture(gl.TEXTURE_2D, last_texture);\r\n}\r\n\r\nexport function DestroyFontsTexture(): void {\r\n    const io = ImGui.GetIO();\r\n    io.Fonts.TexID = null;\r\n    gl && gl.deleteTexture(g_FontTexture); g_FontTexture = null;\r\n}\r\n\r\nexport function CreateDeviceObjects(): void {\r\n    const vertex_shader: string[] = [\r\n        \"uniform mat4 ProjMtx;\",\r\n        \"attribute vec2 Position;\",\r\n        \"attribute vec2 UV;\",\r\n        \"attribute vec4 Color;\",\r\n        \"varying vec2 Frag_UV;\",\r\n        \"varying vec4 Frag_Color;\",\r\n        \"void main() {\",\r\n        \"\tFrag_UV = UV;\",\r\n        \"\tFrag_Color = Color;\",\r\n        \"\tgl_Position = ProjMtx * vec4(Position.xy,0,1);\",\r\n        \"}\",\r\n    ];\r\n\r\n    const fragment_shader: string[] = [\r\n        \"precision mediump float;\", // WebGL requires precision specifiers\r\n        \"uniform sampler2D Texture;\",\r\n        \"varying vec2 Frag_UV;\",\r\n        \"varying vec4 Frag_Color;\",\r\n        \"void main() {\",\r\n        \"\tgl_FragColor = Frag_Color * texture2D(Texture, Frag_UV);\",\r\n        \"}\",\r\n    ];\r\n\r\n    g_ShaderHandle = gl && gl.createProgram();\r\n    g_VertHandle = gl && gl.createShader(gl.VERTEX_SHADER);\r\n    g_FragHandle = gl && gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl && gl.shaderSource(g_VertHandle as WebGLShader, vertex_shader.join(\"\\n\"));\r\n    gl && gl.shaderSource(g_FragHandle as WebGLShader, fragment_shader.join(\"\\n\"));\r\n    gl && gl.compileShader(g_VertHandle as WebGLShader);\r\n    gl && gl.compileShader(g_FragHandle as WebGLShader);\r\n    gl && gl.attachShader(g_ShaderHandle as WebGLProgram, g_VertHandle as WebGLShader);\r\n    gl && gl.attachShader(g_ShaderHandle as WebGLProgram, g_FragHandle as WebGLShader);\r\n    gl && gl.linkProgram(g_ShaderHandle as WebGLProgram);\r\n\r\n    g_AttribLocationTex = gl && gl.getUniformLocation(g_ShaderHandle as WebGLProgram, \"Texture\");\r\n    g_AttribLocationProjMtx = gl && gl.getUniformLocation(g_ShaderHandle as WebGLProgram, \"ProjMtx\");\r\n    g_AttribLocationPosition = gl && gl.getAttribLocation(g_ShaderHandle as WebGLProgram, \"Position\") || 0;\r\n    g_AttribLocationUV = gl && gl.getAttribLocation(g_ShaderHandle as WebGLProgram, \"UV\") || 0;\r\n    g_AttribLocationColor = gl && gl.getAttribLocation(g_ShaderHandle as WebGLProgram, \"Color\") || 0;\r\n\r\n    g_VboHandle = gl && gl.createBuffer();\r\n    g_ElementsHandle = gl && gl.createBuffer();\r\n\r\n    CreateFontsTexture();\r\n}\r\n\r\nexport function DestroyDeviceObjects(): void {\r\n    DestroyFontsTexture();\r\n\r\n    gl && gl.deleteBuffer(g_VboHandle); g_VboHandle = null;\r\n    gl && gl.deleteBuffer(g_ElementsHandle); g_ElementsHandle = null;\r\n\r\n    g_AttribLocationTex = null;\r\n    g_AttribLocationProjMtx = null;\r\n    g_AttribLocationPosition = -1;\r\n    g_AttribLocationUV = -1;\r\n    g_AttribLocationColor = -1;\r\n\r\n    gl && gl.deleteProgram(g_ShaderHandle); g_ShaderHandle = null;\r\n    gl && gl.deleteShader(g_VertHandle); g_VertHandle = null;\r\n    gl && gl.deleteShader(g_FragHandle); g_FragHandle = null;\r\n}\r\n","// dear imgui, v1.71\r\n// (demo code)\r\n\r\n// Message to the person tempted to delete this file when integrating Dear ImGui into their code base:\r\n// Do NOT remove this file from your project! Think again! It is the most useful reference code that you and other coders\r\n// will want to refer to and call. Have the ImGui::ShowDemoWindow() function wired in an always-available debug menu of\r\n// your game/app! Removing this file from your project is hindering access to documentation for everyone in your team,\r\n// likely leading you to poorer usage of the library.\r\n// Everything in this file will be stripped out by the linker if you don't call ImGui::ShowDemoWindow().\r\n// If you want to link core Dear ImGui in your shipped builds but want an easy guarantee that the demo will not be linked,\r\n// you can setup your imconfig.h with #define IMGUI_DISABLE_DEMO_WINDOWS and those functions will be empty.\r\n// In other situation, whenever you have Dear ImGui available you probably want this to be available for reference.\r\n// Thank you,\r\n// -Your beloved friend, imgui_demo.cpp (that you won't delete)\r\n\r\n// Message to beginner C/C++ programmers about the meaning of the 'static' keyword:\r\n// In this demo code, we frequently we use 'static' variables inside functions. A static variable persist across calls, so it is\r\n// essentially like a global variable but declared inside the scope of the function. We do this as a way to gather code and data\r\n// in the same place, to make the demo source code faster to read, faster to write, and smaller in size.\r\n// It also happens to be a convenient way of storing simple UI related information as long as your function doesn't need to be \r\n// reentrant or used in multiple threads. This might be a pattern you will want to use in your code, but most of the real data\r\n// you would be editing is likely going to be stored outside your functions.\r\n\r\n// The Demo code is this file is designed to be easy to copy-and-paste in into your application!\r\n// Because of this:\r\n// - We never omit the ImGui:: namespace when calling functions, even though most of our code is already in the same namespace.\r\n// - We try to declare static variables in the local scope, as close as possible to the code using them.\r\n// - We never use any of the helpers/facilities used internally by dear imgui, unless it has been exposed in the public API (imgui.h).\r\n// - We never use maths operators on ImVec2/ImVec4. For other imgui sources files, they are provided by imgui_internal.h w/ IMGUI_DEFINE_MATH_OPERATORS,\r\n//   for your own sources file they are optional and require you either enable those, either provide your own via IM_VEC2_CLASS_EXTRA in imconfig.h.\r\n//   Because we don't want to assume anything about your support of maths operators, we don't use them in imgui_demo.cpp.\r\n\r\n/*\r\n\r\nIndex of this file:\r\n\r\n// [SECTION] Forward Declarations, Helpers\r\n// [SECTION] Demo Window / ShowDemoWindow()\r\n// [SECTION] About Window / ShowAboutWindow()\r\n// [SECTION] Style Editor / ShowStyleEditor()\r\n// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()\r\n// [SECTION] Example App: Debug Console / ShowExampleAppConsole()\r\n// [SECTION] Example App: Debug Log / ShowExampleAppLog()\r\n// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()\r\n// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()\r\n// [SECTION] Example App: Long Text / ShowExampleAppLongText()\r\n// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()\r\n// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()\r\n// [SECTION] Example App: Simple Overlay / ShowExampleAppSimpleOverlay()\r\n// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()\r\n// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()\r\n// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()\r\n\r\n*/\r\n\r\n// #if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)\r\n// #define _CRT_SECURE_NO_WARNINGS\r\n// #endif\r\n\r\n// #include \"imgui.h\"\r\n// #include <ctype.h>          // toupper, isprint\r\n// #include <math.h>           // sqrtf, powf, cosf, sinf, floorf, ceilf\r\n// #include <stdio.h>          // vsnprintf, sscanf, printf\r\n// #include <stdlib.h>         // null, malloc, free, atoi\r\n// #if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier\r\n// #include <stddef.h>         // intptr_t\r\n// #else\r\n// #include <stdint.h>         // intptr_t\r\n// #endif\r\n\r\nimport * as ImGui from \"./imgui\";\r\n\r\nimport { IMGUI_VERSION } from \"./imgui\";\r\n\r\nimport { IM_ASSERT } from \"./imgui\";\r\nimport { IM_ARRAYSIZE } from \"./imgui\";\r\n\r\nimport { ImStringBuffer } from \"./imgui\";\r\nimport { ImAccess } from \"./imgui\";\r\nimport { ImScalar } from \"./imgui\";\r\nimport { ImTuple3 } from \"./imgui\";\r\nimport { ImTuple4 } from \"./imgui\";\r\nimport { ImGuiCol } from \"./imgui\";\r\nimport { ImGuiColorEditFlags } from \"./imgui\";\r\nimport { ImGuiCond } from \"./imgui\";\r\nimport { ImGuiFocusedFlags } from \"./imgui\";\r\nimport { ImGuiHoveredFlags } from \"./imgui\";\r\nimport { ImGuiInputTextFlags } from \"./imgui\";\r\nimport { ImGuiMouseCursor } from \"./imgui\";\r\nimport { ImGuiSelectableFlags } from \"./imgui\";\r\nimport { ImGuiStyleVar } from \"./imgui\";\r\nimport { ImGuiTreeNodeFlags } from \"./imgui\";\r\nimport { ImGuiWindowFlags } from \"./imgui\";\r\nimport { ImGuiTabBarFlags } from \"./imgui\";\r\nimport { ImGuiTabItemFlags } from \"./imgui\";\r\nimport { ImGuiInputTextCallbackData } from \"./imgui\";\r\nimport { ImGuiSizeCallbackData } from \"./imgui\";\r\nimport { ImDrawCornerFlags } from \"./imgui\";\r\nimport { ImU32 } from \"./imgui\";\r\nimport { ImVector } from \"./imgui\";\r\nimport { ImVec2, interface_ImVec2 } from \"./imgui\";\r\nimport { ImVec4, interface_ImVec4 } from \"./imgui\";\r\nimport { IM_COL32 } from \"./imgui\";\r\nimport { ImColor } from \"./imgui\";\r\nimport { ImGuiIO } from \"./imgui\";\r\nimport { ImGuiStyle } from \"./imgui\";\r\nimport { ImDrawList } from \"./imgui\";\r\nimport { ImGuiTextFilter } from \"./imgui\";\r\nimport { ImGuiTextBuffer } from \"./imgui\";\r\nimport { ImGuiListClipper } from \"./imgui\";\r\nimport { ImFont } from \"./imgui\";\r\nimport { ImFontAtlas } from \"./imgui\";\r\nimport { ImGuiDir } from \"./imgui\";\r\n\r\n// #ifdef _MSC_VER\r\n// #pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\r\n// #define snprintf _snprintf\r\n// #endif\r\n// #ifdef __clang__\r\n// #pragma clang diagnostic ignored \"-Wold-style-cast\"             // warning : use of old-style cast                              // yes, they are more terse.\r\n// #pragma clang diagnostic ignored \"-Wdeprecated-declarations\"    // warning : 'xx' is deprecated: The POSIX name for this item.. // for strdup used in demo code (so user can copy & paste the code)\r\n// #pragma clang diagnostic ignored \"-Wint-to-void-pointer-cast\"   // warning : cast to 'void *' from smaller integer type 'int'\r\n// #pragma clang diagnostic ignored \"-Wformat-security\"            // warning : warning: format string is not a string literal\r\n// #pragma clang diagnostic ignored \"-Wexit-time-destructors\"      // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.\r\n// #if __has_warning(\"-Wreserved-id-macro\")\r\n// #pragma clang diagnostic ignored \"-Wreserved-id-macro\"          // warning : macro name is a reserved identifier                //\r\n// #endif\r\n// #elif defined(__GNUC__)\r\n// #pragma GCC diagnostic ignored \"-Wint-to-pointer-cast\"          // warning: cast to pointer from integer of different size\r\n// #pragma GCC diagnostic ignored \"-Wformat-security\"              // warning : format string is not a string literal (potentially insecure)\r\n// #pragma GCC diagnostic ignored \"-Wdouble-promotion\"             // warning: implicit conversion from 'float' to 'double' when passing argument to function\r\n// #pragma GCC diagnostic ignored \"-Wconversion\"                   // warning: conversion to 'xxxx' from 'xxxx' may alter its value\r\n// #if (__GNUC__ >= 6)\r\n// #pragma GCC diagnostic ignored \"-Wmisleading-indentation\"       // warning: this 'if' clause does not guard this statement      // GCC 6.0+ only. See #883 on GitHub.\r\n// #endif\r\n// #endif\r\n\r\nfunction format_number(n: number, radix: number = 10, pad: number = 0, pad_char: string = \"0\"): string {\r\n    return pad > 0 ? (pad_char.repeat(pad) + n.toString(radix)).substr(-pad) : n.toString(radix);\r\n}\r\n\r\nfunction format_number_dec(n: number, pad: number = 0, pad_char: string = \"0\"): string {\r\n    return format_number(n, 10, pad, pad_char);\r\n}\r\n\r\nfunction format_number_hex(n: number, pad: number = 0, pad_char: string = \"0\"): string {\r\n    return format_number(n, 16, pad, pad_char);\r\n}\r\n\r\n// Play it nice with Windows users. Notepad in 2017 still doesn't display text data with Unix-style \\n.\r\n// #ifdef _WIN32\r\n// #define IM_NEWLINE \"\\r\\n\"\r\n// #else\r\n// #define IM_NEWLINE \"\\n\"\r\n// #endif\r\nconst IM_NEWLINE: string = \"\\n\";\r\n\r\n// #define IM_MAX(_A,_B)       (((_A) >= (_B)) ? (_A) : (_B))\r\nfunction IM_MAX(_A: number, _B: number): number { return ((_A) >= (_B)) ? (_A) : (_B); }\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Forward Declarations, Helpers\r\n//-----------------------------------------------------------------------------\r\n\r\n// #if !defined(IMGUI_DISABLE_OBSOLETE_FUNCTIONS) && defined(IMGUI_DISABLE_TEST_WINDOWS) && !defined(IMGUI_DISABLE_DEMO_WINDOWS)   // Obsolete name since 1.53, TEST->DEMO\r\n// #define IMGUI_DISABLE_DEMO_WINDOWS\r\n// #endif\r\n\r\n// #if !defined(IMGUI_DISABLE_DEMO_WINDOWS)\r\n\r\nclass Static<T> {\r\n    constructor(public value: T) {}\r\n}\r\n\r\nconst _static: {[key: string]: Static<any>} = {};\r\n\r\nfunction STATIC<T>(key: string, value: T): Static<T> {\r\n    return _static[key] || (_static[key] = new Static<T>(value));\r\n}\r\n\r\nlet done: boolean = false;\r\n\r\n// Forward Declarations\r\n// static void ShowExampleAppDocuments(bool* p_open);\r\n// static void ShowExampleAppMainMenuBar();\r\n// static void ShowExampleAppConsole(bool* p_open);\r\n// static void ShowExampleAppLog(bool* p_open);\r\n// static void ShowExampleAppLayout(bool* p_open);\r\n// static void ShowExampleAppPropertyEditor(bool* p_open);\r\n// static void ShowExampleAppLongText(bool* p_open);\r\n// static void ShowExampleAppAutoResize(bool* p_open);\r\n// static void ShowExampleAppConstrainedResize(bool* p_open);\r\n// static void ShowExampleAppSimpleOverlay(bool* p_open);\r\n// static void ShowExampleAppWindowTitles(bool* p_open);\r\n// static void ShowExampleAppCustomRendering(bool* p_open);\r\n// static void ShowExampleMenuFile();\r\n\r\n// Helper to display a little (?) mark which shows a tooltip when hovered.\r\n// In your own code you may want to display an actual icon if you are using a merged icon fonts (see misc/fonts/README.txt)\r\nfunction HelpMarker(desc: string): void\r\n{\r\n    ImGui.TextDisabled(\"(?)\");\r\n    if (ImGui.IsItemHovered())\r\n    {\r\n        ImGui.BeginTooltip();\r\n        ImGui.PushTextWrapPos(ImGui.GetFontSize() * 35.0);\r\n        ImGui.TextUnformatted(desc);\r\n        ImGui.PopTextWrapPos();\r\n        ImGui.EndTooltip();\r\n    }\r\n}\r\n\r\n// Helper to display basic user controls.\r\nexport function ShowUserGuide(): void\r\n{\r\n    const io: ImGuiIO = ImGui.GetIO();\r\n    ImGui.BulletText(\"Double-click on title bar to collapse window.\");\r\n    ImGui.BulletText(\"Click and drag on lower right corner to resize window\\n(double-click to auto fit window to its contents).\");\r\n    ImGui.BulletText(\"Click and drag on any empty space to move window.\");\r\n    ImGui.BulletText(\"TAB/SHIFT+TAB to cycle through keyboard editable fields.\");\r\n    ImGui.BulletText(\"CTRL+Click on a slider or drag box to input value as text.\");\r\n    if (io.FontAllowUserScaling)\r\n        ImGui.BulletText(\"CTRL+Mouse Wheel to zoom window contents.\");\r\n    ImGui.BulletText(\"Mouse Wheel to scroll.\");\r\n    ImGui.BulletText(\"While editing text:\\n\");\r\n    ImGui.Indent();\r\n    ImGui.BulletText(\"Hold SHIFT or use mouse to select text.\");\r\n    ImGui.BulletText(\"CTRL+Left/Right to word jump.\");\r\n    ImGui.BulletText(\"CTRL+A or double-click to select all.\");\r\n    ImGui.BulletText(\"CTRL+X,CTRL+C,CTRL+V to use clipboard.\");\r\n    ImGui.BulletText(\"CTRL+Z,CTRL+Y to undo/redo.\");\r\n    ImGui.BulletText(\"ESCAPE to revert.\");\r\n    ImGui.BulletText(\"You can apply arithmetic operators +,*,/ on numerical values.\\nUse +- to subtract.\");\r\n    ImGui.Unindent();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Demo Window / ShowDemoWindow()\r\n//-----------------------------------------------------------------------------\r\n\r\n// We split the contents of the big ShowDemoWindow() function into smaller functions (because the link time of very large functions grow non-linearly)\r\n// static void ShowDemoWindowWidgets();\r\n// static void ShowDemoWindowLayout();\r\n// static void ShowDemoWindowPopups();\r\n// static void ShowDemoWindowColumns();\r\n// static void ShowDemoWindowMisc();\r\n\r\n// Demonstrate most Dear ImGui features (this is big function!)\r\n// You may execute this function to experiment with the UI and understand what it does. You may then search for keywords in the code when you are interested by a specific feature.\r\nexport function ShowDemoWindow(p_open: ImAccess<boolean> | ImScalar<boolean> | null = null): boolean\r\n{\r\n    done = false;\r\n\r\n    // IM_ASSERT(ImGui.GetCurrentContext() !== null && \"Missing dear imgui context. Refer to examples app!\"); // Exceptionally add an extra assert here for people confused with initial dear imgui setup\r\n\r\n    // Examples Apps (accessible from the \"Examples\" menu)\r\n    /* static */ const show_app_documents: Static<boolean> = STATIC(\"show_app_documents\", false);\r\n    /* static */ const show_app_main_menu_bar: Static<boolean> = STATIC(\"show_app_main_menu_bar\", false);\r\n    /* static */ const show_app_console: Static<boolean> = STATIC(\"show_app_console\", false);\r\n    /* static */ const show_app_log: Static<boolean> = STATIC(\"show_app_log\", false);\r\n    /* static */ const show_app_layout: Static<boolean> = STATIC(\"show_app_layout\", false);\r\n    /* static */ const show_app_property_editor: Static<boolean> = STATIC(\"show_app_property_editor\", false);\r\n    /* static */ const show_app_long_text: Static<boolean> = STATIC(\"show_app_long_text\", false);\r\n    /* static */ const show_app_auto_resize: Static<boolean> = STATIC(\"show_app_auto_resize\", false);\r\n    /* static */ const show_app_constrained_resize: Static<boolean> = STATIC(\"show_app_constrained_resize\", false);\r\n    /* static */ const show_app_simple_overlay: Static<boolean> = STATIC(\"show_app_simple_overlay\", false);\r\n    /* static */ const show_app_window_titles: Static<boolean> = STATIC(\"show_app_window_titles\", false);\r\n    /* static */ const show_app_custom_rendering: Static<boolean> = STATIC(\"show_app_custom_rendering\", false);\r\n    /* static */ const show_backend_checker_window: Static<boolean> = STATIC(\"show_backend_checker_window\", false);\r\n\r\n    if (show_app_documents.value)           ShowExampleAppDocuments((value = show_app_documents.value) => show_app_documents.value = value);\r\n    if (show_app_main_menu_bar.value)       ShowExampleAppMainMenuBar();\r\n    if (show_app_console.value)             ShowExampleAppConsole((value = show_app_console.value) => show_app_console.value = value);\r\n    if (show_app_log.value)                 ShowExampleAppLog((value = show_app_log.value) => show_app_log.value = value);\r\n    if (show_app_layout.value)              ShowExampleAppLayout((value = show_app_layout.value) => show_app_layout.value = value);\r\n    if (show_app_property_editor.value)     ShowExampleAppPropertyEditor((value = show_app_property_editor.value) => show_app_property_editor.value = value);\r\n    if (show_app_long_text.value)           ShowExampleAppLongText((value = show_app_long_text.value) => show_app_long_text.value = value);\r\n    if (show_app_auto_resize.value)         ShowExampleAppAutoResize((value = show_app_auto_resize.value) => show_app_auto_resize.value = value);\r\n    if (show_app_constrained_resize.value)  ShowExampleAppConstrainedResize((value = show_app_constrained_resize.value) => show_app_constrained_resize.value = value);\r\n    if (show_app_simple_overlay.value)      ShowExampleAppSimpleOverlay((value = show_app_simple_overlay.value) => show_app_simple_overlay.value = value);\r\n    if (show_app_window_titles.value)       ShowExampleAppWindowTitles((value = show_app_window_titles.value) => show_app_window_titles.value = value);\r\n    if (show_app_custom_rendering.value)    ShowExampleAppCustomRendering((value = show_app_custom_rendering.value) => show_app_custom_rendering.value = value);\r\n    if (show_backend_checker_window.value)  ShowBackendCheckerWindow((value = show_backend_checker_window.value) => show_backend_checker_window.value = value);\r\n\r\n    // Dear ImGui Apps (accessible from the \"Help\" menu)\r\n    /* static */ const show_app_style_editor: Static<boolean> = STATIC(\"show_app_style_editor\", false);\r\n    /* static */ const show_app_metrics: Static<boolean> = STATIC(\"show_app_metrics\", false);\r\n    /* static */ const show_app_about: Static<boolean> = STATIC(\"show_app_about\", false);\r\n\r\n    if (show_app_metrics.value)             { ImGui.ShowMetricsWindow((value = show_app_metrics.value) => show_app_metrics.value = value); }\r\n    if (show_app_style_editor.value)        { ImGui.Begin(\"Style Editor\", (value = show_app_style_editor.value) => show_app_style_editor.value = value); /*ImGui.*/ShowStyleEditor(); ImGui.End(); }\r\n    if (show_app_about.value)               { ShowAboutWindow((value = show_app_about.value) => show_app_about.value = value); }\r\n\r\n    // Demonstrate the various window flags. Typically you would just use the default!\r\n    /* static */ const no_titlebar: Static<boolean> = STATIC(\"no_titlebar\", false);\r\n    /* static */ const no_scrollbar: Static<boolean> = STATIC(\"no_scrollbar\", false);\r\n    /* static */ const no_menu: Static<boolean> = STATIC(\"no_menu\", false);\r\n    /* static */ const no_move: Static<boolean> = STATIC(\"no_move\", false);\r\n    /* static */ const no_resize: Static<boolean> = STATIC(\"no_resize\", false);\r\n    /* static */ const no_collapse: Static<boolean> = STATIC(\"no_collapse\", false);\r\n    /* static */ const no_close: Static<boolean> = STATIC(\"no_close\", false);\r\n    /* static */ const no_nav: Static<boolean> = STATIC(\"no_nav\", false);\r\n    /* static */ const no_background: Static<boolean> = STATIC(\"no_background\", false);\r\n    /* static */ const no_bring_to_front: Static<boolean> = STATIC(\"no_bring_to_front\", false);\r\n\r\n    let window_flags: ImGui.WindowFlags = 0;\r\n    if (no_titlebar.value)        window_flags |= ImGuiWindowFlags.NoTitleBar;\r\n    if (no_scrollbar.value)       window_flags |= ImGuiWindowFlags.NoScrollbar;\r\n    if (!no_menu.value)           window_flags |= ImGuiWindowFlags.MenuBar;\r\n    if (no_move.value)            window_flags |= ImGuiWindowFlags.NoMove;\r\n    if (no_resize.value)          window_flags |= ImGuiWindowFlags.NoResize;\r\n    if (no_collapse.value)        window_flags |= ImGuiWindowFlags.NoCollapse;\r\n    if (no_nav.value)             window_flags |= ImGuiWindowFlags.NoNav;\r\n    if (no_background.value)      window_flags |= ImGuiWindowFlags.NoBackground;\r\n    if (no_bring_to_front.value)  window_flags |= ImGuiWindowFlags.NoBringToFrontOnFocus;\r\n    if (no_close.value)           p_open = null; // Don't pass our bool* to Begin\r\n\r\n    // We specify a default position/size in case there's no data in the .ini file. Typically this isn't required! We only do it to make the Demo applications a little more welcoming.\r\n    ImGui.SetNextWindowPos(new ImVec2(650, 20), ImGui.Cond.FirstUseEver);\r\n    ImGui.SetNextWindowSize(new ImVec2(550, 680), ImGuiCond.FirstUseEver);\r\n\r\n    // Main body of the Demo window starts here.\r\n    if (!ImGui.Begin(\"Dear ImGui Demo\", p_open, window_flags))\r\n    {\r\n        // Early out if the window is collapsed, as an optimization.\r\n        ImGui.End();\r\n        return done;\r\n    }\r\n\r\n    // Most \"big\" widgets share a common width settings by default.\r\n    //ImGui.PushItemWidth(ImGui.GetWindowWidth() * 0.65);    // Use 2/3 of the space for widgets and 1/3 for labels (default)\r\n    ImGui.PushItemWidth(ImGui.GetFontSize() * -12);           // Use fixed width for labels (by passing a negative value), the rest goes to widgets. We choose a width proportional to our font size.\r\n\r\n    // Menu Bar\r\n    if (ImGui.BeginMenuBar())\r\n    {\r\n        if (ImGui.BeginMenu(\"Menu\"))\r\n        {\r\n            ShowExampleMenuFile();\r\n            ImGui.EndMenu();\r\n        }\r\n        if (ImGui.BeginMenu(\"Examples\"))\r\n        {\r\n            ImGui.MenuItem(\"Main menu bar\", null, (value = show_app_main_menu_bar.value) => show_app_main_menu_bar.value = value);\r\n            ImGui.MenuItem(\"Console\", null, (value = show_app_console.value) => show_app_console.value = value);\r\n            ImGui.MenuItem(\"Log\", null, (value = show_app_log.value) => show_app_log.value = value);\r\n            ImGui.MenuItem(\"Simple layout\", null, (value = show_app_layout.value) => show_app_layout.value = value);\r\n            ImGui.MenuItem(\"Property editor\", null, (value = show_app_property_editor.value) => show_app_property_editor.value = value);\r\n            ImGui.MenuItem(\"Long text display\", null, (value = show_app_long_text.value) => show_app_long_text.value = value);\r\n            ImGui.MenuItem(\"Auto-resizing window\", null, (value = show_app_auto_resize.value) => show_app_auto_resize.value = value);\r\n            ImGui.MenuItem(\"Constrained-resizing window\", null, (value = show_app_constrained_resize.value) => show_app_constrained_resize.value = value);\r\n            ImGui.MenuItem(\"Simple overlay\", null, (value = show_app_simple_overlay.value) => show_app_simple_overlay.value = value);\r\n            ImGui.MenuItem(\"Manipulating window titles\", null, (value = show_app_window_titles.value) => show_app_window_titles.value = value);\r\n            ImGui.MenuItem(\"Custom rendering\", null, (value = show_app_custom_rendering.value) => show_app_custom_rendering.value = value);\r\n            ImGui.MenuItem(\"Documents\", null, (value = show_app_documents.value) => show_app_documents.value = value);\r\n            ImGui.MenuItem(\"Backend-checker window\", null, (value = show_backend_checker_window.value) => show_backend_checker_window.value = value);\r\n            ImGui.EndMenu();\r\n        }\r\n        if (ImGui.BeginMenu(\"Help\"))\r\n        {\r\n            ImGui.MenuItem(\"Metrics\", null, (value = show_app_metrics.value) => show_app_metrics.value = value);\r\n            ImGui.MenuItem(\"Style Editor\", null, (value = show_app_style_editor.value) => show_app_style_editor.value = value);\r\n            ImGui.MenuItem(\"About Dear ImGui\", null, (value = show_app_about.value) => show_app_about.value = value);\r\n            ImGui.EndMenu();\r\n        }\r\n        ImGui.EndMenuBar();\r\n    }\r\n\r\n    ImGui.Text(`dear imgui says hello. (${IMGUI_VERSION})`);\r\n    ImGui.Spacing();\r\n\r\n    if (ImGui.CollapsingHeader(\"Help\"))\r\n    {\r\n        ImGui.Text(\"PROGRAMMER GUIDE:\");\r\n        ImGui.BulletText(\"Please see the ShowDemoWindow() code in imgui_demo.cpp. <- you are here!\");\r\n        ImGui.BulletText(\"Please see the comments in imgui.cpp.\");\r\n        ImGui.BulletText(\"Please see the examples/ in application.\");\r\n        ImGui.BulletText(\"Enable 'io.ConfigFlags |= NavEnableKeyboard' for keyboard controls.\");\r\n        ImGui.BulletText(\"Enable 'io.ConfigFlags |= NavEnableGamepad' for gamepad controls.\");\r\n        ImGui.Separator();\r\n\r\n        ImGui.Text(\"USER GUIDE:\");\r\n        /*ImGui.*/ShowUserGuide();\r\n    }\r\n\r\n    if (ImGui.CollapsingHeader(\"Configuration\"))\r\n    {\r\n        const io: ImGuiIO = ImGui.GetIO();\r\n\r\n        if (ImGui.TreeNode(\"Configuration##2\"))\r\n        {\r\n            ImGui.CheckboxFlags(\"io.ConfigFlags: NavEnableKeyboard\", (value = io.ConfigFlags) => io.ConfigFlags = value, ImGui.ConfigFlags.NavEnableKeyboard);\r\n            ImGui.CheckboxFlags(\"io.ConfigFlags: NavEnableGamepad\", (value = io.ConfigFlags) => io.ConfigFlags = value, ImGui.ConfigFlags.NavEnableGamepad);\r\n            ImGui.SameLine(); HelpMarker(\"Required back-end to feed in gamepad inputs in io.NavInputs[] and set io.BackendFlags |= ImGuiBackendFlags_HasGamepad.\\n\\nRead instructions in imgui.cpp for details.\");\r\n            ImGui.CheckboxFlags(\"io.ConfigFlags: NavEnableSetMousePos\", (value = io.ConfigFlags) => io.ConfigFlags = value, ImGui.ConfigFlags.NavEnableSetMousePos);\r\n            ImGui.SameLine(); HelpMarker(\"Instruct navigation to move the mouse cursor. See comment for ImGuiConfigFlags_NavEnableSetMousePos.\");\r\n            ImGui.CheckboxFlags(\"io.ConfigFlags: NoMouse\", (value = io.ConfigFlags) => io.ConfigFlags = value, ImGui.ConfigFlags.NoMouse);\r\n            if (io.ConfigFlags & ImGui.ConfigFlags.NoMouse) // Create a way to restore this flag otherwise we could be stuck completely!\r\n            {\r\n                if ((ImGui.GetTime() % 0.40) < 0.20)\r\n                {\r\n                    ImGui.SameLine();\r\n                    ImGui.Text(\"<<PRESS SPACE TO DISABLE>>\");\r\n                }\r\n                if (ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.Key.Space)))\r\n                    io.ConfigFlags &= ~ImGui.ConfigFlags.NoMouse;\r\n            }\r\n            ImGui.CheckboxFlags(\"io.ConfigFlags: NoMouseCursorChange\", (value = io.ConfigFlags) => io.ConfigFlags = value, ImGui.ConfigFlags.NoMouseCursorChange);\r\n            ImGui.SameLine(); HelpMarker(\"Instruct back-end to not alter mouse cursor shape and visibility.\");\r\n            ImGui.Checkbox(\"io.ConfigInputTextCursorBlink\", (value = io.ConfigInputTextCursorBlink) => io.ConfigInputTextCursorBlink = value);\r\n            ImGui.SameLine(); HelpMarker(\"Set to false to disable blinking cursor, for users who consider it distracting\");\r\n            ImGui.Checkbox(\"io.ConfigWindowsResizeFromEdges [beta]\", (value = io.ConfigWindowsResizeFromEdges) => io.ConfigWindowsResizeFromEdges = value);\r\n            ImGui.SameLine(); HelpMarker(\"Enable resizing of windows from their edges and from the lower-left corner.\\nThis requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback.\");\r\n            ImGui.Checkbox(\"io.ConfigWindowsMoveFromTitleBarOnly\", (value = io.ConfigWindowsMoveFromTitleBarOnly) => io.ConfigWindowsMoveFromTitleBarOnly = value);\r\n            ImGui.Checkbox(\"io.MouseDrawCursor\", (value = io.MouseDrawCursor) => io.MouseDrawCursor = value);\r\n            ImGui.SameLine(); HelpMarker(\"Instruct Dear ImGui to render a mouse cursor for you. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\\n\\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).\");\r\n            ImGui.TreePop();\r\n            ImGui.Separator();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Backend Flags\"))\r\n        {\r\n            HelpMarker(\"Those flags are set by the back-ends (imgui_impl_xxx files) to specify their capabilities.\");\r\n            let backend_flags: ImGui.BackendFlags = io.BackendFlags; // Make a local copy to avoid modifying the back-end flags.\r\n            ImGui.CheckboxFlags(\"io.BackendFlags: HasGamepad\", (value = backend_flags) => backend_flags = value, ImGui.BackendFlags.HasGamepad);\r\n            ImGui.CheckboxFlags(\"io.BackendFlags: HasMouseCursors\", (value = backend_flags) => backend_flags = value, ImGui.BackendFlags.HasMouseCursors);\r\n            ImGui.CheckboxFlags(\"io.BackendFlags: HasSetMousePos\", (value = backend_flags) => backend_flags = value, ImGui.BackendFlags.HasSetMousePos);\r\n            ImGui.CheckboxFlags(\"io.BackendFlags: RendererHasVtxOffset\", (value = backend_flags) => backend_flags = value, ImGui.BackendFlags.RendererHasVtxOffset);\r\n            ImGui.TreePop();\r\n            ImGui.Separator();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Style\"))\r\n        {\r\n            /*ImGui.*/ShowStyleEditor();\r\n            ImGui.TreePop();\r\n            ImGui.Separator();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Capture/Logging\"))\r\n        {\r\n            ImGui.TextWrapped(\"The logging API redirects all text output so you can easily capture the content of a window or a block. Tree nodes can be automatically expanded.\");\r\n            HelpMarker(\"Try opening any of the contents below in this window and then click one of the \\\"Log To\\\" button.\");\r\n            ImGui.LogButtons();\r\n            ImGui.TextWrapped(\"You can also call ImGui.LogText() to output directly to the log without a visual output.\");\r\n            if (ImGui.Button(\"Copy \\\"Hello, world!\\\" to clipboard\"))\r\n            {\r\n                ImGui.LogToClipboard();\r\n                ImGui.LogText(\"Hello, world!\");\r\n                ImGui.LogFinish();\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n    }\r\n\r\n    if (ImGui.CollapsingHeader(\"Window options\"))\r\n    {\r\n        ImGui.Checkbox(\"No titlebar\", (value = no_titlebar.value) => no_titlebar.value = value); ImGui.SameLine(150);\r\n        ImGui.Checkbox(\"No scrollbar\", (value = no_scrollbar.value) => no_scrollbar.value = value); ImGui.SameLine(300);\r\n        ImGui.Checkbox(\"No menu\", (value = no_menu.value) => no_menu.value = value);\r\n        ImGui.Checkbox(\"No move\", (value = no_move.value) => no_move.value = value); ImGui.SameLine(150);\r\n        ImGui.Checkbox(\"No resize\", (value = no_resize.value) => no_resize.value = value); ImGui.SameLine(300);\r\n        ImGui.Checkbox(\"No collapse\", (value = no_collapse.value) => no_collapse.value = value);\r\n        ImGui.Checkbox(\"No close\", (value = no_close.value) => no_close.value = value); ImGui.SameLine(150);\r\n        ImGui.Checkbox(\"No nav\", (value = no_nav.value) => no_nav.value = value); ImGui.SameLine(300);\r\n        ImGui.Checkbox(\"No background\", (value = no_background.value) => no_background.value = value);\r\n        ImGui.Checkbox(\"No bring to front\", (value = no_bring_to_front.value) => no_bring_to_front.value = value);\r\n    }\r\n\r\n    // All demo contents\r\n    ShowDemoWindowWidgets();\r\n    ShowDemoWindowLayout();\r\n    ShowDemoWindowPopups();\r\n    ShowDemoWindowColumns();\r\n    ShowDemoWindowMisc();\r\n\r\n    // End of ShowDemoWindow()\r\n    ImGui.End();\r\n\r\n    return done;\r\n}\r\n\r\nfunction ShowDemoWindowWidgets()\r\n{\r\n    if (!ImGui.CollapsingHeader(\"Widgets\"))\r\n        return;\r\n\r\n    if (ImGui.TreeNode(\"Basic\"))\r\n    {\r\n        /* static */ const clicked: Static<number> = STATIC(\"clicked\", 0);\r\n        if (ImGui.Button(\"Button\"))\r\n            clicked.value++;\r\n        if (clicked.value & 1)\r\n        {\r\n            ImGui.SameLine();\r\n            ImGui.Text(\"Thanks for clicking me!\");\r\n        }\r\n\r\n        /* static */ const check: Static<boolean> = STATIC(\"check\", true);\r\n        ImGui.Checkbox(\"checkbox\", (value = check.value) => check.value = value);\r\n\r\n        /* static */ const e: Static<number> = STATIC(\"e\", 0);\r\n        ImGui.RadioButton(\"radio a\", (value = e.value) => e.value = value, 0); ImGui.SameLine();\r\n        ImGui.RadioButton(\"radio b\", (value = e.value) => e.value = value, 1); ImGui.SameLine();\r\n        ImGui.RadioButton(\"radio c\", (value = e.value) => e.value = value, 2);\r\n\r\n        // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.\r\n        for (let i = 0; i < 7; i++)\r\n        {\r\n            if (i > 0)\r\n                ImGui.SameLine();\r\n            ImGui.PushID(i);\r\n            ImGui.PushStyleColor(ImGuiCol.Button, ImColor.HSV(i / 7.0, 0.6, 0.6));\r\n            ImGui.PushStyleColor(ImGuiCol.ButtonHovered, ImColor.HSV(i / 7.0, 0.7, 0.7));\r\n            ImGui.PushStyleColor(ImGuiCol.ButtonActive, ImColor.HSV(i / 7.0, 0.8, 0.8));\r\n            ImGui.Button(\"Click\");\r\n            ImGui.PopStyleColor(3);\r\n            ImGui.PopID();\r\n        }\r\n\r\n        // Use AlignTextToFramePadding() to align text baseline to the baseline of framed elements (otherwise a Text+SameLine+Button sequence will have the text a little too high by default)\r\n        ImGui.AlignTextToFramePadding();\r\n        ImGui.Text(\"Hold to repeat:\");\r\n        ImGui.SameLine();\r\n\r\n        // Arrow buttons with Repeater\r\n        /* static */ const counter: Static<number> = STATIC(\"counter\", 0);\r\n        const spacing = ImGui.GetStyle().ItemInnerSpacing.x;\r\n        ImGui.PushButtonRepeat(true);\r\n        if (ImGui.ArrowButton(\"##left\", ImGuiDir.Left)) { counter.value--; }\r\n        ImGui.SameLine(0.0, spacing);\r\n        if (ImGui.ArrowButton(\"##right\", ImGuiDir.Right)) { counter.value++; }\r\n        ImGui.PopButtonRepeat();\r\n        ImGui.SameLine();\r\n        ImGui.Text(`${counter.value}`);\r\n\r\n        ImGui.Text(\"Hover over me\");\r\n        if (ImGui.IsItemHovered())\r\n            ImGui.SetTooltip(\"I am a tooltip\");\r\n\r\n        ImGui.SameLine();\r\n        ImGui.Text(\"- or me\");\r\n        if (ImGui.IsItemHovered())\r\n        {\r\n            ImGui.BeginTooltip();\r\n            ImGui.Text(\"I am a fancy tooltip\");\r\n            /* static */ const arr: Static<number[]> = STATIC(\"arr_\", [ 0.6, 0.1, 1.0, 0.5, 0.92, 0.1, 0.2 ]);\r\n            // ImGui.PlotLines(\"Curve\", arr, IM_ARRAYSIZE(arr));\r\n            ImGui.PlotLines(\"Curve\", arr.value, IM_ARRAYSIZE(arr.value));\r\n            ImGui.EndTooltip();\r\n        }\r\n\r\n        ImGui.Separator();\r\n\r\n        ImGui.LabelText(\"label\", \"Value\");\r\n\r\n        {\r\n            // Using the _simplified_ one-liner Combo() api here\r\n            // See \"Combo\" section for examples of how to use the more complete BeginCombo()/EndCombo() api.\r\n            const items: string[] = [ \"AAAA\", \"BBBB\", \"CCCC\", \"DDDD\", \"EEEE\", \"FFFF\", \"GGGG\", \"HHHH\", \"IIII\", \"JJJJ\", \"KKKK\", \"LLLLLLL\", \"MMMM\", \"OOOOOOO\" ];\r\n            /* static */ const item_current: Static<number> = STATIC(\"item_current#389\", 0);\r\n            ImGui.Combo(\"combo\", (value = item_current.value) => item_current.value = value, items, IM_ARRAYSIZE(items));\r\n            ImGui.SameLine(); HelpMarker(\"Refer to the \\\"Combo\\\" section below for an explanation of the full BeginCombo/EndCombo API, and demonstration of various flags.\\n\");\r\n        }\r\n\r\n        {\r\n            /* static */ const str0: Static<ImStringBuffer> = STATIC(\"str0\", new ImStringBuffer(128, \"Hello, world!\"));\r\n            ImGui.InputText(\"input text\", str0.value, IM_ARRAYSIZE(str0.value));\r\n            ImGui.SameLine(); HelpMarker(\"USER:\\nHold SHIFT or use mouse to select text.\\n\" + \"CTRL+Left/Right to word jump.\\n\" + \"CTRL+A or double-click to select all.\\n\" + \"CTRL+X,CTRL+C,CTRL+V clipboard.\\n\" + \"CTRL+Z,CTRL+Y undo/redo.\\n\" + \"ESCAPE to revert.\\n\\nPROGRAMMER:\\nYou can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example (this is not demonstrated in imgui_demo.cpp).\");\r\n\r\n            /* static */ const str1: Static<ImStringBuffer> = STATIC(\"str1\", new ImStringBuffer(128, \"\"));\r\n            ImGui.InputTextWithHint(\"input text (w/ hint)\", \"enter text here\", str1.value, IM_ARRAYSIZE(str1.value));\r\n\r\n            /* static */ const i0: Static<number> = STATIC(\"i0\", 123);\r\n            ImGui.InputInt(\"input int\", (value = i0.value) => i0.value = value);\r\n            ImGui.SameLine(); HelpMarker(\"You can apply arithmetic operators +,*,/ on numerical values.\\n  e.g. [ 100 ], input \\'*2\\', result becomes [ 200 ]\\nUse +- to subtract.\\n\");\r\n\r\n            /* static */ const f0: Static<number> = STATIC(\"f0#400\", 0.001);\r\n            ImGui.InputFloat(\"input float\", (value = f0.value) => f0.value = value, 0.01, 1.0, \"%.3f\");\r\n\r\n            /* static */ const d0: Static<number> = STATIC(\"d0\", 999999.000001);\r\n            ImGui.InputDouble(\"input double\", (value = d0.value) => d0.value = value, 0.01, 1.0, \"%.8f\");\r\n\r\n            /* static */ const f1: Static<number> = STATIC(\"f1#403\", 1.e10);\r\n            ImGui.InputFloat(\"input scientific\", (value = f1.value) => f1.value = value, 0.0, 0.0, \"%e\");\r\n            ImGui.SameLine(); HelpMarker(\"You can input value using the scientific notation,\\n  e.g. \\\"1e+8\\\" becomes \\\"100000000\\\".\\n\");\r\n\r\n            /* static */ const vec4a: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"vec4a\", [ 0.10, 0.20, 0.30, 0.44 ]);\r\n            ImGui.InputFloat3(\"input float3\", vec4a.value);\r\n        }\r\n\r\n        {\r\n            /* static */ const i1: Static<number> = STATIC(\"i1#415\", 50), i2: Static<number> = STATIC(\"i2#415\", 42);\r\n            ImGui.DragInt(\"drag int\", (value = i1.value) => i1.value = value, 1);\r\n            ImGui.SameLine(); HelpMarker(\"Click and drag to edit value.\\nHold SHIFT/ALT for faster/slower edit.\\nDouble-click or CTRL+click to input value.\");\r\n\r\n            ImGui.DragInt(\"drag int 0..100\", (value = i2.value) => i2.value = value, 1, 0, 100, \"%d%%\");\r\n\r\n            /* static */ const f1: Static<number> = STATIC(\"f1#421\", 1.00), f2: Static<number> = STATIC(\"f2#421\", 0.0067);\r\n            ImGui.DragFloat(\"drag float\", (value = f1.value) => f1.value = value, 0.005);\r\n            ImGui.DragFloat(\"drag small float\", (value = f2.value) => f2.value = value, 0.0001, 0.0, 0.0, \"%.06f ns\");\r\n        }\r\n\r\n        {\r\n            /* static */ const i1: Static<number> = STATIC(\"i1#427\", 0);\r\n            ImGui.SliderInt(\"slider int\", (value = i1.value) => i1.value = value, -1, 3);\r\n            ImGui.SameLine(); HelpMarker(\"CTRL+click to input value.\");\r\n\r\n            /* static */ const f1: Static<number> = STATIC(\"f1#427\", 0.123), f2: Static<number> = STATIC(\"f2#427\", 0.0);\r\n            ImGui.SliderFloat(\"slider float\", (value = f1.value) => f1.value = value, 0.0, 1.0, \"ratio = %.3f\");\r\n            ImGui.SliderFloat(\"slider float (curve)\", (value = f2.value) => f2.value = value, -10.0, 10.0, \"%.4f\", 2.0);\r\n            /* static */ const angle: Static<number> = STATIC(\"angle\", 0.0);\r\n            ImGui.SliderAngle(\"slider angle\", (value = angle.value) => angle.value = value);\r\n            /* static */ const angle3: Static<ImTuple3<number>> = STATIC<ImTuple3<number>>(\"angle3\", [ 0.0, 0.0, 0.0 ]);\r\n            ImGui.SliderAngle3(\"slider angle3\", angle3.value);\r\n        }\r\n\r\n        {\r\n            /* static */ const col1: Static<ImTuple3<number>> = STATIC<ImTuple3<number>>(\"col1\", [ 1.0, 0.0, 0.2 ]);\r\n            /* static */ const col2: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"col2\", [ 0.4, 0.7, 0.0, 0.5 ]);\r\n            ImGui.ColorEdit3(\"color 1\", col1.value);\r\n            ImGui.SameLine(); HelpMarker(\"Click on the colored square to open a color picker.\\nClick and hold to use drag and drop.\\nRight-click on the colored square to show options.\\nCTRL+click on individual component to input value.\\n\");\r\n\r\n            ImGui.ColorEdit4(\"color 2\", col2.value);\r\n        }\r\n\r\n        {\r\n            // List box\r\n            const listbox_items: string[] = [ \"Apple\", \"Banana\", \"Cherry\", \"Kiwi\", \"Mango\", \"Orange\", \"Pineapple\", \"Strawberry\", \"Watermelon\" ];\r\n            /* static */ const listbox_item_current: Static<number> = STATIC(\"listbox_item_current\", 1);\r\n            ImGui.ListBox(\"listbox\\n(single select)\", (value = listbox_item_current.value) => listbox_item_current.value = value, listbox_items, IM_ARRAYSIZE(listbox_items), 4);\r\n\r\n            // /* static */ const listbox_item_current2: Static<number> = STATIC(\"listbox_item_current2\", 2);\r\n            // ImGui.SetNextItemWidth(-1);\r\n            // ImGui.ListBox(\"##listbox2\", (value = listbox_item_current2.value) => listbox_item_current2.value = value, listbox_items, IM_ARRAYSIZE(listbox_items), 4);\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    // Testing ImGuiOnceUponAFrame helper.\r\n    //static ImGuiOnceUponAFrame once;\r\n    //for (let i = 0; i < 5; i++)\r\n    //    if (once)\r\n    //        ImGui.Text(\"This will be displayed only once.\");\r\n\r\n    if (ImGui.TreeNode(\"Trees\"))\r\n    {\r\n        if (ImGui.TreeNode(\"Basic trees\"))\r\n        {\r\n            for (let i = 0; i < 5; i++)\r\n            {\r\n                // Use SetNextItemOpen() so set the default state of a node to be open.\r\n                // We could also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!\r\n                if (i == 0)\r\n                    ImGui.SetNextItemOpen(true, ImGuiCond.Once);\r\n\r\n                if (ImGui.TreeNode(i.toString(), `Child ${i}`))\r\n                {\r\n                    ImGui.Text(\"blah blah\");\r\n                    ImGui.SameLine();\r\n                    if (ImGui.SmallButton(\"button\")) {}\r\n                    ImGui.TreePop();\r\n                }\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Advanced, with Selectable nodes\"))\r\n        {\r\n            HelpMarker(\"This is a more typical looking tree with selectable nodes.\\nClick to select, CTRL+Click to toggle, click on arrows or double-click to open.\");\r\n            /* static */ const align_label_with_current_x_position: Static<boolean> = STATIC(\"align_label_with_current_x_position\", false);\r\n            ImGui.Checkbox(\"Align label with current X position)\", (value = align_label_with_current_x_position.value) => align_label_with_current_x_position.value = value);\r\n            ImGui.Text(\"Hello!\");\r\n            if (align_label_with_current_x_position.value)\r\n                ImGui.Unindent(ImGui.GetTreeNodeToLabelSpacing());\r\n\r\n            /* static */ const selection_mask: Static<number> = STATIC(\"selection_mask\", (1 << 2)); // Dumb representation of what may be user-side selection state. You may carry selection state inside or outside your objects in whatever format you see fit.\r\n            let node_clicked: number = -1;                // Temporary storage of what node we have clicked to process selection at the end of the loop. May be a pointer to your own node type, etc.\r\n            ImGui.PushStyleVar(ImGuiStyleVar.IndentSpacing, ImGui.GetFontSize() * 3); // Increase spacing to differentiate leaves from expanded contents.\r\n            for (let i = 0; i < 6; i++)\r\n            {\r\n                // Disable the default open on single-click behavior and pass in Selected flag according to our selection state.\r\n                let node_flags: ImGuiTreeNodeFlags = ImGuiTreeNodeFlags.OpenOnArrow | ImGuiTreeNodeFlags.OpenOnDoubleClick;\r\n                if (selection_mask.value & (1 << i))\r\n                    node_flags |= ImGuiTreeNodeFlags.Selected;\r\n                if (i < 3)\r\n                {\r\n                    // Items 0..2 are Tree Node\r\n                    const node_open: boolean = ImGui.TreeNodeEx(i, node_flags, `Selectable Node ${i}`);\r\n                    if (ImGui.IsItemClicked())\r\n                        node_clicked = i;\r\n                    if (node_open)\r\n                    {\r\n                        ImGui.Text(\"Blah blah\\nBlah Blah\");\r\n                        ImGui.TreePop();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // Items 3..5 are Tree Leaves\r\n                    // The only reason we use TreeNode at all is to allow selection of the leaf.\r\n                    // Otherwise we can use BulletText() or TreeAdvanceToLabelPos()+Text().\r\n                    node_flags |= ImGuiTreeNodeFlags.Leaf | ImGuiTreeNodeFlags.NoTreePushOnOpen; // ImGuiTreeNodeFlags.Bullet\r\n                    ImGui.TreeNodeEx(i, node_flags, `Selectable Leaf ${i}`);\r\n                    if (ImGui.IsItemClicked())\r\n                        node_clicked = i;\r\n                }\r\n            }\r\n            if (node_clicked !== -1)\r\n            {\r\n                // Update selection state. Process outside of tree loop to avoid visual inconsistencies during the clicking-frame.\r\n                if (ImGui.GetIO().KeyCtrl)\r\n                    selection_mask.value ^= (1 << node_clicked);          // CTRL+click to toggle\r\n                else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, this commented bit preserve selection when clicking on item that is part of the selection\r\n                    selection_mask.value = (1 << node_clicked);           // Click to single-select\r\n            }\r\n            ImGui.PopStyleVar();\r\n            if (align_label_with_current_x_position.value)\r\n                ImGui.Indent(ImGui.GetTreeNodeToLabelSpacing());\r\n            ImGui.TreePop();\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Collapsing Headers\"))\r\n    {\r\n        /* static */ const closable_group: Static<boolean> = STATIC(\"closable_group\", true);\r\n        ImGui.Checkbox(\"Show 2nd header\", (value = closable_group.value) => closable_group.value = value);\r\n        if (ImGui.CollapsingHeader(\"Header\"))\r\n        {\r\n            ImGui.Text(`IsItemHovered: ${ImGui.IsItemHovered()}`);\r\n            for (let i = 0; i < 5; i++)\r\n                ImGui.Text(`Some content ${i}`);\r\n        }\r\n        if (ImGui.CollapsingHeader(\"Header with a close button\", (value = closable_group.value) => closable_group.value = value))\r\n        {\r\n            ImGui.Text(`IsItemHovered: ${ImGui.IsItemHovered()}`);\r\n            for (let i = 0; i < 5; i++)\r\n                ImGui.Text(`More content ${i}`);\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Bullets\"))\r\n    {\r\n        ImGui.BulletText(\"Bullet point 1\");\r\n        ImGui.BulletText(\"Bullet point 2\\nOn multiple lines\");\r\n        ImGui.Bullet(); ImGui.Text(\"Bullet point 3 (two calls)\");\r\n        ImGui.Bullet(); ImGui.SmallButton(\"Button\");\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Text\"))\r\n    {\r\n        if (ImGui.TreeNode(\"Colored Text\"))\r\n        {\r\n            // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.\r\n            ImGui.TextColored(new ImVec4(1.0, 0.0, 1.0, 1.0), \"Pink\");\r\n            ImGui.TextColored(new ImVec4(1.0, 1.0, 0.0, 1.0), \"Yellow\");\r\n            ImGui.TextDisabled(\"Disabled\");\r\n            ImGui.SameLine(); HelpMarker(\"The TextDisabled color is stored in ImGuiStyle.\");\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Word Wrapping\"))\r\n        {\r\n            // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.\r\n            ImGui.TextWrapped(\"This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.\");\r\n            ImGui.Spacing();\r\n\r\n            /* static */ const wrap_width: Static<number> = STATIC(\"wrap_width\", 200.0);\r\n            ImGui.SliderFloat(\"Wrap width\", (value = wrap_width.value) => wrap_width.value = value, -20, 600, \"%.0f\");\r\n\r\n            ImGui.Text(\"Test paragraph 1:\");\r\n            let pos: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n            ImGui.GetWindowDrawList().AddRectFilled(new ImVec2(pos.x + wrap_width.value, pos.y), new ImVec2(pos.x + wrap_width.value + 10, pos.y + ImGui.GetTextLineHeight()), IM_COL32(255, 0, 255, 255));\r\n            ImGui.PushTextWrapPos(ImGui.GetCursorPos().x + wrap_width.value);\r\n            ImGui.Text(`The lazy dog is a good dog. This paragraph is made to fit within ${wrap_width.value.toFixed(0)} pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.`);\r\n            ImGui.GetWindowDrawList().AddRect(ImGui.GetItemRectMin(), ImGui.GetItemRectMax(), IM_COL32(255, 255, 0, 255));\r\n            ImGui.PopTextWrapPos();\r\n\r\n            ImGui.Text(\"Test paragraph 2:\");\r\n            pos = ImGui.GetCursorScreenPos();\r\n            ImGui.GetWindowDrawList().AddRectFilled(new ImVec2(pos.x + wrap_width.value, pos.y), new ImVec2(pos.x + wrap_width.value + 10, pos.y + ImGui.GetTextLineHeight()), IM_COL32(255, 0, 255, 255));\r\n            ImGui.PushTextWrapPos(ImGui.GetCursorPos().x + wrap_width.value);\r\n            ImGui.Text(\"aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh\");\r\n            ImGui.GetWindowDrawList().AddRect(ImGui.GetItemRectMin(), ImGui.GetItemRectMax(), IM_COL32(255, 255, 0, 255));\r\n            ImGui.PopTextWrapPos();\r\n\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"UTF-8 Text\"))\r\n        {\r\n            // UTF-8 test with Japanese characters\r\n            // (Needs a suitable font, try Noto, or Arial Unicode, or M+ fonts. Read misc/fonts/README.txt for details.)\r\n            // - From C++11 you can use the u8\"my text\" syntax to encode literal strings as UTF-8\r\n            // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. Visual Studio save your file as 'UTF-8 without signature')\r\n            // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8 CHARACTERS IN THIS SOURCE FILE.\r\n            //   Instead we are encoding a few strings with hexadecimal constants. Don't do this in your application!\r\n            //   Please use u8\"text in any language\" in your application!\r\n            // Note that characters values are preserved even by InputText() if the font cannot be displayed, so you can safely copy & paste garbled characters into another application.\r\n            ImGui.TextWrapped(\"CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->AddFontFromFileTTF() manually to load extra character ranges. Read misc/fonts/README.txt for details.\");\r\n            // か \\xe3\\x81\\x8b U+304B &#12363;\r\n            // き \\xe3\\x81\\x8d U+304D &#12365;\r\n            // く \\xe3\\x81\\x8f U+304F &#12367;\r\n            // け \\xe3\\x81\\x91 U+3051 &#12369;\r\n            // こ \\xe3\\x81\\x93 U+3053 &#12371;\r\n            // ImGui.Text(\"Hiragana: \\xe3\\x81\\x8b\\xe3\\x81\\x8d\\xe3\\x81\\x8f\\xe3\\x81\\x91\\xe3\\x81\\x93 (kakikukeko)\"); // Normally we would use u8\"blah blah\" with the proper characters directly in the string.\r\n            // ImGui.Text(\"Hiragana: \\u304B\\u304D\\u304F\\u3051\\u3053 (kakikukeko)\"); // Normally we would use u8\"blah blah\" with the proper characters directly in the string.\r\n            ImGui.Text(\"Hiragana: かきくけこ (kakikukeko)\"); // Normally we would use u8\"blah blah\" with the proper characters directly in the string.\r\n            // 日 \\xe6\\x97\\xa5 U+65E5 &#26085;\r\n            // 本 \\xe6\\x9c\\xac U+672C &#26412;\r\n            // 語 \\xe8\\xaa\\x9e U+8A9E &#35486;\r\n            // ImGui.Text(\"Kanjis: \\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e (nihongo)\");\r\n            // ImGui.Text(\"Kanjis: \\u65E5\\u672C\\u8A9E (nihongo)\");\r\n            ImGui.Text(\"Kanjis: 日本語 (nihongo)\");\r\n            // /* static */ const buf: Static<ImStringBuffer> = STATIC(\"buf\", new ImStringBuffer(32, \"\\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e\"));\r\n            // /* static */ const buf: Static<ImStringBuffer> = STATIC(\"buf\", new ImStringBuffer(32, \"\\u65E5\\u672C\\u8A9E\"));\r\n            /* static */ const buf: Static<ImStringBuffer> = STATIC(\"buf\", new ImStringBuffer(32, \"日本語\"));\r\n            //static char buf[32] = u8\"NIHONGO\"; // <- this is how you would write it with C++11, using real kanjis\r\n            ImGui.InputText(\"UTF-8 input\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            ImGui.TreePop();\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Images\"))\r\n    {\r\n        const io: ImGuiIO = ImGui.GetIO();\r\n        ImGui.TextWrapped(\"Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!\");\r\n\r\n        // Here we are grabbing the font texture because that's the only one we have access to inside the demo code.\r\n        // Remember that ImTextureID is just storage for whatever you want it to be, it is essentially a value that will be passed to the render function inside the ImDrawCmd structure.\r\n        // If you use one of the default imgui_impl_XXXX.cpp renderer, they all have comments at the top of their file to specify what they expect to be stored in ImTextureID.\r\n        // (for example, the imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer. The imgui_impl_glfw_gl3.cpp renderer expect a GLuint OpenGL texture identifier etc.)\r\n        // If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers to ImGui.Image(), and gather width/height through your own functions, etc.\r\n        // Using ShowMetricsWindow() as a \"debugger\" to inspect the draw data that are being passed to your render will help you debug issues if you are confused about this.\r\n        // Consider using the lower-level ImDrawList::AddImage() API, via ImGui.GetWindowDrawList()->AddImage().\r\n        const my_tex_id: WebGLTexture | null = io.Fonts.TexID;\r\n        const my_tex_w: number = io.Fonts.TexWidth;\r\n        const my_tex_h: number = io.Fonts.TexHeight;\r\n\r\n        ImGui.Text(`${my_tex_w.toFixed(0)}x${my_tex_h.toFixed(0)}`);\r\n        const pos: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n        ImGui.Image(my_tex_id, new ImVec2(my_tex_w, my_tex_h), new ImVec2(0, 0), new ImVec2(1, 1), new ImVec4(1.0, 1.0, 1.0, 1.0), new ImVec4(1.0, 1.0, 1.0, 0.5));\r\n        if (ImGui.IsItemHovered())\r\n        {\r\n            ImGui.BeginTooltip();\r\n            const region_sz: number = 32.0;\r\n            let region_x: number = io.MousePos.x - pos.x - region_sz * 0.5; if (region_x < 0.0) region_x = 0.0; else if (region_x > my_tex_w - region_sz) region_x = my_tex_w - region_sz;\r\n            let region_y: number = io.MousePos.y - pos.y - region_sz * 0.5; if (region_y < 0.0) region_y = 0.0; else if (region_y > my_tex_h - region_sz) region_y = my_tex_h - region_sz;\r\n            let zoom: number = 4.0;\r\n            ImGui.Text(`Min: (${region_x.toFixed(2)}, ${region_y.toFixed(2)})`);\r\n            ImGui.Text(`Max: (${(region_x + region_sz).toFixed(2)}, ${(region_y + region_sz).toFixed(2)})`);\r\n            const uv0: ImVec2 = new ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);\r\n            const uv1: ImVec2 = new ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);\r\n            ImGui.Image(my_tex_id, new ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, new ImColor(255, 255, 255, 255).toImVec4(), new ImColor(255, 255, 255, 128).toImVec4());\r\n            ImGui.EndTooltip();\r\n        }\r\n        ImGui.TextWrapped(\"And now some textured buttons..\");\r\n        /* static */ const pressed_count: Static<number> = STATIC(\"pressed_count\", 0);\r\n        for (let i = 0; i < 8; i++)\r\n        {\r\n            ImGui.PushID(i);\r\n            const frame_padding: number = -1 + i;     // -1 = uses default padding\r\n            if (ImGui.ImageButton(my_tex_id, new ImVec2(32, 32), new ImVec2(0, 0), new ImVec2(32.0 / my_tex_w, 32 / my_tex_h), frame_padding, new ImVec4(0, 0, 0, 1)))\r\n                pressed_count.value += 1;\r\n            ImGui.PopID();\r\n            ImGui.SameLine();\r\n        }\r\n        ImGui.NewLine();\r\n        ImGui.Text(`Pressed ${pressed_count.value} times.`);\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Combo\"))\r\n    {\r\n        // Expose flags as checkbox for the demo\r\n        /* static */ const flags: Static<ImGui.ImGuiComboFlags> = STATIC(\"flags#669\", 0);\r\n        ImGui.CheckboxFlags(\"ImGuiComboFlags_PopupAlignLeft\", (value = flags.value) => flags.value = value, ImGui.ImGuiComboFlags.PopupAlignLeft);\r\n        ImGui.SameLine(); HelpMarker(\"Only makes a difference if the popup is larger than the combo\");\r\n        if (ImGui.CheckboxFlags(\"ImGuiComboFlags_NoArrowButton\", (value = flags.value) => flags.value = value, ImGui.ImGuiComboFlags.NoArrowButton))\r\n            flags.value &= ~ImGui.ImGuiComboFlags.NoPreview;     // Clear the other flag, as we cannot combine both\r\n        if (ImGui.CheckboxFlags(\"ImGuiComboFlags_NoPreview\", (value = flags.value) => flags.value = value, ImGui.ImGuiComboFlags.NoPreview))\r\n            flags.value &= ~ImGui.ImGuiComboFlags.NoArrowButton; // Clear the other flag, as we cannot combine both\r\n\r\n        // General BeginCombo() API, you have full control over your selection data and display type.\r\n        // (your selection data could be an index, a pointer to the object, an id for the object, a flag stored in the object itself, etc.)\r\n        const items: string[] = [ \"AAAA\", \"BBBB\", \"CCCC\", \"DDDD\", \"EEEE\", \"FFFF\", \"GGGG\", \"HHHH\", \"IIII\", \"JJJJ\", \"KKKK\", \"LLLLLLL\", \"MMMM\", \"OOOOOOO\" ];\r\n        /* static */ const item_current: Static<string> = STATIC(\"item_current#692\", items[0]);// Here our selection is a single pointer stored outside the object.\r\n        if (ImGui.BeginCombo(\"combo 1\", item_current.value, flags.value)) // The second parameter is the label previewed before opening the combo.\r\n        {\r\n            for (let n = 0; n < IM_ARRAYSIZE(items); n++)\r\n            {\r\n                const is_selected: boolean = (item_current.value === items[n]);\r\n                if (ImGui.Selectable(items[n], is_selected))\r\n                    item_current.value = items[n];\r\n                if (is_selected)\r\n                    ImGui.SetItemDefaultFocus();   // Set the initial focus when opening the combo (scrolling + for keyboard navigation support in the upcoming navigation branch)\r\n            }\r\n            ImGui.EndCombo();\r\n        }\r\n\r\n        // Simplified one-liner Combo() API, using values packed in a single constant string\r\n        /* static */ const item_current_2: Static<number> = STATIC(\"item_current_2\", 0);\r\n        ImGui.Combo(\"combo 2\", (value = item_current_2.value) => item_current_2.value = value, \"aaaa\\0bbbb\\0cccc\\0dddd\\0eeee\\0\\0\");\r\n\r\n        // Simplified one-liner Combo() using an array of const char*\r\n        /* static */ const item_current_3: Static<number> = STATIC(\"item_current_3\", -1); // If the selection isn't within 0..count, Combo won't display a preview\r\n        ImGui.Combo(\"combo 3 (array)\", (value = item_current_3.value) => item_current_3.value = value, items, IM_ARRAYSIZE(items));\r\n\r\n        // Simplified one-liner Combo() using an accessor function\r\n        // struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { *out_str = ((const char**)data)[idx]; return true; } };\r\n        class FuncHolder { public static ItemGetter(data: string[], idx: number, out_str: [string]): boolean { out_str[0] = data[idx]; return true; }; }\r\n        /* static */ const item_current_4: Static<number> = STATIC(\"item_current_4\", 0);\r\n        ImGui.Combo(\"combo 4 (function)\", (value = item_current_4.value) => item_current_4.value = value, FuncHolder.ItemGetter, items, IM_ARRAYSIZE(items));\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Selectables\"))\r\n    {\r\n        // Selectable() has 2 overloads:\r\n        // - The one taking \"bool selected\" as a read-only selection information. When Selectable() has been clicked is returns true and you can alter selection state accordingly.\r\n        // - The one taking \"bool* p_selected\" as a read-write selection information (convenient in some cases)\r\n        // The earlier is more flexible, as in real application your selection may be stored in a different manner (in flags within objects, as an external list, etc).\r\n        if (ImGui.TreeNode(\"Basic\"))\r\n        {\r\n            /* static */ const selection: Static<boolean[/*5*/]> = STATIC(\"selection#695\", [ false, true, false, false, false ]);\r\n            ImGui.Selectable(\"1. I am selectable\", (value = selection.value[0]) => selection.value[0] = value);\r\n            ImGui.Selectable(\"2. I am selectable\", (value = selection.value[1]) => selection.value[1] = value);\r\n            ImGui.Text(\"3. I am not selectable\");\r\n            ImGui.Selectable(\"4. I am selectable\", (value = selection.value[3]) => selection.value[2] = value);\r\n            if (ImGui.Selectable(\"5. I am double clickable\", selection.value[4], ImGuiSelectableFlags.AllowDoubleClick))\r\n                if (ImGui.IsMouseDoubleClicked(0))\r\n                    selection.value[4] = !selection.value[4];\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"Selection State: Single Selection\"))\r\n        {\r\n            /* static */ const selected: Static<number> = STATIC(\"selected#707\", -1);\r\n            for (let n = 0; n < 5; n++)\r\n            {\r\n                const buf: string = `Object ${n}`;\r\n                if (ImGui.Selectable(buf, selected.value === n))\r\n                    selected.value = n;\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"Selection State: Multiple Selection\"))\r\n        {\r\n            HelpMarker(\"Hold CTRL and click to select multiple items.\");\r\n            /* static */ const selection: Static<boolean[/*5*/]> = STATIC(\"selection#720\", [ false, false, false, false, false ]);\r\n            for (let n = 0; n < 5; n++)\r\n            {\r\n                const buf: string = `Object ${n}`;\r\n                if (ImGui.Selectable(buf, selection.value[n]))\r\n                {\r\n                    if (!ImGui.GetIO().KeyCtrl)    // Clear selection when CTRL is not held\r\n                        // memset(selection, 0, sizeof(selection));\r\n                        selection.value.fill(false);\r\n                    selection.value[n] = !selection.value[n];\r\n                }\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"Rendering more text into the same line\"))\r\n        {\r\n            // Using the Selectable() override that takes \"bool* p_selected\" parameter and toggle your booleans automatically.\r\n            /* static */ const selected: Static<boolean[/*3*/]> = STATIC(\"selected#687\", [ false, false, false ]);\r\n            ImGui.Selectable(\"main.c\",    (value = selected.value[0]) => selected.value[0] = value); ImGui.SameLine(300); ImGui.Text(\" 2,345 bytes\");\r\n            ImGui.Selectable(\"Hello.cpp\", (value = selected.value[1]) => selected.value[1] = value); ImGui.SameLine(300); ImGui.Text(\"12,345 bytes\");\r\n            ImGui.Selectable(\"Hello.h\",   (value = selected.value[2]) => selected.value[2] = value); ImGui.SameLine(300); ImGui.Text(\" 2,345 bytes\");\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"In columns\"))\r\n        {\r\n            ImGui.Columns(3, null, false);\r\n            /* static */ const selected: Static<boolean[/*16*/]> = STATIC(\"selected#699\", new Array(16).fill(false));\r\n            for (let i = 0; i < 16; i++)\r\n            {\r\n                const label: string = `Item ${i}`;\r\n                if (ImGui.Selectable(label, (value = selected.value[i]) => selected.value[i] = value)) {}\r\n                ImGui.NextColumn();\r\n            }\r\n            ImGui.Columns(1);\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"Grid\"))\r\n        {\r\n            /* static */ const selected: Static<boolean[/*4*4*/]> = STATIC(\"selected#712\", [ true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true ]);\r\n            for (let i = 0; i < 4*4; i++)\r\n            {\r\n                ImGui.PushID(i);\r\n                if (ImGui.Selectable(\"Sailor\", (value = selected.value[i]) => selected.value[i] = value, 0, new ImVec2(50, 50)))\r\n                {\r\n                    // Note: We _unnecessarily_ test for both x/y and i here only to silence some static analyzer. The second part of each test is unnecessary.\r\n                    const x: number = i % 4;\r\n                    const y: number = i / 4;\r\n                    if (x > 0)           { selected.value[i - 1] = !selected.value[i - 1]; }\r\n                    if (x < 3 && i < 15) { selected.value[i + 1] = !selected.value[i + 1]; }\r\n                    if (y > 0 && i > 3)  { selected.value[i - 4] = !selected.value[i - 4]; }\r\n                    if (y < 3 && i < 12) { selected.value[i + 4] = !selected.value[i + 4]; }\r\n                }\r\n                if ((i % 4) < 3) ImGui.SameLine();\r\n                ImGui.PopID();\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n        if (ImGui.TreeNode(\"Alignment\"))\r\n        {\r\n            HelpMarker(\"Alignment applies when a selectable is larger than its text content.\\nBy default, Selectables uses style.SelectableTextAlign but it can be overriden on a per-item basis using PushStyleVar().\");\r\n            /* static */ const selected: Static<boolean[/*3*3*/]> = STATIC(\"selected#1012\", [ true, false, true, false, true, false, true, false, true ]);\r\n            for (let y = 0; y < 3; y++)\r\n            {\r\n                for (let x = 0; x < 3; x++)\r\n                {\r\n                    const alignment: ImVec2 = new ImVec2(x / 2.0, y / 2.0);\r\n                    // char name[32];\r\n                    // sprintf(name, \"(%.1f,%.1f)\", alignment.x, alignment.y);\r\n                    const name: string = `(${alignment.x.toFixed(1)},${alignment.y.toFixed(1)})`;\r\n                    if (x > 0) ImGui.SameLine();\r\n                    ImGui.PushStyleVar(ImGuiStyleVar.SelectableTextAlign, alignment);\r\n                    // ImGui.Selectable(name, &selected[3*y+x], ImGuiSelectableFlags_None, ImVec2(80,80));\r\n                    ImGui.Selectable(name, (value = selected.value[3*y+x]) => selected.value[3*y+x] = value, ImGuiSelectableFlags.None, new ImVec2(80,80));\r\n                    ImGui.PopStyleVar();\r\n                }\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Text Input\"))\r\n    {\r\n        if (ImGui.TreeNode(\"Multi-line Text Input\"))\r\n        {\r\n            // Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize\r\n            // and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.\r\n            /* static */ const text: Static<ImStringBuffer> = STATIC(\"text\", new ImStringBuffer(1024 * 16,\r\n                \"/*\\n\" +\r\n                \" The Pentium F00F bug, shorthand for F0 0F C7 C8,\\n\" +\r\n                \" the hexadecimal encoding of one offending instruction,\\n\" +\r\n                \" more formally, the invalid operand with locked CMPXCHG8B\\n\" +\r\n                \" instruction bug, is a design flaw in the majority of\\n\" +\r\n                \" Intel Pentium, Pentium MMX, and Pentium OverDrive\\n\" +\r\n                \" processors (all in the P5 microarchitecture).\\n\" +\r\n                \"*/\\n\\n\" +\r\n                \"label:\\n\" +\r\n                \"\\tlock cmpxchg8b eax\\n\"));\r\n\r\n            /* static */ const flags: Static<ImGuiInputTextFlags> = STATIC(\"flags\", ImGuiInputTextFlags.AllowTabInput);\r\n            HelpMarker(\"You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example. (This is not demonstrated in imgui_demo.cpp)\");\r\n            ImGui.CheckboxFlags(\"ImGuiInputTextFlags_ReadOnly\", (value = flags.value) => flags.value = value, ImGuiInputTextFlags.ReadOnly);\r\n            ImGui.CheckboxFlags(\"ImGuiInputTextFlags_AllowTabInput\", (value = flags.value) => flags.value = value, ImGuiInputTextFlags.AllowTabInput);\r\n            ImGui.CheckboxFlags(\"ImGuiInputTextFlags_CtrlEnterForNewLine\", (value = flags.value) => flags.value = value, ImGuiInputTextFlags.CtrlEnterForNewLine);\r\n            ImGui.InputTextMultiline(\"##source\", text.value, IM_ARRAYSIZE(text.value), new ImVec2(-1.0, ImGui.GetTextLineHeight() * 16), flags.value);\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Filtered Text Input\"))\r\n        {\r\n            /* static */ const buf1: Static<ImStringBuffer> = STATIC(\"buf1\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"default\", buf1.value, IM_ARRAYSIZE(buf1.value));\r\n            /* static */ const buf2: Static<ImStringBuffer> = STATIC(\"buf2\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"decimal\", buf2.value, IM_ARRAYSIZE(buf2.value), ImGuiInputTextFlags.CharsDecimal);\r\n            /* static */ const buf3: Static<ImStringBuffer> = STATIC(\"buf3\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"hexadecimal\", buf3.value, IM_ARRAYSIZE(buf3.value), ImGuiInputTextFlags.CharsHexadecimal | ImGuiInputTextFlags.CharsUppercase);\r\n            /* static */ const buf4: Static<ImStringBuffer> = STATIC(\"buf4\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"uppercase\", buf4.value, IM_ARRAYSIZE(buf4.value), ImGuiInputTextFlags.CharsUppercase);\r\n            /* static */ const buf5: Static<ImStringBuffer> = STATIC(\"buf5\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"no blank\", buf5.value, IM_ARRAYSIZE(buf5.value), ImGuiInputTextFlags.CharsNoBlank);\r\n            class TextFilters { public static FilterImGuiLetters(data: ImGuiInputTextCallbackData): number { if (data.EventChar < 256 && /[imgui]/.test(String.fromCharCode(data.EventChar))) return 0; return 1; } }\r\n            /* static */ const buf6: Static<ImStringBuffer> = STATIC(\"buf6\", new ImStringBuffer(64, \"\")); ImGui.InputText(\"\\\"imgui\\\" letters\", buf6.value, IM_ARRAYSIZE(buf6.value), ImGuiInputTextFlags.CallbackCharFilter, TextFilters.FilterImGuiLetters);\r\n\r\n            ImGui.Text(\"Password input\");\r\n            /* static */ const bufpass: Static<ImStringBuffer> = STATIC(\"bufpass\", new ImStringBuffer(64, \"password123\"));\r\n            ImGui.InputText(\"password\", bufpass.value, IM_ARRAYSIZE(bufpass.value), ImGuiInputTextFlags.Password | ImGuiInputTextFlags.CharsNoBlank);\r\n            ImGui.SameLine(); HelpMarker(\"Display all characters as '*'.\\nDisable clipboard cut and copy.\\nDisable logging.\\n\");\r\n            ImGui.InputText(\"password (clear)\", bufpass.value, IM_ARRAYSIZE(bufpass.value), ImGuiInputTextFlags.CharsNoBlank);\r\n\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Resize Callback\"))\r\n        {\r\n            // If you have a custom string type you would typically create a ImGui.InputText() wrapper than takes your type as input.\r\n            // See misc/cpp/imgui_stdlib.h and .cpp for an implementation of this using std::string.\r\n            HelpMarker(\"Demonstrate using ImGuiInputTextFlags_CallbackResize to wire your resizable string type to InputText().\\n\\nSee misc/cpp/imgui_stdlib.h for an implementation of this for std::string.\");\r\n            // struct Funcs\r\n            // {\r\n            //     static int MyResizeCallback(ImGuiInputTextCallbackData* data)\r\n            //     {\r\n            //         if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)\r\n            //         {\r\n            //             ImVector<char>* my_str = (ImVector<char>*)data->UserData;\r\n            //             IM_ASSERT(my_str->begin() == data->Buf);\r\n            //             my_str->resize(data->BufSize);  // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1\r\n            //             data->Buf = my_str->begin();\r\n            //         }\r\n            //         return 0;\r\n            //     }\r\n\r\n            //     // Tip: Because ImGui. is a namespace you would typicall add your own function into the namespace in your own source files.\r\n            //     // For example, you may add a function called ImGui.InputText(const char* label, MyString* my_str).\r\n            //     static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0)\r\n            //     {\r\n            //         IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);\r\n            //         return ImGui.InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);\r\n            //     }\r\n            // };\r\n\r\n            // For this demo we are using ImVector as a string container.\r\n            // Note that because we need to store a terminating zero character, our size/capacity are 1 more than usually reported by a typical string class.\r\n            // static ImVector<char> my_str;\r\n            // if (my_str.empty())\r\n            //     my_str.push_back(0);\r\n            // Funcs::MyInputTextMultiline(\"##MyStr\", &my_str, ImVec2(-1.0f, ImGui.GetTextLineHeight() * 16));\r\n            // ImGui.Text(\"Data: %p\\nSize: %d\\nCapacity: %d\", (void*)my_str.begin(), my_str.size(), my_str.capacity());\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Plots Widgets\"))\r\n    {\r\n        /* static */ const animate: Static<boolean> = STATIC(\"animate\", true);\r\n        ImGui.Checkbox(\"Animate\", (value = animate.value) => animate.value = value);\r\n\r\n        /* static */ const arr: Static<number[]> = STATIC(\"arr\", [ 0.6, 0.1, 1.0, 0.5, 0.92, 0.1, 0.2 ]);\r\n        ImGui.PlotLines(\"Frame Times\", arr.value, IM_ARRAYSIZE(arr.value));\r\n\r\n        // Create a dummy array of contiguous float values to plot\r\n        // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float and the sizeof() of your structure in the Stride parameter.\r\n        /* static */ const values: Static<number[/*90*/]> = STATIC(\"values#803\", new Array(90).fill(0));\r\n        /* static */ const values_offset: Static<number> = STATIC(\"values_offset\", 0);\r\n        /* static */ const refresh_time: Static<number> = STATIC(\"refresh_time\", 0.0);\r\n        if (!animate.value || refresh_time.value === 0.0)\r\n            refresh_time.value = ImGui.GetTime();\r\n        while (refresh_time.value < ImGui.GetTime()) // Create dummy data at fixed 60 hz rate for the demo\r\n        {\r\n            /* static */ const phase: Static<number> = STATIC(\"phase\", 0.0);\r\n            values.value[values_offset.value] = Math.cos(phase.value);\r\n            values_offset.value = (values_offset.value + 1) % IM_ARRAYSIZE(values.value);\r\n            phase.value += 0.10 * values_offset.value;\r\n            refresh_time.value += 1.0 / 60.0;\r\n        }\r\n        ImGui.PlotLines(\"Lines\", values.value, IM_ARRAYSIZE(values.value), values_offset.value, \"avg 0.0\", -1.0, 1.0, new ImVec2(0, 80));\r\n        ImGui.PlotHistogram(\"Histogram\", arr.value, IM_ARRAYSIZE(arr.value), 0, null, 0.0, 1.0, new ImVec2(0, 80));\r\n\r\n        // Use functions to generate output\r\n        // FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.\r\n        class Funcs\r\n        {\r\n            public static Sin(data: any, i: number): number { return Math.sin(i * 0.1); }\r\n            public static Saw(data: any, i: number): number { return (i & 1) ? 1.0 : -1.0; }\r\n        }\r\n        /* static */ const func_type: Static<number> = STATIC(\"func_type\", 0), display_count: Static<number> = STATIC(\"display_count\", 70);\r\n        ImGui.Separator();\r\n        ImGui.SetNextItemWidth(100); ImGui.Combo(\"func\", (value = func_type.value) => func_type.value = value, \"Sin\\0Saw\\0\");\r\n        ImGui.SameLine();\r\n        ImGui.SliderInt(\"Sample count\", (value = display_count.value) => display_count.value = value, 1, 400);\r\n        const func: (data: any, i: number) => number = (func_type.value === 0) ? Funcs.Sin : Funcs.Saw;\r\n        ImGui.PlotLines(\"Lines\", func, null, display_count.value, 0, null, -1.0, 1.0, new ImVec2(0, 80));\r\n        ImGui.PlotHistogram(\"Histogram\", func, null, display_count.value, 0, null, -1.0, 1.0, new ImVec2(0, 80));\r\n        ImGui.Separator();\r\n\r\n        // Animate a simple progress bar\r\n        /* static */ const progress: Static<number> = STATIC(\"progress\", 0.0), progress_dir: Static<number> = STATIC(\"progress_dir\", 1.0);\r\n        if (animate.value)\r\n        {\r\n            progress.value += progress_dir.value * 0.4 * ImGui.GetIO().DeltaTime;\r\n            if (progress.value >= +1.1) { progress.value = +1.1; progress_dir.value *= -1.0; }\r\n            if (progress.value <= -0.1) { progress.value = -0.1; progress_dir.value *= -1.0; }\r\n        }\r\n\r\n        // Typically we would use ImVec2(-1.0f,0.0) to use all available width, or ImVec2(width,0.0) for a specified width. ImVec2(0.0,0.0) uses ItemWidth.\r\n        ImGui.ProgressBar(progress.value, new ImVec2(0.0, 0.0));\r\n        ImGui.SameLine(0.0, ImGui.GetStyle().ItemInnerSpacing.x);\r\n        ImGui.Text(\"Progress Bar\");\r\n\r\n        const progress_saturated: number = (progress.value < 0.0) ? 0.0 : (progress.value > 1.0) ? 1.0 : progress.value;\r\n        const buf: string = `${(progress_saturated * 1753).toFixed(0)}/${1753}`;\r\n        ImGui.ProgressBar(progress.value, new ImVec2(0., 0.), buf);\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Color/Picker Widgets\"))\r\n    {\r\n        /* static */ const color: Static<ImVec4> = STATIC(\"color#863\", new ImVec4(114.0/255.0, 144.0/255.0, 154.0/255.0, 200.0/255.0));\r\n\r\n        /* static */ const alpha_preview: Static<boolean> = STATIC(\"alpha_preview\", true);\r\n        /* static */ const alpha_half_preview: Static<boolean> = STATIC(\"alpha_half_preview\", false);\r\n        /* static */ const drag_and_drop: Static<boolean> = STATIC(\"drag_and_drop\", true);\r\n        /* static */ const options_menu: Static<boolean> = STATIC(\"options_menu\", true);\r\n        /* static */ const hdr: Static<boolean> = STATIC(\"hdr\", false);\r\n        ImGui.Checkbox(\"With Alpha Preview\", (value = alpha_preview.value) => alpha_preview.value = value);\r\n        ImGui.Checkbox(\"With Half Alpha Preview\", (value = alpha_half_preview.value) => alpha_half_preview.value = value);\r\n        ImGui.Checkbox(\"With Drag and Drop\", (value = drag_and_drop.value) => drag_and_drop.value = value);\r\n        ImGui.Checkbox(\"With Options Menu\", (value = options_menu.value) => options_menu.value = value); ImGui.SameLine(); HelpMarker(\"Right-click on the individual color widget to show options.\");\r\n        ImGui.Checkbox(\"With HDR\", (value = hdr.value) => hdr.value = value); ImGui.SameLine(); HelpMarker(\"Currently all this does is to lift the 0..1 limits on dragging widgets.\");\r\n        const misc_flags: ImGuiColorEditFlags = (hdr.value ? ImGuiColorEditFlags.HDR : 0) | (drag_and_drop.value ? 0 : ImGuiColorEditFlags.NoDragDrop) | (alpha_half_preview.value ? ImGuiColorEditFlags.AlphaPreviewHalf : (alpha_preview.value ? ImGuiColorEditFlags.AlphaPreview : 0)) | (options_menu.value ? 0 : ImGuiColorEditFlags.NoOptions);\r\n\r\n        ImGui.Text(\"Color widget:\");\r\n        ImGui.SameLine(); HelpMarker(\"Click on the colored square to open a color picker.\\nCTRL+click on individual component to input value.\\n\");\r\n        ImGui.ColorEdit3(\"MyColor##1\", color.value, misc_flags);\r\n\r\n        ImGui.Text(\"Color widget HSV with Alpha:\");\r\n        ImGui.ColorEdit4(\"MyColor##2\", color.value, ImGuiColorEditFlags.DisplayHSV | misc_flags);\r\n\r\n        ImGui.Text(\"Color widget with Float Display:\");\r\n        ImGui.ColorEdit4(\"MyColor##2f\", color.value, ImGuiColorEditFlags.Float | misc_flags);\r\n\r\n        ImGui.Text(\"Color button with Picker:\");\r\n        ImGui.SameLine(); HelpMarker(\"With the ImGuiColorEditFlags.NoInputs flag you can hide all the slider/text inputs.\\nWith the ImGuiColorEditFlags.NoLabel flag you can pass a non-empty label which will only be used for the tooltip and picker popup.\");\r\n        ImGui.ColorEdit4(\"MyColor##3\", color.value, ImGuiColorEditFlags.NoInputs | ImGuiColorEditFlags.NoLabel | misc_flags);\r\n\r\n        ImGui.Text(\"Color button with Custom Picker Popup:\");\r\n\r\n        // Generate a dummy default palette. The palette will persist and can be edited.\r\n        /* static */ const saved_palette_init: Static<boolean> = STATIC(\"saved_palette_init\", true);\r\n        /* static */ const saved_palette: Static<ImVec4[/*32*/]> = STATIC(\"saved_palette\", []);\r\n        if (saved_palette_init.value)\r\n        {\r\n            for (let n = 0; n < 32; n++)\r\n            {\r\n                saved_palette.value[n] = new ImVec4();\r\n                // ImGui.ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f, saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);\r\n                const r: ImScalar<number> = [ 0.0 ];\r\n                const g: ImScalar<number> = [ 0.0 ];\r\n                const b: ImScalar<number> = [ 0.0 ];\r\n                ImGui.ColorConvertHSVtoRGB(n / 32.0, 0.8, 0.8, r, g, b);\r\n                saved_palette.value[n].x = r[0];\r\n                saved_palette.value[n].y = g[0];\r\n                saved_palette.value[n].z = b[0];\r\n                saved_palette.value[n].w = 1.0; // Alpha\r\n            }\r\n            saved_palette_init.value = false;\r\n        }\r\n\r\n        /* static */ const backup_color: Static<ImVec4> = STATIC(\"backup_color\", new ImVec4());\r\n        let open_popup: boolean = ImGui.ColorButton(\"MyColor##3b\", color.value, misc_flags);\r\n        ImGui.SameLine();\r\n        open_popup = ImGui.Button(\"Palette\") || open_popup;\r\n        if (open_popup)\r\n        {\r\n            ImGui.OpenPopup(\"mypicker\");\r\n                backup_color.value.Copy(color.value);\r\n        }\r\n        if (ImGui.BeginPopup(\"mypicker\"))\r\n        {\r\n            ImGui.Text(\"MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!\");\r\n            ImGui.Separator();\r\n            ImGui.ColorPicker4(\"##picker\", color.value, misc_flags | ImGuiColorEditFlags.NoSidePreview | ImGuiColorEditFlags.NoSmallPreview);\r\n            ImGui.SameLine();\r\n            ImGui.BeginGroup(); // Lock X position\r\n            ImGui.Text(\"Current\");\r\n            ImGui.ColorButton(\"##current\", color.value, ImGuiColorEditFlags.NoPicker | ImGuiColorEditFlags.AlphaPreviewHalf, new ImVec2(60, 40));\r\n            ImGui.Text(\"Previous\");\r\n            if (ImGui.ColorButton(\"##previous\", backup_color.value, ImGuiColorEditFlags.NoPicker | ImGuiColorEditFlags.AlphaPreviewHalf, new ImVec2(60, 40)))\r\n                color.value.Copy(backup_color.value);\r\n            ImGui.Separator();\r\n            ImGui.Text(\"Palette\");\r\n            for (let n = 0; n < IM_ARRAYSIZE(saved_palette.value); n++)\r\n            {\r\n                ImGui.PushID(n);\r\n                if ((n % 8) !== 0)\r\n                    ImGui.SameLine(0.0, ImGui.GetStyle().ItemSpacing.y);\r\n                if (ImGui.ColorButton(\"##palette\", saved_palette.value[n], ImGuiColorEditFlags.NoAlpha | ImGuiColorEditFlags.NoPicker | ImGuiColorEditFlags.NoTooltip, new ImVec2(20, 20)))\r\n                    color.value.Copy(new ImVec4(saved_palette.value[n].x, saved_palette.value[n].y, saved_palette.value[n].z, color.value.w)); // Preserve alpha!\r\n\r\n                // Allow user to drop colors into each palette entry\r\n                // (Note that ColorButton is already a drag source by default, unless using ImGuiColorEditFlags_NoDragDrop)\r\n                if (ImGui.BeginDragDropTarget())\r\n                {\r\n                    // if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))\r\n                    //     memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);\r\n                    // if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))\r\n                    //     memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);\r\n                    ImGui.EndDragDropTarget();\r\n                }\r\n\r\n                ImGui.PopID();\r\n            }\r\n            ImGui.EndGroup();\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        ImGui.Text(\"Color button only:\");\r\n        ImGui.ColorButton(\"MyColor##3c\", color.value, misc_flags, new ImVec2(80, 80));\r\n\r\n        ImGui.Text(\"Color picker:\");\r\n        /* static */ const alpha: Static<boolean> = STATIC(\"alpha\", true);\r\n        /* static */ const alpha_bar: Static<boolean> = STATIC(\"alpha_bar\", true);\r\n        /* static */ const side_preview: Static<boolean> = STATIC(\"side_preview\", true);\r\n        /* static */ const ref_color: Static<boolean> = STATIC(\"ref_color\", false);\r\n        /* static */ const ref_color_v: Static<ImVec4> = STATIC(\"ref_color_v\", new ImVec4(1.0, 0.0, 1.0, 0.5));\r\n        /* static */ const display_mode: Static<number> = STATIC(\"display_mode\", 0);\r\n        /* static */ const picker_mode: Static<number> = STATIC(\"picker_mode\", 0);\r\n        ImGui.Checkbox(\"With Alpha\", (value = alpha.value) => alpha.value = value);\r\n        ImGui.Checkbox(\"With Alpha Bar\", (value = alpha_bar.value) => alpha_bar.value = value);\r\n        ImGui.Checkbox(\"With Side Preview\", (value = side_preview.value) => side_preview.value = value);\r\n        if (side_preview)\r\n        {\r\n            ImGui.SameLine();\r\n            ImGui.Checkbox(\"With Ref Color\", (value = ref_color.value) => ref_color.value = value);\r\n            if (ref_color.value)\r\n            {\r\n                ImGui.SameLine();\r\n                ImGui.ColorEdit4(\"##RefColor\", ref_color_v.value, ImGuiColorEditFlags.NoInputs | misc_flags);\r\n            }\r\n        }\r\n        ImGui.Combo(\"Display Mode\", (value = display_mode.value) => display_mode.value = value, \"Auto/Current\\0None\\0RGB Only\\0HSV Only\\0Hex Only\\0\");\r\n        ImGui.SameLine(); HelpMarker(\"ColorEdit defaults to displaying RGB inputs if you don't specify a display mode, but the user can change it with a right-click.\\n\\nColorPicker defaults to displaying RGB+HSV+Hex if you don't specify a display mode.\\n\\nYou can change the defaults using SetColorEditOptions().\");\r\n        ImGui.Combo(\"Picker Mode\", (value = picker_mode.value) => picker_mode.value = value, \"Auto/Current\\0Hue bar + SV rect\\0Hue wheel + SV triangle\\0\");\r\n        ImGui.SameLine(); HelpMarker(\"User can right-click the picker to change mode.\");\r\n        let flags: ImGuiColorEditFlags = misc_flags;\r\n        if (!alpha.value) flags |= ImGuiColorEditFlags.NoAlpha; // This is by default if you call ColorPicker3() instead of ColorPicker4()\r\n        if (alpha_bar.value) flags |= ImGuiColorEditFlags.AlphaBar;\r\n        if (!side_preview.value) flags |= ImGuiColorEditFlags.NoSidePreview;\r\n        if (picker_mode.value === 1) flags |= ImGuiColorEditFlags.PickerHueBar;\r\n        if (picker_mode.value === 2) flags |= ImGuiColorEditFlags.PickerHueWheel;\r\n        if (display_mode.value === 1) flags |= ImGuiColorEditFlags.NoInputs; // Disable all RGB/HSV/Hex displays\r\n        if (display_mode.value === 2) flags |= ImGuiColorEditFlags.DisplayRGB; // Override display mode\r\n        if (display_mode.value === 3) flags |= ImGuiColorEditFlags.DisplayHSV;\r\n        if (display_mode.value === 4) flags |= ImGuiColorEditFlags.DisplayHex;\r\n        ImGui.ColorPicker4(\"MyColor##4\", color.value, flags, ref_color.value ? ref_color_v.value : null);\r\n\r\n        ImGui.Text(\"Programmatically set defaults:\");\r\n        ImGui.SameLine(); HelpMarker(\"SetColorEditOptions() is designed to allow you to set boot-time default.\\nWe don't have Push/Pop functions because you can force options on a per-widget basis if needed, and the user can change non-forced ones with the options menu.\\nWe don't have a getter to avoid encouraging you to persistently save values that aren't forward-compatible.\");\r\n        if (ImGui.Button(\"Default: Uint8 + HSV + Hue Bar\"))\r\n            ImGui.SetColorEditOptions(ImGuiColorEditFlags.Uint8 | ImGuiColorEditFlags.DisplayHSV | ImGuiColorEditFlags.PickerHueBar);\r\n        if (ImGui.Button(\"Default: Float + HDR + Hue Wheel\"))\r\n            ImGui.SetColorEditOptions(ImGuiColorEditFlags.Float | ImGuiColorEditFlags.HDR | ImGuiColorEditFlags.PickerHueWheel);\r\n\r\n        // HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)\r\n        /* static */ const color_stored_as_hsv: Static<ImVec4> = STATIC(\"color_stored_as_hsv\", new ImVec4(0.23, 1.0, 1.0, 1.0));\r\n        ImGui.Spacing();\r\n        ImGui.Text(\"HSV encoded colors\");\r\n        ImGui.SameLine(); HelpMarker(\"By default, colors are given to ColorEdit and ColorPicker in RGB, but ImGuiColorEditFlags_InputHSV allows you to store colors as HSV and pass them to ColorEdit and ColorPicker as HSV. This comes with the added benefit that you can manipulate hue values with the picker even when saturation or value are zero.\");\r\n        ImGui.Text(\"Color widget with InputHSV:\");\r\n        ImGui.ColorEdit4(\"HSV shown as RGB##1\", color_stored_as_hsv.value, ImGuiColorEditFlags.DisplayRGB | ImGuiColorEditFlags.InputHSV | ImGuiColorEditFlags.Float);\r\n        ImGui.ColorEdit4(\"HSV shown as HSV##1\", color_stored_as_hsv.value, ImGuiColorEditFlags.DisplayHSV | ImGuiColorEditFlags.InputHSV | ImGuiColorEditFlags.Float);\r\n        ImGui.DragFloat4(\"Raw HSV values\", color_stored_as_hsv.value, 0.01, 0.0, 1.0);\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Range Widgets\"))\r\n    {\r\n        /* static */ const begin: Static<number> = STATIC(\"begin\", 10), end: Static<number> = STATIC(\"end\", 90);\r\n        /* static */ const begin_i: Static<number> = STATIC(\"begin_i\", 100), end_i: Static<number> = STATIC(\"end_i\", 1000);\r\n        ImGui.DragFloatRange2(\"range\", (value = begin.value) => begin.value = value, (value = end.value) => end.value = value, 0.25, 0.0, 100.0, \"Min: %.1f %%\", \"Max: %.1f %%\");\r\n        ImGui.DragIntRange2(\"range int (no bounds)\", (value = begin_i.value) => begin_i.value = value, (value = end_i.value) => end_i.value = value, 5, 0, 0, \"Min: %d units\", \"Max: %d units\");\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Data Types\"))\r\n    {\r\n        // The DragScalar/InputScalar/SliderScalar functions allow various data types: signed/unsigned int/long long and float/double\r\n        // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum to pass the type,\r\n        // and passing all arguments by address.\r\n        // This is the reason the test code below creates local variables to hold \"zero\" \"one\" etc. for each types.\r\n        // In practice, if you frequently use a given type that is not covered by the normal API entry points, you can wrap it\r\n        // yourself inside a 1 line function which can take typed argument as value instead of void*, and then pass their address\r\n        // to the generic function. For example:\r\n        //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = \"%lld\")\r\n        //   {\r\n        //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);\r\n        //   }\r\n\r\n        // Limits (as helper variables that we can take the address of)\r\n        // Note that the SliderScalar function has a maximum usable range of half the natural type maximum, hence the /2 below.\r\n\r\n        const INT_MIN = -2147483648; // 0x80000000\r\n        const INT_MAX = +2147483647; // 0x7fffffff\r\n        const UINT_MAX = +4294967295; // 0xffffffff\r\n        // const LLONG_MIN = -9223372036854775808; // 0x8000000000000000\r\n        // const LLONG_MAX = +9223372036854775807; // 0x7fffffffffffffff\r\n        // const ULLONG_MAX = +18446744073709551615; // 0xffffffffffffffff\r\n\r\n        const s8_zero = 0,   s8_one = 1,   s8_fifty = 50, s8_min = -128, s8_max = 127;\r\n        const u8_zero = 0,   u8_one = 1,   u8_fifty = 50, u8_min = 0,    u8_max = 255;\r\n        const s16_zero = 0,   s16_one = 1,   s16_fifty = 50, s16_min = -32768, s16_max = 32767;\r\n        const u16_zero = 0,   u16_one = 1,   u16_fifty = 50, u16_min = 0,      u16_max = 65535;\r\n        const s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN / 2,   s32_max = INT_MAX / 2,    s32_hi_a = INT_MAX / 2 - 100,    s32_hi_b = INT_MAX / 2;\r\n        const u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,             u32_max = UINT_MAX / 2,   u32_hi_a = UINT_MAX / 2 - 100,   u32_hi_b = UINT_MAX / 2;\r\n        // const s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN / 2, s64_max = LLONG_MAX / 2,  s64_hi_a = LLONG_MAX / 2 - 100,  s64_hi_b = LLONG_MAX / 2;\r\n        // const u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,             u64_max = ULLONG_MAX / 2, u64_hi_a = ULLONG_MAX / 2 - 100, u64_hi_b = ULLONG_MAX / 2;\r\n        const f32_zero = 0.0, f32_one = 1.0, f32_lo_a = -10000000000.0, f32_hi_a = +10000000000.0;\r\n        const f64_zero = 0.0, f64_one = 1.0, f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;\r\n\r\n        // State\r\n        // static char   s8_v  = 127;\r\n        // static ImU8   u8_v  = 255;\r\n        // static short  s16_v = 32767;\r\n        // static ImU16  u16_v = 65535;\r\n        // static ImS32  s32_v = -1;\r\n        // static ImU32  u32_v = (ImU32)-1;\r\n        // static ImS64  s64_v = -1;\r\n        // static ImU64  u64_v = (ImU64)-1;\r\n        // static float  f32_v = 0.123f;\r\n        // static double f64_v = 90000.01234567890123456789;\r\n        /* static */ const s8_v = STATIC(\"s8_v\", new Int8Array([127]));\r\n        /* static */ const u8_v = STATIC(\"u8_v\", new Uint8Array([255]));\r\n        /* static */ const s16_v = STATIC(\"s16_v\", new Int16Array([32767]));\r\n        /* static */ const u16_v = STATIC(\"u16_v\", new Uint16Array([65535]));\r\n        /* static */ const s32_v = STATIC(\"s32_v\", new Int32Array([-1]));\r\n        /* static */ const u32_v = STATIC(\"u32_v\", new Uint32Array([-1]));\r\n        // /* static */ const s64_v = STATIC(\"s64_v\", new Int64Array([-1]));\r\n        // /* static */ const u64_v = STATIC(\"u64_v\", new Uint64Array([-1]));\r\n        /* static */ const f32_v = STATIC(\"f32_v\", new Float32Array([0.123]));\r\n        /* static */ const f64_v = STATIC(\"f64_v\", new Float64Array([90000.01234567890123456789]));\r\n\r\n        const drag_speed = 0.2;\r\n        /* static */ const drag_clamp: Static<boolean> = STATIC(\"drag_clamp\", false);\r\n        ImGui.Text(\"Drags:\");\r\n        ImGui.Checkbox(\"Clamp integers to 0..50\", (value = drag_clamp.value) => drag_clamp.value = value); ImGui.SameLine(); HelpMarker(\"As with every widgets in dear imgui, we never modify values unless there is a user interaction.\\nYou can override the clamping limits by using CTRL+Click to input a value.\");\r\n        // ImGui.DragScalar(\"drag s8\",        ImGuiDataType_S8,     &s8_v,  drag_speed, drag_clamp ? &s8_zero  : NULL, drag_clamp ? &s8_fifty  : NULL);\r\n        // ImGui.DragScalar(\"drag u8\",        ImGuiDataType_U8,     &u8_v,  drag_speed, drag_clamp ? &u8_zero  : NULL, drag_clamp ? &u8_fifty  : NULL, \"%u ms\");\r\n        // ImGui.DragScalar(\"drag s16\",       ImGuiDataType_S16,    &s16_v, drag_speed, drag_clamp ? &s16_zero : NULL, drag_clamp ? &s16_fifty : NULL);\r\n        // ImGui.DragScalar(\"drag u16\",       ImGuiDataType_U16,    &u16_v, drag_speed, drag_clamp ? &u16_zero : NULL, drag_clamp ? &u16_fifty : NULL, \"%u ms\");\r\n        // ImGui.DragScalar(\"drag s32\",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp.value ? &s32_zero : null, drag_clamp.value ? &s32_fifty : null);\r\n        // ImGui.DragScalar(\"drag u32\",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp.value ? &u32_zero : null, drag_clamp.value ? &u32_fifty : null, \"%u ms\");\r\n        // ImGui.DragScalar(\"drag s64\",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp.value ? &s64_zero : null, drag_clamp.value ? &s64_fifty : null);\r\n        // ImGui.DragScalar(\"drag u64\",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp.value ? &u64_zero : null, drag_clamp.value ? &u64_fifty : null);\r\n        // ImGui.DragScalar(\"drag float\",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, \"%f\", 1.0f);\r\n        // ImGui.DragScalar(\"drag float ^2\",  ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, \"%f\", 2.0f); ImGui.SameLine(); HelpMarker(\"You can use the 'power' parameter to increase tweaking precision on one side of the range.\");\r\n        // ImGui.DragScalar(\"drag double\",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, null,     \"%.10f grams\", 1.0f);\r\n        // ImGui.DragScalar(\"drag double ^2\", ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, \"0 < %.10f < 1\", 2.0f);\r\n        ImGui.DragScalar(\"drag s8\",        s8_v.value,  drag_speed, drag_clamp.value ? s8_zero  : null, drag_clamp.value ? s8_fifty  : null);\r\n        ImGui.DragScalar(\"drag u8\",        u8_v.value,  drag_speed, drag_clamp.value ? u8_zero  : null, drag_clamp.value ? u8_fifty  : null, \"%u ms\");\r\n        ImGui.DragScalar(\"drag s16\",       s16_v.value, drag_speed, drag_clamp.value ? s16_zero : null, drag_clamp.value ? s16_fifty : null);\r\n        ImGui.DragScalar(\"drag u16\",       u16_v.value, drag_speed, drag_clamp.value ? u16_zero : null, drag_clamp.value ? u16_fifty : null, \"%u ms\");\r\n        ImGui.DragScalar(\"drag s32\",       s32_v.value, drag_speed, drag_clamp.value ? s32_zero : null, drag_clamp.value ? s32_fifty : null);\r\n        ImGui.DragScalar(\"drag u32\",       u32_v.value, drag_speed, drag_clamp.value ? u32_zero : null, drag_clamp.value ? u32_fifty : null, \"%u ms\");\r\n        // ImGui.DragScalar(\"drag s64\",       s64_v.value, drag_speed, drag_clamp.value ? s64_zero : null, drag_clamp.value ? s64_fifty : null);\r\n        // ImGui.DragScalar(\"drag u64\",       u64_v.value, drag_speed, drag_clamp.value ? u64_zero : null, drag_clamp.value ? u64_fifty : null);\r\n        ImGui.DragScalar(\"drag float\",     f32_v.value, 0.005, f32_zero, f32_one, \"%f\", 1.0);\r\n        ImGui.DragScalar(\"drag float ^2\",  f32_v.value, 0.005, f32_zero, f32_one, \"%f\", 2.0);\r\n        ImGui.DragScalar(\"drag double\",    f64_v.value, 0.0005, f64_zero, null,    \"%.10f grams\", 1.0);\r\n        ImGui.DragScalar(\"drag double ^2\", f64_v.value, 0.0005, f64_zero, f64_one, \"0 < %.10f < 1\", 2.0);\r\n\r\n        ImGui.Text(\"Sliders\");\r\n        // ImGui.SliderScalar(\"slider s8 full\",     ImGuiDataType_S8,     &s8_v,  &s8_min,   &s8_max,   \"%d\");\r\n        // ImGui.SliderScalar(\"slider u8 full\",     ImGuiDataType_U8,     &u8_v,  &u8_min,   &u8_max,   \"%u\");\r\n        // ImGui.SliderScalar(\"slider s16 full\",    ImGuiDataType_S16,    &s16_v, &s16_min,  &s16_max,  \"%d\");\r\n        // ImGui.SliderScalar(\"slider u16 full\",    ImGuiDataType_U16,    &u16_v, &u16_min,  &u16_max,  \"%u\");\r\n        // ImGui.SliderScalar(\"slider s32 low\",     ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,\"%d\");\r\n        // ImGui.SliderScalar(\"slider s32 high\",    ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, \"%d\");\r\n        // ImGui.SliderScalar(\"slider s32 full\",    ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  \"%d\");\r\n        // ImGui.SliderScalar(\"slider u32 low\",     ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,\"%u\");\r\n        // ImGui.SliderScalar(\"slider u32 high\",    ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, \"%u\");\r\n        // ImGui.SliderScalar(\"slider u32 full\",    ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  \"%u\");\r\n        // ImGui.SliderScalar(\"slider s64 low\",     ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,\"%I64d\");\r\n        // ImGui.SliderScalar(\"slider s64 high\",    ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, \"%I64d\");\r\n        // ImGui.SliderScalar(\"slider s64 full\",    ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  \"%I64d\");\r\n        // ImGui.SliderScalar(\"slider u64 low\",     ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,\"%I64u ms\");\r\n        // ImGui.SliderScalar(\"slider u64 high\",    ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, \"%I64u ms\");\r\n        // ImGui.SliderScalar(\"slider u64 full\",    ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  \"%I64u ms\");\r\n        // ImGui.SliderScalar(\"slider float low\",   ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);\r\n        // ImGui.SliderScalar(\"slider float low^2\", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  \"%.10f\", 2.0f);\r\n        // ImGui.SliderScalar(\"slider float high\",  ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, \"%e\");\r\n        // ImGui.SliderScalar(\"slider double low\",  ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  \"%.10f grams\", 1.0f);\r\n        // ImGui.SliderScalar(\"slider double low^2\",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  \"%.10f\", 2.0f);\r\n        // ImGui.SliderScalar(\"slider double high\", ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, \"%e grams\", 1.0f);\r\n        ImGui.SliderScalar(\"slider s8 full\",     s8_v.value,  s8_min,   s8_max,   \"%d\");\r\n        ImGui.SliderScalar(\"slider u8 full\",     u8_v.value,  u8_min,   u8_max,   \"%u\");\r\n        ImGui.SliderScalar(\"slider s16 full\",    s16_v.value, s16_min,  s16_max,  \"%d\");\r\n        ImGui.SliderScalar(\"slider u16 full\",    u16_v.value, u16_min,  u16_max,  \"%u\");\r\n        ImGui.SliderScalar(\"slider s32 low\",     s32_v.value, s32_zero, s32_fifty,\"%d\");\r\n        ImGui.SliderScalar(\"slider s32 high\",    s32_v.value, s32_hi_a, s32_hi_b, \"%d\");\r\n        ImGui.SliderScalar(\"slider s32 full\",    s32_v.value, s32_min,  s32_max,  \"%d\");\r\n        ImGui.SliderScalar(\"slider u32 low\",     u32_v.value, u32_zero, u32_fifty,\"%u\");\r\n        ImGui.SliderScalar(\"slider u32 high\",    u32_v.value, u32_hi_a, u32_hi_b, \"%u\");\r\n        ImGui.SliderScalar(\"slider u32 full\",    u32_v.value, u32_min,  u32_max,  \"%u\");\r\n        // ImGui.SliderScalar(\"slider s64 low\",     s64_v.value, s64_zero, s64_fifty,\"%I64d\");\r\n        // ImGui.SliderScalar(\"slider s64 high\",    s64_v.value, s64_hi_a, s64_hi_b, \"%I64d\");\r\n        // ImGui.SliderScalar(\"slider s64 full\",    s64_v.value, s64_min,  s64_max,  \"%I64d\");\r\n        // ImGui.SliderScalar(\"slider u64 low\",     u64_v.value, u64_zero, u64_fifty,\"%I64u ms\");\r\n        // ImGui.SliderScalar(\"slider u64 high\",    u64_v.value, u64_hi_a, u64_hi_b, \"%I64u ms\");\r\n        // ImGui.SliderScalar(\"slider u64 full\",    u64_v.value, u64_min,  u64_max,  \"%I64u ms\");\r\n        ImGui.SliderScalar(\"slider float low\",   f32_v.value, f32_zero, f32_one);\r\n        ImGui.SliderScalar(\"slider float low^2\", f32_v.value, f32_zero, f32_one,  \"%.10f\", 2.0);\r\n        ImGui.SliderScalar(\"slider float high\",  f32_v.value, f32_lo_a, f32_hi_a, \"%e\");\r\n        ImGui.SliderScalar(\"slider double low\",  f64_v.value, f64_zero, f64_one,  \"%.10f grams\", 1.0);\r\n        ImGui.SliderScalar(\"slider double low^2\",f64_v.value, f64_zero, f64_one,  \"%.10f\", 2.0);\r\n        ImGui.SliderScalar(\"slider double high\", f64_v.value, f64_lo_a, f64_hi_a, \"%e grams\", 1.0);\r\n\r\n        /* static */ const inputs_step: Static<boolean> = STATIC(\"inputs_step\", true)\r\n        ImGui.Text(\"Inputs\");\r\n        ImGui.Checkbox(\"Show step buttons\", (value = inputs_step.value) => inputs_step.value = value);\r\n        // ImGui.InputScalar(\"input s8\",      ImGuiDataType_S8,     &s8_v,  inputs_step ? &s8_one  : NULL, NULL, \"%d\");\r\n        // ImGui.InputScalar(\"input u8\",      ImGuiDataType_U8,     &u8_v,  inputs_step ? &u8_one  : NULL, NULL, \"%u\");\r\n        // ImGui.InputScalar(\"input s16\",     ImGuiDataType_S16,    &s16_v, inputs_step ? &s16_one : NULL, NULL, \"%d\");\r\n        // ImGui.InputScalar(\"input u16\",     ImGuiDataType_U16,    &u16_v, inputs_step ? &u16_one : NULL, NULL, \"%u\");\r\n        // ImGui.InputScalar(\"input s32\",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, \"%d\");\r\n        // ImGui.InputScalar(\"input s32 hex\", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, \"%08X\", ImGuiInputTextFlags_CharsHexadecimal);\r\n        // ImGui.InputScalar(\"input u32\",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, \"%u\");\r\n        // ImGui.InputScalar(\"input u32 hex\", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, \"%08X\", ImGuiInputTextFlags_CharsHexadecimal);\r\n        // ImGui.InputScalar(\"input s64\",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL);\r\n        // ImGui.InputScalar(\"input u64\",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL);\r\n        // ImGui.InputScalar(\"input float\",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL);\r\n        // ImGui.InputScalar(\"input double\",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL);\r\n        ImGui.InputScalar(\"input s8\",      s8_v.value,  inputs_step.value ? s8_one  : null, null, \"%d\");\r\n        ImGui.InputScalar(\"input s8 hex\",  s8_v.value,  inputs_step.value ? s8_one  : null, null, \"%08X\", ImGuiInputTextFlags.CharsHexadecimal);\r\n        ImGui.InputScalar(\"input s16\",     s16_v.value, inputs_step.value ? s16_one : null, null, \"%d\");\r\n        ImGui.InputScalar(\"input s16 hex\", s16_v.value, inputs_step.value ? s16_one : null, null, \"%08X\", ImGuiInputTextFlags.CharsHexadecimal);\r\n        ImGui.InputScalar(\"input s32\",     s32_v.value, inputs_step.value ? s32_one : null, null, \"%d\");\r\n        ImGui.InputScalar(\"input s32 hex\", s32_v.value, inputs_step.value ? s32_one : null, null, \"%08X\", ImGuiInputTextFlags.CharsHexadecimal);\r\n        ImGui.InputScalar(\"input u32\",     u32_v.value, inputs_step.value ? u32_one : null, null, \"%u\");\r\n        ImGui.InputScalar(\"input u32 hex\", u32_v.value, inputs_step.value ? u32_one : null, null, \"%08X\", ImGuiInputTextFlags.CharsHexadecimal);\r\n        // ImGui.InputScalar(\"input s64\",     s64_v.value, inputs_step.value ? s64_one : null);\r\n        // ImGui.InputScalar(\"input u64\",     u64_v.value, inputs_step.value ? u64_one : null);\r\n        ImGui.InputScalar(\"input float\",   f32_v.value, inputs_step.value ? f32_one : null);\r\n        ImGui.InputScalar(\"input double\",  f64_v.value, inputs_step.value ? f64_one : null);\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Multi-component Widgets\"))\r\n    {\r\n        /* static */ const vec4f: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"vec4f\", [ 0.10, 0.20, 0.30, 0.44 ]);\r\n        /* static */ const vec4i: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"vec4i\", [ 1, 5, 100, 255 ]);\r\n\r\n        ImGui.InputFloat2(\"input float2\", vec4f.value);\r\n        ImGui.DragFloat2(\"drag float2\", vec4f.value, 0.01, 0.0, 1.0);\r\n        ImGui.SliderFloat2(\"slider float2\", vec4f.value, 0.0, 1.0);\r\n        ImGui.InputInt2(\"input int2\", vec4i.value);\r\n        ImGui.DragInt2(\"drag int2\", vec4i.value, 1, 0, 255);\r\n        ImGui.SliderInt2(\"slider int2\", vec4i.value, 0, 255);\r\n        ImGui.Spacing();\r\n\r\n        ImGui.InputFloat3(\"input float3\", vec4f.value);\r\n        ImGui.DragFloat3(\"drag float3\", vec4f.value, 0.01, 0.0, 1.0);\r\n        ImGui.SliderFloat3(\"slider float3\", vec4f.value, 0.0, 1.0);\r\n        ImGui.InputInt3(\"input int3\", vec4i.value);\r\n        ImGui.DragInt3(\"drag int3\", vec4i.value, 1, 0, 255);\r\n        ImGui.SliderInt3(\"slider int3\", vec4i.value, 0, 255);\r\n        ImGui.Spacing();\r\n\r\n        ImGui.InputFloat4(\"input float4\", vec4f.value);\r\n        ImGui.DragFloat4(\"drag float4\", vec4f.value, 0.01, 0.0, 1.0);\r\n        ImGui.SliderFloat4(\"slider float4\", vec4f.value, 0.0, 1.0);\r\n        ImGui.InputInt4(\"input int4\", vec4i.value);\r\n        ImGui.DragInt4(\"drag int4\", vec4i.value, 1, 0, 255);\r\n        ImGui.SliderInt4(\"slider int4\", vec4i.value, 0, 255);\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Vertical Sliders\"))\r\n    {\r\n        const spacing: number = 4;\r\n        ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new ImVec2(spacing, spacing));\r\n\r\n        /* static */ const int_value: Static<number> = STATIC(\"int_value\", 0);\r\n        ImGui.VSliderInt(\"##int\", new ImVec2(18, 160), (value = int_value.value) => int_value.value = value, 0, 5);\r\n        ImGui.SameLine();\r\n\r\n        /* static */ const values: Static<number[]> = STATIC(\"values#1072\", [ 0.0, 0.60, 0.35, 0.9, 0.70, 0.20, 0.0 ]);\r\n        ImGui.PushID(\"set1\");\r\n        for (let i = 0; i < 7; i++)\r\n        {\r\n            if (i > 0) ImGui.SameLine();\r\n            ImGui.PushID(i);\r\n            ImGui.PushStyleColor(ImGuiCol.FrameBg, ImColor.HSV(i / 7.0, 0.5, 0.5));\r\n            ImGui.PushStyleColor(ImGuiCol.FrameBgHovered, ImColor.HSV(i / 7.0, 0.6, 0.5));\r\n            ImGui.PushStyleColor(ImGuiCol.FrameBgActive, ImColor.HSV(i / 7.0, 0.7, 0.5));\r\n            ImGui.PushStyleColor(ImGuiCol.SliderGrab, ImColor.HSV(i / 7.0, 0.9, 0.9));\r\n            ImGui.VSliderFloat(\"##v\", new ImVec2(18, 160), (value = values.value[i]) => values.value[i] = value, 0.0, 1.0, \"\");\r\n            if (ImGui.IsItemActive() || ImGui.IsItemHovered())\r\n                ImGui.SetTooltip(`${values.value[i].toFixed(3)}`);\r\n            ImGui.PopStyleColor(4);\r\n            ImGui.PopID();\r\n        }\r\n        ImGui.PopID();\r\n\r\n        ImGui.SameLine();\r\n        ImGui.PushID(\"set2\");\r\n        /* static */ const values2: Static<number[/*4*/]> = STATIC(\"values2\", [ 0.20, 0.80, 0.40, 0.25 ]);\r\n        const rows: number = 3;\r\n        const small_slider_size: Readonly<ImVec2> = new ImVec2(18, (160.0 - (rows - 1) * spacing) / rows);\r\n        for (let nx = 0; nx < 4; nx++)\r\n        {\r\n            if (nx > 0) ImGui.SameLine();\r\n            ImGui.BeginGroup();\r\n            for (let ny = 0; ny < rows; ny++)\r\n            {\r\n                ImGui.PushID(nx * rows + ny);\r\n                ImGui.VSliderFloat(\"##v\", small_slider_size, (value = values2.value[nx]) => values2.value[nx] = value, 0.0, 1.0, \"\");\r\n                if (ImGui.IsItemActive() || ImGui.IsItemHovered())\r\n                    ImGui.SetTooltip(`${values2.value[nx].toFixed(3)}`);\r\n                ImGui.PopID();\r\n            }\r\n            ImGui.EndGroup();\r\n        }\r\n        ImGui.PopID();\r\n\r\n        ImGui.SameLine();\r\n        ImGui.PushID(\"set3\");\r\n        for (let i = 0; i < 4; i++)\r\n        {\r\n            if (i > 0) ImGui.SameLine();\r\n            ImGui.PushID(i);\r\n            ImGui.PushStyleVar(ImGuiStyleVar.GrabMinSize, 40);\r\n            ImGui.VSliderFloat(\"##v\", new ImVec2(40, 160), (value = values.value[i]) => values.value[i] = value, 0.0, 1.0, \"%.2f\\nsec\");\r\n            ImGui.PopStyleVar();\r\n            ImGui.PopID();\r\n        }\r\n        ImGui.PopID();\r\n        ImGui.PopStyleVar();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Drag and Drop\"))\r\n    {\r\n        {\r\n            // ColorEdit widgets automatically act as drag source and drag target.\r\n            // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F to allow your own widgets\r\n            // to use colors in their drag and drop interaction. Also see the demo in Color Picker -> Palette demo.\r\n            ImGui.BulletText(\"Drag and drop in standard widgets\");\r\n            ImGui.Indent();\r\n            /* static */ const col1: Static<ImTuple3<number>> = STATIC<ImTuple3<number>>(\"col1#1309\", [ 1.0, 0.0, 0.2 ]);\r\n            /* static */ const col2: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"col2#1310\", [ 0.4, 0.7, 0.0, 0.5 ]);\r\n            ImGui.ColorEdit3(\"color 1\", col1.value);\r\n            ImGui.ColorEdit4(\"color 2\", col2.value);\r\n            ImGui.Unindent();\r\n        }\r\n\r\n        {\r\n            ImGui.BulletText(\"Drag and drop to copy/swap items\");\r\n            ImGui.Indent();\r\n            enum Mode\r\n            {\r\n                Mode_Copy,\r\n                Mode_Move,\r\n                Mode_Swap\r\n            };\r\n            /* static */ const mode: Static<number> = STATIC(\"mode\", 0);\r\n            if (ImGui.RadioButton(\"Copy\", mode.value === Mode.Mode_Copy)) { mode.value = Mode.Mode_Copy; } ImGui.SameLine();\r\n            if (ImGui.RadioButton(\"Move\", mode.value === Mode.Mode_Move)) { mode.value = Mode.Mode_Move; } ImGui.SameLine();\r\n            if (ImGui.RadioButton(\"Swap\", mode.value === Mode.Mode_Swap)) { mode.value = Mode.Mode_Swap; }\r\n            /* static */ const names: Static<string[/*9*/]> = STATIC(\"names\", [ \"Bobby\", \"Beatrice\", \"Betty\", \"Brianna\", \"Barry\", \"Bernard\", \"Bibi\", \"Blaine\", \"Bryn\" ]);\r\n            for (let n = 0; n < IM_ARRAYSIZE(names.value); n++)\r\n            {\r\n                ImGui.PushID(n);\r\n                if ((n % 3) != 0)\r\n                    ImGui.SameLine();\r\n                ImGui.Button(names.value[n], new ImVec2(60,60));\r\n\r\n                // Our buttons are both drag sources and drag targets here!\r\n                if (ImGui.BeginDragDropSource(ImGui.DragDropFlags.None))\r\n                {\r\n                    // ImGui.SetDragDropPayload(\"DND_DEMO_CELL\", &n, sizeof(int));        // Set payload to carry the index of our item (could be anything)\r\n                    ImGui.SetDragDropPayload(\"DND_DEMO_CELL\", { n }); // Set payload to carry the index of our item (could be anything)\r\n                    if (mode.value === Mode.Mode_Copy) { ImGui.Text(`Copy ${names.value[n]}`); } // Display preview (could be anything, e.g. when dragging an image we could decide to display the filename and a small preview of the image, etc.)\r\n                    if (mode.value === Mode.Mode_Move) { ImGui.Text(`Move ${names.value[n]}`); }\r\n                    if (mode.value === Mode.Mode_Swap) { ImGui.Text(`Swap ${names.value[n]}`); }\r\n                    ImGui.EndDragDropSource();\r\n                }\r\n                if (ImGui.BeginDragDropTarget())\r\n                {\r\n                    let payload: ImGui.ImGuiPayload<{ n: number }> | null;\r\n                    if (payload = ImGui.AcceptDragDropPayload(\"DND_DEMO_CELL\"))\r\n                    {\r\n                        // IM_ASSERT(payload->DataSize == sizeof(int));\r\n                        // int payload_n = *(const int*)payload->Data;\r\n                        const payload_n: number = payload.Data.n;\r\n                        if (mode.value === Mode.Mode_Copy)\r\n                        {\r\n                            names.value[n] = names.value[payload_n];\r\n                        }\r\n                        if (mode.value === Mode.Mode_Move)\r\n                        {\r\n                            names.value[n] = names.value[payload_n];\r\n                            names.value[payload_n] = \"\";\r\n                        }\r\n                        if (mode.value === Mode.Mode_Swap)\r\n                        {\r\n                            const tmp: string = names.value[n];\r\n                            names.value[n] = names.value[payload_n];\r\n                            names.value[payload_n] = tmp;\r\n                        }\r\n                    }\r\n                    ImGui.EndDragDropTarget();\r\n                }\r\n                ImGui.PopID();\r\n            }\r\n            ImGui.Unindent();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Querying Status (Active/Focused/Hovered etc.)\"))\r\n    {\r\n        // Display the value of IsItemHovered() and other common item state functions. Note that the flags can be combined.\r\n        // (because BulletText is an item itself and that would affect the output of IsItemHovered() we pass all state in a single call to simplify the code).\r\n        /* static */ const item_type: Static<number> = STATIC(\"item_type\", 1);\r\n        /* static */ const b: Static<boolean> = STATIC(\"b#1302\", false);\r\n        /* static */ const col4f: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"col4f\", [ 1.0, 0.5, 0.0, 1.0 ]);\r\n        ImGui.RadioButton(\"Text\", (value = item_type.value) => item_type.value = value, 0);\r\n        ImGui.RadioButton(\"Button\", (value = item_type.value) => item_type.value = value, 1);\r\n        ImGui.RadioButton(\"Checkbox\", (value = item_type.value) => item_type.value = value, 2);\r\n        ImGui.RadioButton(\"SliderFloat\", (value = item_type.value) => item_type.value = value, 3);\r\n        ImGui.RadioButton(\"InputText\", (value = item_type.value) => item_type.value = value, 4);\r\n        ImGui.RadioButton(\"InputFloat3\", (value = item_type.value) => item_type.value = value, 5);\r\n        ImGui.RadioButton(\"ColorEdit4\", (value = item_type.value) => item_type.value = value, 6);\r\n        ImGui.RadioButton(\"MenuItem\", (value = item_type.value) => item_type.value = value, 7);\r\n        ImGui.RadioButton(\"TreeNode (w/ double-click)\", (value = item_type.value) => item_type.value = value, 8);\r\n        ImGui.RadioButton(\"ListBox\", (value = item_type.value) => item_type.value = value, 9);\r\n        ImGui.Separator();\r\n        let ret: boolean = false;\r\n        if (item_type.value === 0) { ImGui.Text(\"ITEM: Text\"); }                                                     // Testing text items with no identifier/interaction\r\n        if (item_type.value === 1) { ret = ImGui.Button(\"ITEM: Button\"); }                                           // Testing button\r\n        if (item_type.value === 2) { ret = ImGui.Checkbox(\"ITEM: Checkbox\", (value = b.value) => b.value = value); } // Testing checkbox\r\n        if (item_type.value === 3) { ret = ImGui.SliderFloat(\"ITEM: SliderFloat\", (value = col4f.value[0]) => col4f.value[0] = value, 0.0, 1.0); } // Testing basic item\r\n        // if (item_type.value === 4) { ret = ImGui.InputText(\"ITEM: InputText\", &str[0], IM_ARRAYSIZE(str)); }  // Testing input text (which handles tabbing)\r\n        // if (item_type.value === 5) { ret = ImGui.InputFloat3(\"ITEM: InputFloat3\", col4f); }                   // Testing multi-component items (IsItemXXX flags are reported merged)\r\n        if (item_type.value === 6) { ret = ImGui.ColorEdit4(\"ITEM: ColorEdit4\", col4f.value); }                      // Testing multi-component items (IsItemXXX flags are reported merged)\r\n        // if (item_type == 7) { ret = ImGui.MenuItem(\"ITEM: MenuItem\"); }                                // Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)\r\n        // if (item_type == 8) { ret = ImGui.TreeNodeEx(\"ITEM: TreeNode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick\", ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_NoTreePushOnOpen); } // Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.\r\n        if (item_type.value === 9) { const items: string[] = [ \"Apple\", \"Banana\", \"Cherry\", \"Kiwi\" ]; /* static */ const current: Static<number> = STATIC(\"current\", 1); ret = ImGui.ListBox(\"ITEM: ListBox\", (value = current.value) => current.value = value, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }\r\n        ImGui.BulletText(\r\n            `Return value = ${ret}\\n` +\r\n            `IsItemFocused() = ${ImGui.IsItemFocused()}\\n` +\r\n            `IsItemHovered() = ${ImGui.IsItemHovered()}\\n` +\r\n            `IsItemHovered(_AllowWhenBlockedByPopup) = ${ImGui.IsItemHovered(ImGuiHoveredFlags.AllowWhenBlockedByPopup)}\\n` +\r\n            `IsItemHovered(_AllowWhenBlockedByActiveItem) = ${ImGui.IsItemHovered(ImGuiHoveredFlags.AllowWhenBlockedByActiveItem)}\\n` +\r\n            `IsItemHovered(_AllowWhenOverlapped) = ${ImGui.IsItemHovered(ImGuiHoveredFlags.AllowWhenOverlapped)}\\n` +\r\n            `IsItemhovered(_RectOnly) = ${ImGui.IsItemHovered(ImGuiHoveredFlags.RectOnly)}\\n` +\r\n            `IsItemActive() = ${ImGui.IsItemActive()}\\n` +\r\n            `IsItemEdited() = ${ImGui.IsItemEdited()}\\n` +\r\n            `IsItemActivated() = ${ImGui.IsItemActivated()}\\n` +\r\n            `IsItemDeactivated() = ${ImGui.IsItemDeactivated()}\\n` +\r\n            `IsItemDeactivatedAfterEdit() = ${ImGui.IsItemDeactivatedAfterEdit()}\\n` +\r\n            `IsItemVisible() = ${ImGui.IsItemVisible()}\\n` +\r\n            `IsItemClicked() = ${ImGui.IsItemClicked()}\\n` +\r\n            `GetItemRectMin() = (${ImGui.GetItemRectMin().x.toFixed(1)}, ${ImGui.GetItemRectMin().y.toFixed(1)})\\n` +\r\n            `GetItemRectMax() = (${ImGui.GetItemRectMax().x.toFixed(1)}, ${ImGui.GetItemRectMax().y.toFixed(1)})\\n` +\r\n            `GetItemRectSize() = (${ImGui.GetItemRectSize().x.toFixed(1)}, ${ImGui.GetItemRectSize().y.toFixed(1)})`\r\n        );\r\n\r\n        /* static */ const embed_all_inside_a_child_window: Static<boolean> = STATIC(\"embed_all_inside_a_child_window\", false);\r\n        ImGui.Checkbox(\"Embed everything inside a child window (for additional testing)\", (value = embed_all_inside_a_child_window.value) => embed_all_inside_a_child_window.value = value);\r\n        if (embed_all_inside_a_child_window.value)\r\n            ImGui.BeginChild(\"outer_child\", new ImVec2(0, ImGui.GetFontSize() * 20), true);\r\n\r\n        // Testing IsWindowFocused() function with its various flags. Note that the flags can be combined.\r\n        ImGui.BulletText(\r\n            `IsWindowFocused() = ${ImGui.IsWindowFocused()}\\n` +\r\n            `IsWindowFocused(_ChildWindows) = ${ImGui.IsWindowFocused(ImGuiFocusedFlags.ChildWindows)}\\n` +\r\n            `IsWindowFocused(_ChildWindows|_RootWindow) = ${ImGui.IsWindowFocused(ImGuiFocusedFlags.ChildWindows | ImGuiFocusedFlags.RootWindow)}\\n` +\r\n            `IsWindowFocused(_RootWindow) = ${ImGui.IsWindowFocused(ImGuiFocusedFlags.RootWindow)}\\n` +\r\n            `IsWindowFocused(_AnyWindow) = ${ImGui.IsWindowFocused(ImGuiFocusedFlags.AnyWindow)}\\n`);\r\n\r\n        // Testing IsWindowHovered() function with its various flags. Note that the flags can be combined.\r\n        ImGui.BulletText(\r\n            `IsWindowHovered() = ${ImGui.IsWindowHovered()}\\n` +\r\n            `IsWindowHovered(_AllowWhenBlockedByPopup) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.AllowWhenBlockedByPopup)}\\n` +\r\n            `IsWindowHovered(_AllowWhenBlockedByActiveItem) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.AllowWhenBlockedByActiveItem)}\\n` +\r\n            `IsWindowHovered(_ChildWindows) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.ChildWindows)}\\n` +\r\n            `IsWindowHovered(_ChildWindows|_RootWindow) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.ChildWindows | ImGuiHoveredFlags.RootWindow)}\\n` +\r\n            `IsWindowFocused(_ChildWindows|_AllowWhenBlockedByPopup) = ${ImGui.IsWindowFocused(ImGuiHoveredFlags.ChildWindows | ImGuiHoveredFlags.AllowWhenBlockedByPopup)}\\n` +\r\n            `IsWindowHovered(_RootWindow) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.RootWindow)}\\n` +\r\n            `IsWindowHovered(_AnyWindow) = ${ImGui.IsWindowHovered(ImGuiHoveredFlags.AnyWindow)}\\n`);\r\n\r\n        ImGui.BeginChild(\"child\", new ImVec2(0, 50), true);\r\n        ImGui.Text(\"This is another child window for testing the _ChildWindows flag.\");\r\n        ImGui.EndChild();\r\n\r\n        if (embed_all_inside_a_child_window.value)\r\n            ImGui.EndChild();\r\n\r\n        // static char dummy_str[] = \"This is a dummy field to be able to tab-out of the widgets above.\";\r\n        // ImGui.InputText(\"dummy\", dummy_str, IM_ARRAYSIZE(dummy_str), ImGuiInputTextFlags_ReadOnly);\r\n\r\n        // Calling IsItemHovered() after begin returns the hovered status of the title bar.\r\n        // This is useful in particular if you want to create a context menu (with BeginPopupContextItem) associated to the title bar of a window.\r\n        /* static */ const test_window: Static<boolean> = STATIC(\"test_window\", false);\r\n        ImGui.Checkbox(\"Hovered/Active tests after Begin() for title bar testing\", (value = test_window.value) => test_window.value = value);\r\n        if (test_window.value)\r\n        {\r\n            ImGui.Begin(\"Title bar Hovered/Active tests\", (value = test_window.value) => test_window.value = value);\r\n            if (ImGui.BeginPopupContextItem()) // <-- This is using IsItemHovered()\r\n            {\r\n                if (ImGui.MenuItem(\"Close\")) { test_window.value = false; }\r\n                ImGui.EndPopup();\r\n            }\r\n            ImGui.Text(\r\n                `IsItemHovered() after begin = ${ImGui.IsItemHovered()} (== is title bar hovered)\\n` +\r\n                `IsItemActive() after begin = ${ImGui.IsItemActive()} (== is window being clicked/moved)\\n`);\r\n            ImGui.End();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n}\r\n\r\nfunction ShowDemoWindowLayout()\r\n{\r\n    if (!ImGui.CollapsingHeader(\"Layout\"))\r\n        return;\r\n\r\n    if (ImGui.TreeNode(\"Child windows\"))\r\n    {\r\n        HelpMarker(\"Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window.\");\r\n        /* static */ const disable_mouse_wheel: Static<boolean> = STATIC(\"disable_mouse_wheel\", false);\r\n        /* static */ const disable_menu: Static<boolean> = STATIC(\"disable_menu\", false);\r\n        ImGui.Checkbox(\"Disable Mouse Wheel\", (value = disable_mouse_wheel.value) => disable_mouse_wheel.value = value);\r\n        ImGui.Checkbox(\"Disable Menu\", (value = disable_menu.value) => disable_menu.value = value);\r\n\r\n        /* static */ const line: Static<number> = STATIC(\"line\", 50);\r\n        let goto_line: boolean = ImGui.Button(\"Goto\");\r\n        ImGui.SameLine();\r\n        ImGui.SetNextItemWidth(100);\r\n        goto_line = ImGui.InputInt(\"##Line\", (value = line.value) => line.value = value, 0, 0, ImGuiInputTextFlags.EnterReturnsTrue) || goto_line;\r\n\r\n        // Child 1: no border, enable horizontal scrollbar\r\n        {\r\n            const window_flags = ImGuiWindowFlags.HorizontalScrollbar | (disable_mouse_wheel.value ? ImGuiWindowFlags.NoScrollWithMouse : 0);\r\n            ImGui.BeginChild(\"Child1\", new ImVec2(ImGui.GetWindowContentRegionWidth() * 0.5, 260), false, window_flags);\r\n            for (let i = 0; i < 100; i++)\r\n            {\r\n                ImGui.Text(`${format_number_dec(i, 4)}: scrollable region`);\r\n                if (goto_line && line.value === i)\r\n                    ImGui.SetScrollHereY();\r\n            }\r\n            if (goto_line && line.value >= 100)\r\n                ImGui.SetScrollHereY();\r\n            ImGui.EndChild();\r\n        }\r\n\r\n        ImGui.SameLine();\r\n\r\n        // Child 2: rounded border\r\n        {\r\n            const window_flags = (disable_mouse_wheel.value ? ImGuiWindowFlags.NoScrollWithMouse : 0) | (disable_menu.value ? 0 : ImGuiWindowFlags.MenuBar);\r\n            ImGui.PushStyleVar(ImGuiStyleVar.ChildRounding, 5.0);\r\n            ImGui.BeginChild(\"Child2\", new ImVec2(0, 260), true, window_flags);\r\n            if (!disable_menu.value && ImGui.BeginMenuBar())\r\n            {\r\n                if (ImGui.BeginMenu(\"Menu\"))\r\n                {\r\n                    ShowExampleMenuFile();\r\n                    ImGui.EndMenu();\r\n                }\r\n                ImGui.EndMenuBar();\r\n            }\r\n            ImGui.Columns(2);\r\n            for (let i = 0; i < 100; i++)\r\n            {\r\n                // sprintf(buf, \"%03d\", i);\r\n                const buf: string = `${format_number_dec(i, 3)}`;\r\n                ImGui.Button(buf, new ImVec2(-1.0, 0.0));\r\n                ImGui.NextColumn();\r\n            }\r\n            ImGui.EndChild();\r\n            ImGui.PopStyleVar();\r\n        }\r\n\r\n        ImGui.Separator();\r\n\r\n        // Demonstrate a few extra things\r\n        // - Changing ImGuiCol_ChildBg (which is transparent black in default styles)\r\n        // - Using SetCursorPos() to position the child window (because the child window is an item from the POV of the parent window)\r\n        //   You can also call SetNextWindowPos() to position the child window. The parent window will effectively layout from this position.\r\n        // - Using ImGui.GetItemRectMin/Max() to query the \"item\" state (because the child window is an item from the POV of the parent window)\r\n        //   See \"Widgets\" -> \"Querying Status (Active/Focused/Hovered etc.)\" section for more details about this.\r\n        {\r\n            ImGui.SetCursorPosX(50);\r\n            ImGui.PushStyleColor(ImGuiCol.ChildBg, IM_COL32(255, 0, 0, 100));\r\n            ImGui.BeginChild(\"blah\", new ImVec2(200, 100), true, ImGuiWindowFlags.None);\r\n            for (let n = 0; n < 50; n++)\r\n                ImGui.Text(`Some test ${n}`);\r\n            ImGui.EndChild();\r\n            const child_rect_min = ImGui.GetItemRectMin();\r\n            const child_rect_max = ImGui.GetItemRectMax();\r\n            ImGui.PopStyleColor();\r\n            ImGui.Text(`Rect of child window is: (${child_rect_min.x.toFixed(0)},${child_rect_min.y.toFixed(0)}) (${child_rect_max.x.toFixed(0)},${child_rect_max.y.toFixed(0)})`);\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Widgets Width\"))\r\n    {\r\n        // Use SetNextItemWidth() to set the width of a single upcoming item.\r\n        // Use PushItemWidth()/PopItemWidth() to set the width of a group of items.\r\n        /* static */ const f: Static<number> = STATIC(\"f#1181\", 0.0);\r\n        ImGui.Text(\"SetNextItemWidth/PushItemWidth(100)\");\r\n        ImGui.SameLine(); HelpMarker(\"Fixed width.\");\r\n        ImGui.SetNextItemWidth(100);\r\n        ImGui.DragFloat(\"float##1\", (value = f.value) => f.value = value);\r\n\r\n        ImGui.Text(\"SetNextItemWidth/PushItemWidth(GetWindowWidth() * 0.5f)\");\r\n        ImGui.SameLine(); HelpMarker(\"Half of window width.\");\r\n        ImGui.SetNextItemWidth(ImGui.GetWindowWidth() * 0.5);\r\n        ImGui.DragFloat(\"float##2\", (value = f.value) => f.value = value);\r\n\r\n        ImGui.Text(\"SetNextItemWidth/PushItemWidth(GetContentRegionAvail().x * 0.5f)\");\r\n        ImGui.SameLine(); HelpMarker(\"Half of available width.\\n(~ right-cursor_pos)\\n(works within a column set)\");\r\n        ImGui.SetNextItemWidth(ImGui.GetContentRegionAvail().x * 0.5);\r\n        ImGui.DragFloat(\"float##3\", (value = f.value) => f.value = value);\r\n\r\n        ImGui.Text(\"SetNextItemWidth/PushItemWidth(-100)\");\r\n        ImGui.SameLine(); HelpMarker(\"Align to right edge minus 100\");\r\n        ImGui.SetNextItemWidth(-100);\r\n        ImGui.DragFloat(\"float##4\", (value = f.value) => f.value = value);\r\n\r\n        // Demonstrate using PushItemWidth to surround three items. Calling SetNextItemWidth() before each of them would have the same effect.\r\n        ImGui.Text(\"SetNextItemWidth/PushItemWidth(-1)\");\r\n        ImGui.SameLine(); HelpMarker(\"Align to right edge\");\r\n        ImGui.PushItemWidth(-1);\r\n        ImGui.DragFloat(\"float##5a\", (value = f.value) => f.value = value);\r\n        ImGui.DragFloat(\"float##5b\", (value = f.value) => f.value = value);\r\n        ImGui.DragFloat(\"float##5c\", (value = f.value) => f.value = value);\r\n        ImGui.PopItemWidth();\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Basic Horizontal Layout\"))\r\n    {\r\n        ImGui.TextWrapped(\"(Use ImGui.SameLine() to keep adding items to the right of the preceding item)\");\r\n\r\n        // Text\r\n        ImGui.Text(\"Two items: Hello\"); ImGui.SameLine();\r\n        ImGui.TextColored(new ImVec4(1, 1, 0, 1), \"Sailor\");\r\n\r\n        // Adjust spacing\r\n        ImGui.Text(\"More spacing: Hello\"); ImGui.SameLine(0, 20);\r\n        ImGui.TextColored(new ImVec4(1, 1, 0, 1), \"Sailor\");\r\n\r\n        // Button\r\n        ImGui.AlignTextToFramePadding();\r\n        ImGui.Text(\"Normal buttons\"); ImGui.SameLine();\r\n        ImGui.Button(\"Banana\"); ImGui.SameLine();\r\n        ImGui.Button(\"Apple\"); ImGui.SameLine();\r\n        ImGui.Button(\"Corniflower\");\r\n\r\n        // Button\r\n        ImGui.Text(\"Small buttons\"); ImGui.SameLine();\r\n        ImGui.SmallButton(\"Like this one\"); ImGui.SameLine();\r\n        ImGui.Text(\"can fit within a text block.\");\r\n\r\n        // Aligned to arbitrary position. Easy/cheap column.\r\n        ImGui.Text(\"Aligned\");\r\n        ImGui.SameLine(150); ImGui.Text(\"x=150\");\r\n        ImGui.SameLine(300); ImGui.Text(\"x=300\");\r\n        ImGui.Text(\"Aligned\");\r\n        ImGui.SameLine(150); ImGui.SmallButton(\"x=150\");\r\n        ImGui.SameLine(300); ImGui.SmallButton(\"x=300\");\r\n\r\n        // Checkbox\r\n        /* static */ const c1: Static<boolean> = STATIC(\"c1\", false), c2: Static<boolean> = STATIC(\"c2\", false), c3: Static<boolean> = STATIC(\"c3\", false), c4: Static<boolean> = STATIC(\"c4\", false);\r\n        ImGui.Checkbox(\"My\", (value = c1.value) => c1.value = value); ImGui.SameLine();\r\n        ImGui.Checkbox(\"Tailor\", (value = c2.value) => c2.value = value); ImGui.SameLine();\r\n        ImGui.Checkbox(\"Is\", (value = c3.value) => c3.value = value); ImGui.SameLine();\r\n        ImGui.Checkbox(\"Rich\", (value = c4.value) => c4.value = value);\r\n\r\n        // Various\r\n        /* static */ const f0: Static<number> = STATIC(\"f0#1255\", 1.0), f1: Static<number> = STATIC(\"f1#1255\", 2.0), f2: Static<number> = STATIC(\"f2\", 3.0);\r\n        ImGui.PushItemWidth(80);\r\n        const items: string[] = [ \"AAAA\", \"BBBB\", \"CCCC\", \"DDDD\" ];\r\n        /* static */ const item: Static<number> = STATIC(\"item#1258\", -1);\r\n        ImGui.Combo(\"Combo\", (value = item.value) => item.value = value, items, IM_ARRAYSIZE(items)); ImGui.SameLine();\r\n        ImGui.SliderFloat(\"X\", (value = f0.value) => f0.value = value, 0.0, 5.0); ImGui.SameLine();\r\n        ImGui.SliderFloat(\"Y\", (value = f1.value) => f1.value = value, 0.0, 5.0); ImGui.SameLine();\r\n        ImGui.SliderFloat(\"Z\", (value = f2.value) => f2.value = value, 0.0, 5.0);\r\n        ImGui.PopItemWidth();\r\n\r\n        ImGui.PushItemWidth(80);\r\n        ImGui.Text(\"Lists:\");\r\n        /* static */ const selection: Static<number[/*4*/]> = STATIC(\"selection\", [ 0, 1, 2, 3 ]);\r\n        for (let i = 0; i < 4; i++)\r\n        {\r\n            if (i > 0) ImGui.SameLine();\r\n            ImGui.PushID(i);\r\n            ImGui.ListBox(\"\", (value = selection.value[i]) => selection.value[i] = value, items, IM_ARRAYSIZE(items));\r\n            ImGui.PopID();\r\n            if (ImGui.IsItemHovered()) ImGui.SetTooltip(`ListBox ${i} hovered`);\r\n        }\r\n        ImGui.PopItemWidth();\r\n\r\n        // Dummy\r\n        const button_sz: Readonly<ImVec2> = new ImVec2(40, 40);\r\n        ImGui.Button(\"A\", button_sz); ImGui.SameLine();\r\n        ImGui.Dummy(button_sz); ImGui.SameLine();\r\n        ImGui.Button(\"B\", button_sz);\r\n\r\n        // Manually wrapping (we should eventually provide this as an automatic layout feature, but for now you can do it manually)\r\n        ImGui.Text(\"Manually wrapping:\");\r\n        const style: ImGuiStyle = ImGui.GetStyle();\r\n        const buttons_count: number = 20;\r\n        const window_visible_x2: number = ImGui.GetWindowPos().x + ImGui.GetWindowContentRegionMax().x;\r\n        for (let n = 0; n < buttons_count; n++)\r\n        {\r\n            ImGui.PushID(n);\r\n            ImGui.Button(\"Box\", button_sz);\r\n            const last_button_x2: number = ImGui.GetItemRectMax().x;\r\n            const next_button_x2: number = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line\r\n            if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)\r\n                ImGui.SameLine();\r\n            ImGui.PopID();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Tabs\"))\r\n    {\r\n        if (ImGui.TreeNode(\"Basic\"))\r\n        {\r\n            const tab_bar_flags = ImGuiTabBarFlags.None;\r\n            if (ImGui.BeginTabBar(\"MyTabBar\", tab_bar_flags))\r\n            {\r\n                if (ImGui.BeginTabItem(\"Avocado\"))\r\n                {\r\n                    ImGui.Text(\"This is the Avocado tab!\\nblah blah blah blah blah\");\r\n                    ImGui.EndTabItem();\r\n                }\r\n                if (ImGui.BeginTabItem(\"Broccoli\"))\r\n                {\r\n                    ImGui.Text(\"This is the Broccoli tab!\\nblah blah blah blah blah\");\r\n                    ImGui.EndTabItem();\r\n                }\r\n                if (ImGui.BeginTabItem(\"Cucumber\"))\r\n                {\r\n                    ImGui.Text(\"This is the Cucumber tab!\\nblah blah blah blah blah\");\r\n                    ImGui.EndTabItem();\r\n                }\r\n                ImGui.EndTabBar();\r\n            }\r\n            ImGui.Separator();\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Advanced & Close Button\"))\r\n        {\r\n            // Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).\r\n            /* static */ const tab_bar_flags: Static<ImGuiTabBarFlags> = STATIC(\"tab_bar_flags\", ImGuiTabBarFlags.Reorderable);\r\n            ImGui.CheckboxFlags(\"ImGuiTabBarFlags_Reorderable\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGui.TabBarFlags.Reorderable);\r\n            ImGui.CheckboxFlags(\"ImGuiTabBarFlags_AutoSelectNewTabs\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGui.TabBarFlags.AutoSelectNewTabs);\r\n            ImGui.CheckboxFlags(\"ImGuiTabBarFlags_TabListPopupButton\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGuiTabBarFlags.TabListPopupButton);\r\n            ImGui.CheckboxFlags(\"ImGuiTabBarFlags_NoCloseWithMiddleMouseButton\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGui.TabBarFlags.NoCloseWithMiddleMouseButton);\r\n            if ((tab_bar_flags.value & ImGuiTabBarFlags.FittingPolicyMask_) === 0)\r\n                tab_bar_flags.value |= ImGuiTabBarFlags.FittingPolicyDefault_;\r\n            if (ImGui.CheckboxFlags(\"ImGuiTabBarFlags_FittingPolicyResizeDown\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGuiTabBarFlags.FittingPolicyResizeDown))\r\n                tab_bar_flags.value &= ~(ImGuiTabBarFlags.FittingPolicyMask_ ^ ImGuiTabBarFlags.FittingPolicyResizeDown);\r\n            if (ImGui.CheckboxFlags(\"ImGuiTabBarFlags_FittingPolicyScroll\", (value = tab_bar_flags.value) => tab_bar_flags.value = value, ImGuiTabBarFlags.FittingPolicyScroll))\r\n                tab_bar_flags.value &= ~(ImGuiTabBarFlags.FittingPolicyMask_ ^ ImGuiTabBarFlags.FittingPolicyScroll);\r\n\r\n            // Tab Bar\r\n            const names = [ \"Artichoke\", \"Beetroot\", \"Celery\", \"Daikon\" ];\r\n            /* static */ const opened: Static<boolean[]> = STATIC(\"opened\", [ true, true, true, true ]); // Persistent user state\r\n            for (let n = 0; n < IM_ARRAYSIZE(opened.value); n++)\r\n            {\r\n                if (n > 0) { ImGui.SameLine(); }\r\n                ImGui.Checkbox(names[n], (value = opened.value[n]) => opened.value[n] = value);\r\n            }\r\n\r\n            // Passing a bool* to BeginTabItem() is similar to passing one to Begin(): the underlying bool will be set to false when the tab is closed.\r\n            if (ImGui.BeginTabBar(\"MyTabBar\", tab_bar_flags.value))\r\n            {\r\n                for (let n = 0; n < IM_ARRAYSIZE(opened.value); n++)\r\n                    if (opened.value[n] && ImGui.BeginTabItem(names[n], (value = opened.value[n]) => opened.value[n] = value))\r\n                    {\r\n                        ImGui.Text(`This is the ${names[n]} tab!`);\r\n                        if (n & 1)\r\n                            ImGui.Text(\"I am an odd tab.\");\r\n                        ImGui.EndTabItem();\r\n                    }\r\n                ImGui.EndTabBar();\r\n            }\r\n            ImGui.Separator();\r\n            ImGui.TreePop();\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Groups\"))\r\n    {\r\n        HelpMarker(\"Using ImGui.BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.\");\r\n        ImGui.BeginGroup();\r\n        {\r\n            ImGui.BeginGroup();\r\n            ImGui.Button(\"AAA\");\r\n            ImGui.SameLine();\r\n            ImGui.Button(\"BBB\");\r\n            ImGui.SameLine();\r\n            ImGui.BeginGroup();\r\n            ImGui.Button(\"CCC\");\r\n            ImGui.Button(\"DDD\");\r\n            ImGui.EndGroup();\r\n            ImGui.SameLine();\r\n            ImGui.Button(\"EEE\");\r\n            ImGui.EndGroup();\r\n            if (ImGui.IsItemHovered())\r\n                ImGui.SetTooltip(\"First group hovered\");\r\n        }\r\n        // Capture the group size and create widgets using the same size\r\n        const size: ImVec2 = ImGui.GetItemRectSize();\r\n        const values: number[/*5*/] = [ 0.5, 0.20, 0.80, 0.60, 0.25 ];\r\n        ImGui.PlotHistogram(\"##values\", values, IM_ARRAYSIZE(values), 0, null, 0.0, 1.0, size);\r\n\r\n        ImGui.Button(\"ACTION\", new ImVec2((size.x - ImGui.GetStyle().ItemSpacing.x) * 0.5, size.y));\r\n        ImGui.SameLine();\r\n        ImGui.Button(\"REACTION\", new ImVec2((size.x - ImGui.GetStyle().ItemSpacing.x) * 0.5, size.y));\r\n        ImGui.EndGroup();\r\n        ImGui.SameLine();\r\n\r\n        ImGui.Button(\"LEVERAGE\\nBUZZWORD\", size);\r\n        ImGui.SameLine();\r\n\r\n        if (ImGui.ListBoxHeader(\"List\", size))\r\n        {\r\n            ImGui.Selectable(\"Selected\", true);\r\n            ImGui.Selectable(\"Not Selected\", false);\r\n            ImGui.ListBoxFooter();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Text Baseline Alignment\"))\r\n    {\r\n        HelpMarker(\"This is testing the vertical alignment that gets applied on text to keep it aligned with widgets. Lines only composed of text or \\\"small\\\" widgets fit in less vertical spaces than lines with normal widgets.\");\r\n\r\n        ImGui.Text(\"One\\nTwo\\nThree\"); ImGui.SameLine();\r\n        ImGui.Text(\"Hello\\nWorld\"); ImGui.SameLine();\r\n        ImGui.Text(\"Banana\");\r\n\r\n        ImGui.Text(\"Banana\"); ImGui.SameLine();\r\n        ImGui.Text(\"Hello\\nWorld\"); ImGui.SameLine();\r\n        ImGui.Text(\"One\\nTwo\\nThree\");\r\n\r\n        ImGui.Button(\"HOP##1\"); ImGui.SameLine();\r\n        ImGui.Text(\"Banana\"); ImGui.SameLine();\r\n        ImGui.Text(\"Hello\\nWorld\"); ImGui.SameLine();\r\n        ImGui.Text(\"Banana\");\r\n\r\n        ImGui.Button(\"HOP##2\"); ImGui.SameLine();\r\n        ImGui.Text(\"Hello\\nWorld\"); ImGui.SameLine();\r\n        ImGui.Text(\"Banana\");\r\n\r\n        ImGui.Button(\"TEST##1\"); ImGui.SameLine();\r\n        ImGui.Text(\"TEST\"); ImGui.SameLine();\r\n        ImGui.SmallButton(\"TEST##2\");\r\n\r\n        ImGui.AlignTextToFramePadding(); // If your line starts with text, call this to align it to upcoming widgets.\r\n        ImGui.Text(\"Text aligned to Widget\"); ImGui.SameLine();\r\n        ImGui.Button(\"Widget##1\"); ImGui.SameLine();\r\n        ImGui.Text(\"Widget\"); ImGui.SameLine();\r\n        ImGui.SmallButton(\"Widget##2\"); ImGui.SameLine();\r\n        ImGui.Button(\"Widget##3\");\r\n\r\n        // Tree\r\n        const spacing: number = ImGui.GetStyle().ItemInnerSpacing.x;\r\n        ImGui.Button(\"Button##1\");\r\n        ImGui.SameLine(0.0, spacing);\r\n        if (ImGui.TreeNode(\"Node##1\")) { for (let i = 0; i < 6; i++) ImGui.BulletText(`Item ${i}..`); ImGui.TreePop(); }    // Dummy tree data\r\n\r\n        ImGui.AlignTextToFramePadding();         // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget. Otherwise you can use SmallButton (smaller fit).\r\n        const node_open: boolean = ImGui.TreeNode(\"Node##2\");  // Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add child content.\r\n        ImGui.SameLine(0.0, spacing); ImGui.Button(\"Button##2\");\r\n        if (node_open) { for (let i = 0; i < 6; i++) ImGui.BulletText(`Item ${i}..`); ImGui.TreePop(); }   // Dummy tree data\r\n\r\n        // Bullet\r\n        ImGui.Button(\"Button##3\");\r\n        ImGui.SameLine(0.0, spacing);\r\n        ImGui.BulletText(\"Bullet text\");\r\n\r\n        ImGui.AlignTextToFramePadding();\r\n        ImGui.BulletText(\"Node\");\r\n        ImGui.SameLine(0.0, spacing); ImGui.Button(\"Button##4\");\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Scrolling\"))\r\n    {\r\n        HelpMarker(\"Use SetScrollHereY() or SetScrollFromPosY() to scroll to a given position.\");\r\n\r\n        /* static */ const track: Static<boolean> = STATIC(\"track\", true);\r\n        /* static */ const track_line: Static<number> = STATIC(\"track_line\", 50);\r\n        /* static */ const scroll_to_off_px: Static<number> = STATIC(\"scroll_to_off_px\", 0);\r\n        /* static */ const scroll_to_pos_px: Static<number> = STATIC(\"scroll_to_pos_px\", 200);\r\n        ImGui.Checkbox(\"Track\", (value = track.value) => track.value = value);\r\n        ImGui.PushItemWidth(100);\r\n        ImGui.SameLine(140); track.value = ImGui.DragInt(\"##line\", (value = track_line.value) => track_line.value = value, 0.25, 0, 99, \"Line = %d\") || track.value;\r\n\r\n        let scroll_to_off: boolean = ImGui.Button(\"Scroll Offset\");\r\n        ImGui.SameLine(140); scroll_to_off = ImGui.DragFloat(\"##off_y\", (value = scroll_to_off_px.value) => scroll_to_off_px.value = value, 1.00, 0, 9999, \"+%.0f px\") || scroll_to_off;\r\n\r\n        let scroll_to_pos: boolean = ImGui.Button(\"Scroll To Pos\");\r\n        ImGui.SameLine(140); scroll_to_pos = ImGui.DragInt(\"##pos_y\", (value = scroll_to_pos_px.value) => scroll_to_pos_px.value = value, 1.00, 0, 9999, \"Y = %d px\") || scroll_to_pos;\r\n\r\n        ImGui.PopItemWidth();\r\n        if (scroll_to_off || scroll_to_pos)\r\n            track.value = false;\r\n\r\n        const style: ImGuiStyle = ImGui.GetStyle();\r\n        const child_w: number = (ImGui.GetContentRegionAvail().x - 4 * style.ItemSpacing.x) / 5;\r\n        for (let i = 0; i < 5; i++)\r\n        {\r\n            if (i > 0) ImGui.SameLine();\r\n            ImGui.BeginGroup();\r\n            ImGui.Text(i === 0 ? \"Top\" : i === 1 ? \"25%\" : i === 2 ? \"Center\" : i === 3 ? \"75%\" : \"Bottom\");\r\n            const child_flags: ImGui.WindowFlags = ImGuiWindowFlags.MenuBar;\r\n            ImGui.BeginChild(ImGui.GetID(i), new ImVec2(child_w, 200.0), true, child_flags);\r\n            if (scroll_to_off)\r\n                ImGui.SetScrollY(scroll_to_off_px.value);\r\n            if (scroll_to_pos)\r\n                ImGui.SetScrollFromPosY(ImGui.GetCursorStartPos().y + scroll_to_pos_px.value, i * 0.25);\r\n            for (let line = 0; line < 100; line++)\r\n            {\r\n                if (track.value && line === track_line.value)\r\n                {\r\n                    ImGui.TextColored(new ImVec4(1, 1, 0, 1), `Line ${line}`);\r\n                    ImGui.SetScrollHereY(i * 0.25); // 0.0:top, 0.5f:center, 1.0f:bottom\r\n                }\r\n                else\r\n                {\r\n                    ImGui.Text(`Line ${line}`);\r\n                }\r\n            }\r\n            const scroll_y: number = ImGui.GetScrollY();\r\n            const scroll_max_y: number = ImGui.GetScrollMaxY();\r\n            ImGui.EndChild();\r\n            ImGui.Text(`${scroll_y.toFixed(0)}/${scroll_max_y.toFixed(0)}`);\r\n            ImGui.EndGroup();\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Horizontal Scrolling\"))\r\n    {\r\n        HelpMarker(\"Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.\\n\\nYou may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().\");\r\n        /* static */ const lines: Static<number> = STATIC(\"lines#1432\", 7);\r\n        ImGui.SliderInt(\"Lines\", (value = lines.value) => lines.value = value, 1, 15);\r\n        ImGui.PushStyleVar(ImGuiStyleVar.FrameRounding, 3.0);\r\n        ImGui.PushStyleVar(ImGuiStyleVar.FramePadding, new ImVec2(2.0, 1.0));\r\n        ImGui.BeginChild(\"scrolling\", new ImVec2(0, ImGui.GetFrameHeightWithSpacing() * 7 + 30), true, ImGuiWindowFlags.HorizontalScrollbar);\r\n        for (let line = 0; line < lines.value; line++)\r\n        {\r\n            // Display random stuff (for the sake of this trivial demo we are using basic Button+SameLine. If you want to create your own time line for a real application you may be better off\r\n            // manipulating the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets yourself. You may also want to use the lower-level ImDrawList API)\r\n            const num_buttons: number = 10 + ((line & 1) ? line * 9 : line * 3);\r\n            for (let n = 0; n < num_buttons; n++)\r\n            {\r\n                if (n > 0) ImGui.SameLine();\r\n                ImGui.PushID(n + line * 1000);\r\n                const num_buf: string = n.toFixed(0);\r\n                const label: string = (!(n % 15)) ? \"FizzBuzz\" : (!(n % 3)) ? \"Fizz\" : (!(n % 5)) ? \"Buzz\" : num_buf;\r\n                const hue: number = n * 0.05;\r\n                ImGui.PushStyleColor(ImGuiCol.Button, ImColor.HSV(hue, 0.6, 0.6));\r\n                ImGui.PushStyleColor(ImGuiCol.ButtonHovered, ImColor.HSV(hue, 0.7, 0.7));\r\n                ImGui.PushStyleColor(ImGuiCol.ButtonActive, ImColor.HSV(hue, 0.8, 0.8));\r\n                ImGui.Button(label, new ImVec2(40.0 + Math.sin(line + n) * 20.0, 0.0));\r\n                ImGui.PopStyleColor(3);\r\n                ImGui.PopID();\r\n            }\r\n        }\r\n        const scroll_x: number = ImGui.GetScrollX();\r\n        const scroll_max_x: number = ImGui.GetScrollMaxX();\r\n        ImGui.EndChild();\r\n        ImGui.PopStyleVar(2);\r\n        let scroll_x_delta: number = 0.0;\r\n        ImGui.SmallButton(\"<<\"); if (ImGui.IsItemActive()) { scroll_x_delta = -ImGui.GetIO().DeltaTime * 1000.0; } ImGui.SameLine();\r\n        ImGui.Text(\"Scroll from code\"); ImGui.SameLine();\r\n        ImGui.SmallButton(\">>\"); if (ImGui.IsItemActive()) { scroll_x_delta = +ImGui.GetIO().DeltaTime * 1000.0; } ImGui.SameLine();\r\n        ImGui.Text(`${scroll_x.toFixed(0)}/${scroll_max_x.toFixed(0)}`);\r\n        if (scroll_x_delta !== 0.0)\r\n        {\r\n            ImGui.BeginChild(\"scrolling\"); // Demonstrate a trick: you can use Begin to set yourself in the context of another window (here we are already out of your child window)\r\n            ImGui.SetScrollX(ImGui.GetScrollX() + scroll_x_delta);\r\n            ImGui.EndChild();\r\n        }\r\n        // TODO\r\n        // ImGui.Spacing();\r\n\r\n        // static bool show_horizontal_contents_size_demo_window = false;\r\n        // ImGui.Checkbox(\"Show Horizontal contents size demo window\", &show_horizontal_contents_size_demo_window);\r\n\r\n        // if (show_horizontal_contents_size_demo_window)\r\n        // {\r\n        //     static bool show_h_scrollbar = true;\r\n        //     static bool show_button = true;\r\n        //     static bool show_tree_nodes = true;\r\n        //     static bool show_text_wrapped = false;\r\n        //     static bool show_columns = true;\r\n        //     static bool show_tab_bar = true;\r\n        //     static bool show_child = false;\r\n        //     static bool explicit_content_size = false;\r\n        //     static float contents_size_x = 300.0f;\r\n        //     if (explicit_content_size)\r\n        //         ImGui.SetNextWindowContentSize(ImVec2(contents_size_x, 0.0f));\r\n        //     ImGui.Begin(\"Horizontal contents size demo window\", &show_horizontal_contents_size_demo_window, show_h_scrollbar ? ImGuiWindowFlags_HorizontalScrollbar : 0);\r\n        //     ImGui.PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(2, 0));\r\n        //     ImGui.PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 0));\r\n        //     HelpMarker(\"Test of different widgets react and impact the work rectangle growing when horizontal scrolling is enabled.\\n\\nUse 'Metrics->Tools->Show windows rectangles' to visualize rectangles.\");\r\n        //     ImGui.Checkbox(\"H-scrollbar\", &show_h_scrollbar);\r\n        //     ImGui.Checkbox(\"Button\", &show_button);            // Will grow contents size (unless explicitly overwritten)\r\n        //     ImGui.Checkbox(\"Tree nodes\", &show_tree_nodes);    // Will grow contents size and display highlight over full width\r\n        //     ImGui.Checkbox(\"Text wrapped\", &show_text_wrapped);// Will grow and use contents size\r\n        //     ImGui.Checkbox(\"Columns\", &show_columns);          // Will use contents size\r\n        //     ImGui.Checkbox(\"Tab bar\", &show_tab_bar);          // Will use contents size\r\n        //     ImGui.Checkbox(\"Child\", &show_child);              // Will grow and use contents size\r\n        //     ImGui.Checkbox(\"Explicit content size\", &explicit_content_size);\r\n        //     ImGui.Text(\"Scroll %.1f/%.1f %.1f/%.1f\", ImGui.GetScrollX(), ImGui.GetScrollMaxX(), ImGui.GetScrollY(), ImGui.GetScrollMaxY());\r\n        //     if (explicit_content_size)\r\n        //     {\r\n        //         ImGui.SameLine();\r\n        //         ImGui.SetNextItemWidth(100);\r\n        //         ImGui.DragFloat(\"##csx\", &contents_size_x);\r\n        //         ImVec2 p = ImGui.GetCursorScreenPos();\r\n        //         ImGui.GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + 10, p.y + 10), IM_COL32_WHITE);\r\n        //         ImGui.GetWindowDrawList()->AddRectFilled(ImVec2(p.x + contents_size_x - 10, p.y), ImVec2(p.x + contents_size_x, p.y + 10), IM_COL32_WHITE);\r\n        //         ImGui.Dummy(ImVec2(0, 10));\r\n        //     }\r\n        //     ImGui.PopStyleVar(2);\r\n        //     ImGui.Separator();\r\n        //     if (show_button)\r\n        //     {\r\n        //         ImGui.Button(\"this is a 300-wide button\", ImVec2(300, 0));\r\n        //     }\r\n        //     if (show_tree_nodes)\r\n        //     {\r\n        //         bool open = true;\r\n        //         if (ImGui.TreeNode(\"this is a tree node\"))\r\n        //         {\r\n        //             if (ImGui.TreeNode(\"another one of those tree node...\"))\r\n        //             {\r\n        //                 ImGui.Text(\"Some tree contents\");\r\n        //                 ImGui.TreePop();\r\n        //             }\r\n        //             ImGui.TreePop();\r\n        //         }\r\n        //         ImGui.CollapsingHeader(\"CollapsingHeader\", &open);\r\n        //     }\r\n        //     if (show_text_wrapped)\r\n        //     {\r\n        //         ImGui.TextWrapped(\"This text should automatically wrap on the edge of the work rectangle.\");\r\n        //     }\r\n        //     if (show_columns)\r\n        //     {\r\n        //         ImGui.Columns(4);\r\n        //         for (int n = 0; n < 4; n++)\r\n        //         {\r\n        //             ImGui.Text(\"Width %.2f\", ImGui.GetColumnWidth());\r\n        //             ImGui.NextColumn();\r\n        //         }\r\n        //         ImGui.Columns(1);\r\n        //     }\r\n        //     if (show_tab_bar && ImGui.BeginTabBar(\"Hello\"))\r\n        //     {\r\n        //         if (ImGui.BeginTabItem(\"OneOneOne\")) { ImGui.EndTabItem(); }\r\n        //         if (ImGui.BeginTabItem(\"TwoTwoTwo\")) { ImGui.EndTabItem(); }\r\n        //         if (ImGui.BeginTabItem(\"ThreeThreeThree\")) { ImGui.EndTabItem(); }\r\n        //         if (ImGui.BeginTabItem(\"FourFourFour\")) { ImGui.EndTabItem(); }\r\n        //         ImGui.EndTabBar();\r\n        //     }\r\n        //     if (show_child)\r\n        //     {\r\n        //         ImGui.BeginChild(\"child\", ImVec2(0,0), true);\r\n        //         ImGui.EndChild();\r\n        //     }\r\n        //     ImGui.End();\r\n        // }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Clipping\"))\r\n    {\r\n        /* static */ const size: Static<ImVec2> = STATIC(\"size\", new ImVec2(100, 100)), offset: Static<ImVec2> = STATIC(\"offset\", new ImVec2(50, 20));\r\n        ImGui.TextWrapped(\"On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.\");\r\n        ImGui.DragFloat2(\"size\", size.value, 0.5, 1.0, 200.0, \"%.0f\");\r\n        ImGui.TextWrapped(\"(Click and drag)\");\r\n        const pos: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n        const clip_rect: Readonly<ImVec4> = new ImVec4(pos.x, pos.y, pos.x + size.value.x, pos.y + size.value.y);\r\n        ImGui.InvisibleButton(\"##dummy\", size.value);\r\n        if (ImGui.IsItemActive() && ImGui.IsMouseDragging()) { offset.value.x += ImGui.GetIO().MouseDelta.x; offset.value.y += ImGui.GetIO().MouseDelta.y; }\r\n        ImGui.GetWindowDrawList().AddRectFilled(pos, new ImVec2(pos.x + size.value.x, pos.y + size.value.y), IM_COL32(90, 90, 120, 255));\r\n        ImGui.GetWindowDrawList().AddText(ImGui.GetFont(), ImGui.GetFontSize() * 2.0, new ImVec2(pos.x + offset.value.x, pos.y + offset.value.y), IM_COL32(255, 255, 255, 255), \"Line 1 hello\\nLine 2 clip me!\", null, 0.0, clip_rect);\r\n        ImGui.TreePop();\r\n    }\r\n}\r\n\r\nfunction ShowDemoWindowPopups()\r\n{\r\n    if (!ImGui.CollapsingHeader(\"Popups & Modal windows\"))\r\n        return;\r\n\r\n    // The properties of popups windows are:\r\n    // - They block normal mouse hovering detection outside them. (*)\r\n    // - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.\r\n    // - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as we are used to with regular Begin() calls.\r\n    //   User can manipulate the visibility state by calling OpenPopup().\r\n    // (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even when normally blocked by a popup.\r\n    // Those three properties are connected. The library needs to hold their visibility state because it can close popups at any time.\r\n\r\n    // Typical use for regular windows:\r\n    //   bool my_tool_is_active = false; if (ImGui.Button(\"Open\")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin(\"My Tool\", &my_tool_is_active) { [...] } End();\r\n    // Typical use for popups:\r\n    //   if (ImGui.Button(\"Open\")) ImGui.OpenPopup(\"MyPopup\"); if (ImGui.BeginPopup(\"MyPopup\") { [...] EndPopup(); }\r\n\r\n    // With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.\r\n    // This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.\r\n\r\n    if (ImGui.TreeNode(\"Popups\"))\r\n    {\r\n        ImGui.TextWrapped(\"When a popup is active, it inhibits interacting with windows that are behind the popup. Clicking outside the popup closes it.\");\r\n\r\n        /* static */ const selected_fish: Static<number> = STATIC(\"selected_fish\", -1);\r\n        const names: string[] = [ \"Bream\", \"Haddock\", \"Mackerel\", \"Pollock\", \"Tilefish\" ];\r\n        /* static */ const toggles: Static<boolean[]> = STATIC(\"toggles\", [ true, false, false, false, false ]);\r\n\r\n        // Simple selection popup\r\n        // (If you want to show the current selection inside the Button itself, you may want to build a string using the \"###\" operator to preserve a constant ID with a variable label)\r\n        if (ImGui.Button(\"Select..\"))\r\n            ImGui.OpenPopup(\"my_select_popup\");\r\n        ImGui.SameLine();\r\n        ImGui.TextUnformatted(selected_fish.value === -1 ? \"<None>\" : names[selected_fish.value]);\r\n        if (ImGui.BeginPopup(\"my_select_popup\"))\r\n        {\r\n            ImGui.Text(\"Aquarium\");\r\n            ImGui.Separator();\r\n            for (let i = 0; i < IM_ARRAYSIZE(names); i++)\r\n                if (ImGui.Selectable(names[i]))\r\n                    selected_fish.value = i;\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // Showing a menu with toggles\r\n        if (ImGui.Button(\"Toggle..\"))\r\n            ImGui.OpenPopup(\"my_toggle_popup\");\r\n        if (ImGui.BeginPopup(\"my_toggle_popup\"))\r\n        {\r\n            for (let i = 0; i < IM_ARRAYSIZE(names); i++)\r\n            {\r\n                ImGui.MenuItem(names[i], \"\", (value = toggles.value[i]) => toggles.value[i] = value);\r\n            }\r\n            if (ImGui.BeginMenu(\"Sub-menu\"))\r\n            {\r\n                ImGui.MenuItem(\"Click me\");\r\n                ImGui.EndMenu();\r\n            }\r\n\r\n            ImGui.Separator();\r\n            ImGui.Text(\"Tooltip here\");\r\n            if (ImGui.IsItemHovered())\r\n                ImGui.SetTooltip(\"I am a tooltip over a popup\");\r\n\r\n            if (ImGui.Button(\"Stacked Popup\"))\r\n                ImGui.OpenPopup(\"another popup\");\r\n            if (ImGui.BeginPopup(\"another popup\"))\r\n            {\r\n                for (let i = 0; i < IM_ARRAYSIZE(names); i++)\r\n                {\r\n                    ImGui.MenuItem(names[i], \"\", (value = toggles.value[i]) => toggles.value[i] = value);\r\n                }\r\n                if (ImGui.BeginMenu(\"Sub-menu\"))\r\n                {\r\n                    ImGui.MenuItem(\"Click me\");\r\n                    if (ImGui.Button(\"Stacked Popup\"))\r\n                        ImGui.OpenPopup(\"another popup\");\r\n                    if (ImGui.BeginPopup(\"another popup\"))\r\n                    {\r\n                        ImGui.Text(\"I am the last one here.\");\r\n                        ImGui.EndPopup();\r\n                    }\r\n                    ImGui.EndMenu();\r\n                }\r\n                ImGui.EndPopup();\r\n            }\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // Call the more complete ShowExampleMenuFile which we use in various places of this demo\r\n        if (ImGui.Button(\"File Menu..\"))\r\n            ImGui.OpenPopup(\"my_file_popup\");\r\n        if (ImGui.BeginPopup(\"my_file_popup\"))\r\n        {\r\n            ShowExampleMenuFile();\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Context menus\"))\r\n    {\r\n        // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:\r\n        //    if (IsItemHovered() && IsMouseReleased(0))\r\n        //       OpenPopup(id);\r\n        //    return BeginPopup(id);\r\n        // For more advanced uses you may want to replicate and cuztomize this code. This the comments inside BeginPopupContextItem() implementation.\r\n        /* static */ const value: Static<number> = STATIC(\"value\", 0.5);\r\n        ImGui.Text(`Value = ${value.value.toFixed(3)} (<-- right-click here)`);\r\n        if (ImGui.BeginPopupContextItem(\"item context menu\"))\r\n        {\r\n            if (ImGui.Selectable(\"Set to zero\")) value.value = 0.0;\r\n            if (ImGui.Selectable(\"Set to PI\")) value.value = 3.1415;\r\n            ImGui.SetNextItemWidth(-1);\r\n            ImGui.DragFloat(\"##Value\", (_value = value.value) => value.value = _value, 0.1, 0.0, 0.0);\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // We can also use OpenPopupOnItemClick() which is the same as BeginPopupContextItem() but without the Begin call.\r\n        // So here we will make it that clicking on the text field with the right mouse button (1) will toggle the visibility of the popup above.\r\n        ImGui.Text(\"(You can also right-click me to open the same popup as above.)\");\r\n        ImGui.OpenPopupOnItemClick(\"item context menu\", 1);\r\n\r\n        // When used after an item that has an ID (here the Button), we can skip providing an ID to BeginPopupContextItem().\r\n        // BeginPopupContextItem() will use the last item ID as the popup ID.\r\n        // In addition here, we want to include your editable label inside the button label. We use the ### operator to override the ID (read FAQ about ID for details)\r\n        /* static */ const name: Static<ImStringBuffer> = STATIC(\"name\", new ImStringBuffer(32, \"Label1\"));\r\n        const buf: string = `Button: ${name.value.buffer}###Button`; // ### operator override ID ignoring the preceding label\r\n        ImGui.Button(buf);\r\n        if (ImGui.BeginPopupContextItem())\r\n        {\r\n            ImGui.Text(\"Edit name:\");\r\n            ImGui.InputText(\"##edit\", name.value, IM_ARRAYSIZE(name.value));\r\n            if (ImGui.Button(\"Close\"))\r\n                ImGui.CloseCurrentPopup();\r\n            ImGui.EndPopup();\r\n        }\r\n        ImGui.SameLine(); ImGui.Text(\"(<-- right-click here)\");\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Modals\"))\r\n    {\r\n        ImGui.TextWrapped(\"Modal windows are like popups but the user cannot close them by clicking outside the window.\");\r\n\r\n        if (ImGui.Button(\"Delete..\"))\r\n            ImGui.OpenPopup(\"Delete?\");\r\n\r\n            if (ImGui.BeginPopupModal(\"Delete?\", null, ImGuiWindowFlags.AlwaysAutoResize))\r\n        {\r\n            ImGui.Text(\"All those beautiful files will be deleted.\\nThis operation cannot be undone!\\n\\n\");\r\n            ImGui.Separator();\r\n\r\n            ///* static */ const dummy_i: number = 0;\r\n            //ImGui.Combo(\"Combo\", &dummy_i, \"Delete\\0Delete harder\\0\");\r\n\r\n            /* static */ const dont_ask_me_next_time: Static<boolean> = STATIC(\"dont_ask_me_next_time\", false);\r\n            ImGui.PushStyleVar(ImGuiStyleVar.FramePadding, new ImVec2(0, 0));\r\n            ImGui.Checkbox(\"Don't ask me next time\", (value = dont_ask_me_next_time.value) => dont_ask_me_next_time.value = value);\r\n            ImGui.PopStyleVar();\r\n\r\n            if (ImGui.Button(\"OK\", new ImVec2(120, 0))) { ImGui.CloseCurrentPopup(); }\r\n            ImGui.SetItemDefaultFocus();\r\n            ImGui.SameLine();\r\n            if (ImGui.Button(\"Cancel\", new ImVec2(120, 0))) { ImGui.CloseCurrentPopup(); }\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        if (ImGui.Button(\"Stacked modals..\"))\r\n            ImGui.OpenPopup(\"Stacked 1\");\r\n        if (ImGui.BeginPopupModal(\"Stacked 1\", null, ImGuiWindowFlags.MenuBar))\r\n        {\r\n            if (ImGui.BeginMenuBar())\r\n            {\r\n                if (ImGui.BeginMenu(\"File\"))\r\n                {\r\n                    if (ImGui.MenuItem(\"Dummy menu item\")) {}\r\n                    ImGui.EndMenu();\r\n                }\r\n                ImGui.EndMenuBar();\r\n            }\r\n            ImGui.Text(\"Hello from Stacked The First\\nUsing style.Colors[ImGuiCol.ModalWindowDimBg] behind it.\");\r\n\r\n            // Testing behavior of widgets stacking their own regular popups over the modal.\r\n            /* static */ const item: Static<number> = STATIC(\"item#1636\", 1);\r\n            /* static */ const color: Static<ImTuple4<number>> = STATIC<ImTuple4<number>>(\"color#2\", [ 0.4, 0.7, 0.0, 0.5 ]);\r\n            ImGui.Combo(\"Combo\", (value = item.value) => item.value = value, \"aaaa\\0bbbb\\0cccc\\0dddd\\0eeee\\0\\0\");\r\n            ImGui.ColorEdit4(\"color\", color.value);\r\n\r\n            if (ImGui.Button(\"Add another modal..\"))\r\n                ImGui.OpenPopup(\"Stacked 2\");\r\n\r\n            // Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which will close the popup.\r\n            // Note that the visibility state of popups is owned by imgui, so the input value of the bool actually doesn't matter here.\r\n            let dummy_open = true;\r\n            if (ImGui.BeginPopupModal(\"Stacked 2\", [dummy_open]))\r\n            {\r\n                ImGui.Text(\"Hello from Stacked The Second!\");\r\n                if (ImGui.Button(\"Close\"))\r\n                    ImGui.CloseCurrentPopup();\r\n                ImGui.EndPopup();\r\n            }\r\n\r\n            if (ImGui.Button(\"Close\"))\r\n                ImGui.CloseCurrentPopup();\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Menus inside a regular window\"))\r\n    {\r\n        ImGui.TextWrapped(\"Below we are testing adding menu items to a regular window. It's rather unusual but should work!\");\r\n        ImGui.Separator();\r\n        // NB: As a quirk in this very specific example, we want to differentiate the parent of this menu from the parent of the various popup menus above.\r\n        // To do so we are encloding the items in a PushID()/PopID() block to make them two different menusets. If we don't, opening any popup above and hovering our menu here\r\n        // would open it. This is because once a menu is active, we allow to switch to a sibling menu by just hovering on it, which is the desired behavior for regular menus.\r\n        ImGui.PushID(\"foo\");\r\n        ImGui.MenuItem(\"Menu item\", \"CTRL+M\");\r\n        if (ImGui.BeginMenu(\"Menu inside a regular window\"))\r\n        {\r\n            ShowExampleMenuFile();\r\n            ImGui.EndMenu();\r\n        }\r\n        ImGui.PopID();\r\n        ImGui.Separator();\r\n        ImGui.TreePop();\r\n    }\r\n}\r\n\r\nfunction ShowDemoWindowColumns()\r\n{\r\n    if (!ImGui.CollapsingHeader(\"Columns\"))\r\n        return;\r\n\r\n    ImGui.PushID(\"Columns\");\r\n\r\n    /* static */ const disable_indent: Static<boolean> = STATIC(\"disable_indent\", false);\r\n    ImGui.Checkbox(\"Disable tree indentation\", (value = disable_indent.value) => disable_indent.value = value);\r\n    ImGui.SameLine();\r\n    HelpMarker(\"Disable the indenting of tree nodes so demo columns can use the full window width.\");\r\n    if (disable_indent.value)\r\n        ImGui.PushStyleVar(ImGuiStyleVar.IndentSpacing, 0.0);\r\n\r\n    // Basic columns\r\n    if (ImGui.TreeNode(\"Basic\"))\r\n    {\r\n        ImGui.Text(\"Without border:\");\r\n        ImGui.Columns(3, \"mycolumns3\", false);  // 3-ways, no border\r\n        ImGui.Separator();\r\n        for (let n = 0; n < 14; n++)\r\n        {\r\n            const label: string = `Item ${n}`;\r\n            if (ImGui.Selectable(label)) {}\r\n            //if (ImGui.Button(label, new ImVec2(-1,0))) {}\r\n            ImGui.NextColumn();\r\n        }\r\n        ImGui.Columns(1);\r\n        ImGui.Separator();\r\n\r\n        ImGui.Text(\"With border:\");\r\n        ImGui.Columns(4, \"mycolumns\"); // 4-ways, with border\r\n        ImGui.Separator();\r\n        ImGui.Text(\"ID\"); ImGui.NextColumn();\r\n        ImGui.Text(\"Name\"); ImGui.NextColumn();\r\n        ImGui.Text(\"Path\"); ImGui.NextColumn();\r\n        ImGui.Text(\"Hovered\"); ImGui.NextColumn();\r\n        ImGui.Separator();\r\n        const names: string[/*3*/] = [ \"One\", \"Two\", \"Three\" ];\r\n        const paths: string[/*3*/] = [ \"/path/one\", \"/path/two\", \"/path/three\" ];\r\n        /* static */ const selected: Static<number> = STATIC(\"selected#1709\", -1);\r\n        for (let i = 0; i < 3; i++)\r\n        {\r\n            const label: string = format_number_dec(i, 4);\r\n            if (ImGui.Selectable(label, selected.value === i, ImGuiSelectableFlags.SpanAllColumns))\r\n                selected.value = i;\r\n            const hovered: boolean = ImGui.IsItemHovered();\r\n            ImGui.NextColumn();\r\n            ImGui.Text(names[i]); ImGui.NextColumn();\r\n            ImGui.Text(paths[i]); ImGui.NextColumn();\r\n            ImGui.Text(`${hovered}`); ImGui.NextColumn();\r\n        }\r\n        ImGui.Columns(1);\r\n        ImGui.Separator();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Borders\"))\r\n    {\r\n        // NB: Future columns API should allow automatic horizontal borders.\r\n        /* static */ const h_borders: Static<boolean> = STATIC(\"h_borders\", true);\r\n        /* static */ const v_borders: Static<boolean> = STATIC(\"v_borders\", true);\r\n        ImGui.Checkbox(\"horizontal\", (value = h_borders.value) => h_borders.value = value);\r\n        ImGui.SameLine();\r\n        ImGui.Checkbox(\"vertical\", (value = v_borders.value) => v_borders.value = value);\r\n        ImGui.Columns(4, null, v_borders.value);\r\n        for (let i = 0; i < 4 * 3; i++)\r\n        {\r\n            if (h_borders.value && ImGui.GetColumnIndex() === 0)\r\n                ImGui.Separator();\r\n            // ImGui.Text(\"%c%c%c\", 'a'+i, 'a'+i, 'a'+i);\r\n            const c: string = String.fromCharCode(\"a\".charCodeAt(0) + i);\r\n            ImGui.Text(`${c}${c}${c}`);\r\n            ImGui.Text(`Width ${ImGui.GetColumnWidth().toFixed(2)}`);\r\n            ImGui.Text(`Offset ${ImGui.GetColumnOffset().toFixed(2)}`);\r\n            ImGui.Text(\"Long text that is likely to clip\");\r\n            ImGui.Button(\"Button\", new ImVec2(-1.0, 0.0));\r\n            ImGui.NextColumn();\r\n        }\r\n        ImGui.Columns(1);\r\n        if (h_borders.value)\r\n            ImGui.Separator();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    // Create multiple items in a same cell before switching to next column\r\n    if (ImGui.TreeNode(\"Mixed items\"))\r\n    {\r\n        ImGui.Columns(3, \"mixed\");\r\n        ImGui.Separator();\r\n\r\n        ImGui.Text(\"Hello\");\r\n        ImGui.Button(\"Banana\");\r\n        ImGui.NextColumn();\r\n\r\n        ImGui.Text(\"ImGui\");\r\n        ImGui.Button(\"Apple\");\r\n        /* static */ const foo: Static<number> = STATIC(\"foo\", 1.0);\r\n        ImGui.InputFloat(\"red\", (value = foo.value) => foo.value = value, 0.05, 0, \"%.3f\");\r\n        ImGui.Text(\"An extra line here.\");\r\n        ImGui.NextColumn();\r\n\r\n        ImGui.Text(\"Sailor\");\r\n        ImGui.Button(\"Corniflower\");\r\n        /* static */ const bar: Static<number> = STATIC(\"bar\", 1.0);\r\n        ImGui.InputFloat(\"blue\", (value = bar.value) => bar.value = value, 0.05, 0, \"%.3f\");\r\n        ImGui.NextColumn();\r\n\r\n        if (ImGui.CollapsingHeader(\"Category A\")) { ImGui.Text(\"Blah blah blah\"); } ImGui.NextColumn();\r\n        if (ImGui.CollapsingHeader(\"Category B\")) { ImGui.Text(\"Blah blah blah\"); } ImGui.NextColumn();\r\n        if (ImGui.CollapsingHeader(\"Category C\")) { ImGui.Text(\"Blah blah blah\"); } ImGui.NextColumn();\r\n        ImGui.Columns(1);\r\n        ImGui.Separator();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    // Word wrapping\r\n    if (ImGui.TreeNode(\"Word-wrapping\"))\r\n    {\r\n        ImGui.Columns(2, \"word-wrapping\");\r\n        ImGui.Separator();\r\n        ImGui.TextWrapped(\"The quick brown fox jumps over the lazy dog.\");\r\n        ImGui.TextWrapped(\"Hello Left\");\r\n        ImGui.NextColumn();\r\n        ImGui.TextWrapped(\"The quick brown fox jumps over the lazy dog.\");\r\n        ImGui.TextWrapped(\"Hello Right\");\r\n        ImGui.Columns(1);\r\n        ImGui.Separator();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    // Scrolling columns\r\n    /*\r\n    if (ImGui.TreeNode(\"Vertical Scrolling\"))\r\n    {\r\n        ImGui.BeginChild(\"##header\", ImVec2(0, ImGui.GetTextLineHeightWithSpacing()+ImGui.GetStyle().ItemSpacing.y));\r\n        ImGui.Columns(3);\r\n        ImGui.Text(\"ID\"); ImGui.NextColumn();\r\n        ImGui.Text(\"Name\"); ImGui.NextColumn();\r\n        ImGui.Text(\"Path\"); ImGui.NextColumn();\r\n        ImGui.Columns(1);\r\n        ImGui.Separator();\r\n        ImGui.EndChild();\r\n        ImGui.BeginChild(\"##scrollingregion\", ImVec2(0, 60));\r\n        ImGui.Columns(3);\r\n        for (let i = 0; i < 10; i++)\r\n        {\r\n            ImGui.Text(\"%04d\", i); ImGui.NextColumn();\r\n            ImGui.Text(\"Foobar\"); ImGui.NextColumn();\r\n            ImGui.Text(\"/path/foobar/%04d/\", i); ImGui.NextColumn();\r\n        }\r\n        ImGui.Columns(1);\r\n        ImGui.EndChild();\r\n        ImGui.TreePop();\r\n    }\r\n    */\r\n\r\n    if (ImGui.TreeNode(\"Horizontal Scrolling\"))\r\n    {\r\n        ImGui.SetNextWindowContentSize(new ImVec2(1500.0, 0.0));\r\n        ImGui.BeginChild(\"##ScrollingRegion\", new ImVec2(0, ImGui.GetFontSize() * 20), false, ImGuiWindowFlags.HorizontalScrollbar);\r\n        ImGui.Columns(10);\r\n        const ITEMS_COUNT: number = 2000;\r\n        const clipper: ImGuiListClipper = new ImGuiListClipper(ITEMS_COUNT);  // Also demonstrate using the clipper for large list\r\n        while (clipper.Step())\r\n        {\r\n            for (let i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\r\n                for (let j = 0; j < 10; j++)\r\n                {\r\n                    ImGui.Text(`Line ${i} Column ${j}...`);\r\n                    ImGui.NextColumn();\r\n                }\r\n        }\r\n        // clipper.delete(); // NOTE: native emscripten class\r\n        ImGui.Columns(1);\r\n        ImGui.EndChild();\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (ImGui.TreeNode(\"Tree\"))\r\n    {\r\n        ImGui.Columns(2, \"tree\", true);\r\n        for (let x = 0; x < 3; x++)\r\n        {\r\n            const open1: boolean = ImGui.TreeNode(x, `Node${x}`);\r\n            ImGui.NextColumn();\r\n            ImGui.Text(\"Node contents\");\r\n            ImGui.NextColumn();\r\n            if (open1)\r\n            {\r\n                for (let y = 0; y < 3; y++)\r\n                {\r\n                    const open2: boolean = ImGui.TreeNode(y, `Node${x}.${y}`);\r\n                    ImGui.NextColumn();\r\n                    ImGui.Text(\"Node contents\");\r\n                    if (open2)\r\n                    {\r\n                        ImGui.Text(\"Even more contents\");\r\n                        if (ImGui.TreeNode(\"Tree in column\"))\r\n                        {\r\n                            ImGui.Text(\"The quick brown fox jumps over the lazy dog\");\r\n                            ImGui.TreePop();\r\n                        }\r\n                    }\r\n                    ImGui.NextColumn();\r\n                    if (open2)\r\n                        ImGui.TreePop();\r\n                }\r\n                ImGui.TreePop();\r\n            }\r\n        }\r\n        ImGui.Columns(1);\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    if (disable_indent.value)\r\n        ImGui.PopStyleVar();\r\n    ImGui.PopID();\r\n}\r\n\r\nfunction ShowDemoWindowMisc()\r\n{\r\n    if (ImGui.CollapsingHeader(\"Filtering\"))\r\n    {\r\n        /* static */ const filter: Static<ImGuiTextFilter> = STATIC(\"filter#1864\", new ImGuiTextFilter());\r\n        ImGui.Text(\"Filter usage:\\n\"\r\n                    + \"  \\\"\\\"         display all lines\\n\"\r\n                    + \"  \\\"xxx\\\"      display lines containing \\\"xxx\\\"\\n\"\r\n                    + \"  \\\"xxx,yyy\\\"  display lines containing \\\"xxx\\\" or \\\"yyy\\\"\\n\"\r\n                    + \"  \\\"-xxx\\\"     hide lines containing \\\"xxx\\\"\");\r\n        filter.value.Draw();\r\n        const lines: string[] = [ \"aaa1.c\", \"bbb1.c\", \"ccc1.c\", \"aaa2.cpp\", \"bbb2.cpp\", \"ccc2.cpp\", \"abc.h\", \"hello, world\" ];\r\n        for (let i = 0; i < IM_ARRAYSIZE(lines); i++)\r\n            if (filter.value.PassFilter(lines[i]))\r\n                ImGui.BulletText(lines[i]);\r\n    }\r\n\r\n    if (ImGui.CollapsingHeader(\"Inputs, Navigation & Focus\"))\r\n    {\r\n        const io: ImGuiIO = ImGui.GetIO();\r\n\r\n        ImGui.Text(`WantCaptureMouse: ${io.WantCaptureMouse}`);\r\n        ImGui.Text(`WantCaptureKeyboard: ${io.WantCaptureKeyboard}`);\r\n        ImGui.Text(`WantTextInput: ${io.WantTextInput}`);\r\n        ImGui.Text(`WantSetMousePos: ${io.WantSetMousePos}`);\r\n        ImGui.Text(`NavActive: ${io.NavActive}, NavVisible: ${io.NavVisible}`);\r\n\r\n        if (ImGui.TreeNode(\"Keyboard, Mouse & Navigation State\"))\r\n        {\r\n            if (ImGui.IsMousePosValid())\r\n                ImGui.Text(`Mouse pos: (${io.MousePos.x}, ${io.MousePos.y})`);\r\n            else\r\n                ImGui.Text(\"Mouse pos: <INVALID>\");\r\n            ImGui.Text(`Mouse delta: (${io.MouseDelta.x}, ${io.MouseDelta.y})`);\r\n            ImGui.Text(\"Mouse down:\");     for (let i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (io.MouseDownDuration[i] >= 0.0)   { ImGui.SameLine(); ImGui.Text(`b${i} (${io.MouseDownDuration[i].toFixed(2)} secs)`); }\r\n            ImGui.Text(\"Mouse clicked:\");  for (let i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseClicked(i))          { ImGui.SameLine(); ImGui.Text(`b${i}`); }\r\n            ImGui.Text(\"Mouse dbl-clicked:\"); for (let i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseDoubleClicked(i)) { ImGui.SameLine(); ImGui.Text(`b${i}`); }\r\n            ImGui.Text(\"Mouse released:\"); for (let i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseReleased(i))         { ImGui.SameLine(); ImGui.Text(`b${i}`); }\r\n            ImGui.Text(`Mouse wheel: ${io.MouseWheel.toFixed(1)}`);\r\n\r\n            ImGui.Text(\"Keys down:\");      for (let i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (io.KeysDownDuration[i] >= 0.0)     { ImGui.SameLine(); ImGui.Text(`${i} (0x${i.toString(16)}) (${io.KeysDownDuration[i].toFixed(2)} secs)`); }\r\n            ImGui.Text(\"Keys pressed:\");   for (let i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui.IsKeyPressed(i))             { ImGui.SameLine(); ImGui.Text(`${i} (0x${i.toString(16)})`); }\r\n            ImGui.Text(\"Keys release:\");   for (let i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui.IsKeyReleased(i))            { ImGui.SameLine(); ImGui.Text(`${i} (0x${i.toString(16)})`); }\r\n            ImGui.Text(`Keys mods: ${io.KeyCtrl ? \"CTRL \" : \"\"}${io.KeyShift ? \"SHIFT \" : \"\"}${io.KeyAlt ? \"ALT \" : \"\"}${io.KeySuper ? \"SUPER \" : \"\"}`);\r\n            // ImGui.Text(\"Chars queue:\");    for (let i = 0; i < io.InputQueueCharacters.Size; i++) { const c: ImWchar = io.InputQueueCharacters[i]; ImGui.SameLine();  ImGui.Text(\"\\'%c\\' (0x%04X)\", (c > ' ' && c <= 255) ? (char)c : '?', c); } // FIXME: We should convert 'c' to UTF-8 here but the functions are not public.\r\n\r\n            ImGui.Text(\"NavInputs down:\"); for (let i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputs[i] > 0.0)                    { ImGui.SameLine(); ImGui.Text(`[${i}] ${io.NavInputs[i].toFixed(2)}`); }\r\n            ImGui.Text(\"NavInputs pressed:\"); for (let i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] === 0.0)    { ImGui.SameLine(); ImGui.Text(`[${i}]`); }\r\n            ImGui.Text(\"NavInputs duration:\"); for (let i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] >= 0.0)   { ImGui.SameLine(); ImGui.Text(`[${i}] ${io.NavInputsDownDuration[i].toFixed(2)}`); }\r\n\r\n            ImGui.Button(\"Hovering me sets the\\nkeyboard capture flag\");\r\n            if (ImGui.IsItemHovered())\r\n                ImGui.CaptureKeyboardFromApp(true);\r\n            ImGui.SameLine();\r\n            ImGui.Button(\"Holding me clears the\\nthe keyboard capture flag\");\r\n            if (ImGui.IsItemActive())\r\n                ImGui.CaptureKeyboardFromApp(false);\r\n\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Tabbing\"))\r\n        {\r\n            ImGui.Text(\"Use TAB/SHIFT+TAB to cycle through keyboard editable fields.\");\r\n            /* static */ const buf: Static<ImStringBuffer> = STATIC(\"buf1#1921\", new ImStringBuffer(32, \"dummy\"));\r\n            ImGui.InputText(\"1\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            ImGui.InputText(\"2\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            ImGui.InputText(\"3\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            ImGui.PushAllowKeyboardFocus(false);\r\n            ImGui.InputText(\"4 (tab skip)\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            //ImGui.SameLine(); HelpMarker(\"Use ImGui.PushAllowKeyboardFocus(bool)\\nto disable tabbing through certain widgets.\");\r\n            ImGui.PopAllowKeyboardFocus();\r\n            ImGui.InputText(\"5\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Focus from code\"))\r\n        {\r\n            const focus_1: boolean = ImGui.Button(\"Focus on 1\"); ImGui.SameLine();\r\n            const focus_2: boolean = ImGui.Button(\"Focus on 2\"); ImGui.SameLine();\r\n            const focus_3: boolean = ImGui.Button(\"Focus on 3\");\r\n            let has_focus: number = 0;\r\n            /* static */ const buf: Static<ImStringBuffer> = STATIC(\"buf2#1944\", new ImStringBuffer(128, \"click on a button to set focus\"));\r\n\r\n            if (focus_1) ImGui.SetKeyboardFocusHere();\r\n            ImGui.InputText(\"1\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            if (ImGui.IsItemActive()) has_focus = 1;\r\n\r\n            if (focus_2) ImGui.SetKeyboardFocusHere();\r\n            ImGui.InputText(\"2\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            if (ImGui.IsItemActive()) has_focus = 2;\r\n\r\n            ImGui.PushAllowKeyboardFocus(false);\r\n            if (focus_3) ImGui.SetKeyboardFocusHere();\r\n            ImGui.InputText(\"3 (tab skip)\", buf.value, IM_ARRAYSIZE(buf.value));\r\n            if (ImGui.IsItemActive()) has_focus = 3;\r\n            ImGui.PopAllowKeyboardFocus();\r\n\r\n            if (has_focus)\r\n                ImGui.Text(`Item with focus: ${has_focus}`);\r\n            else\r\n                ImGui.Text(\"Item with focus: <none>\");\r\n\r\n            // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item\r\n            /* static */ const f3: Static<ImTuple3<number>> = STATIC<ImTuple3<number>>(\"f3\", [ 0.0, 0.0, 0.0 ]);\r\n            let focus_ahead: number = -1;\r\n            if (ImGui.Button(\"Focus on X\")) { focus_ahead = 0; } ImGui.SameLine();\r\n            if (ImGui.Button(\"Focus on Y\")) { focus_ahead = 1; } ImGui.SameLine();\r\n            if (ImGui.Button(\"Focus on Z\")) { focus_ahead = 2; }\r\n            if (focus_ahead !== -1) ImGui.SetKeyboardFocusHere(focus_ahead);\r\n            ImGui.SliderFloat3(\"Float3\", f3.value, 0.0, 1.0);\r\n\r\n            ImGui.TextWrapped(\"NB: Cursor & selection are preserved when refocusing last used item in code.\");\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Dragging\"))\r\n        {\r\n            ImGui.TextWrapped(\"You can use ImGui.GetMouseDragDelta(0) to query for the dragged amount on any widget.\");\r\n            for (let button = 0; button < 3; button++)\r\n                ImGui.Text(`IsMouseDragging(${button}):\\n  w/ default threshold: ${ImGui.IsMouseDragging(button)},\\n  w/ zero threshold: ${ImGui.IsMouseDragging(button, 0.0)}\\n  w/ large threshold: ${ImGui.IsMouseDragging(button, 20.0)}`);\r\n\r\n            ImGui.Button(\"Drag Me\");\r\n            if (ImGui.IsItemActive())\r\n                ImGui.GetForegroundDrawList().AddLine(io.MouseClickedPos[0], io.MousePos, ImGui.GetColorU32(ImGuiCol.Button), 4.0); // Draw a line between the button and the mouse cursor\r\n\r\n            // Drag operations gets \"unlocked\" when the mouse has moved past a certain threshold (the default threshold is stored in io.MouseDragThreshold)\r\n            // You can request a lower or higher threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta()\r\n            const value_raw: Readonly<ImVec2> = ImGui.GetMouseDragDelta(0, 0.0);\r\n            const value_with_lock_threshold: Readonly<ImVec2> = ImGui.GetMouseDragDelta(0);\r\n            const mouse_delta: Readonly<ImGui.reference_ImVec2> = io.MouseDelta;\r\n            ImGui.SameLine(); ImGui.Text(`Raw (${value_raw.x.toFixed(1)}, ${value_raw.y.toFixed(1)}), WithLockThresold (${value_with_lock_threshold.x.toFixed(1)}, ${value_with_lock_threshold.y.toFixed(1)}), MouseDelta (${mouse_delta.x.toFixed(1)}, ${mouse_delta.y.toFixed(1)})`);\r\n            // TODO\r\n            // ImGui.Text(\"GetMouseDragDelta(0):\\n  w/ default threshold: (%.1f, %.1f),\\n  w/ zero threshold: (%.1f, %.1f)\\nMouseDelta: (%.1f, %.1f)\", value_with_lock_threshold.x, value_with_lock_threshold.y, value_raw.x, value_raw.y, mouse_delta.x, mouse_delta.y);\r\n\r\n            ImGui.TreePop();\r\n        }\r\n\r\n        if (ImGui.TreeNode(\"Mouse cursors\"))\r\n        {\r\n            const mouse_cursors_names: string[] = [ \"Arrow\", \"TextInput\", \"Move\", \"ResizeNS\", \"ResizeEW\", \"ResizeNESW\", \"ResizeNWSE\", \"Hand\" ];\r\n            IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) === ImGuiMouseCursor.COUNT);\r\n\r\n            ImGui.Text(`Current mouse cursor = ${ImGui.GetMouseCursor()}: ${mouse_cursors_names[ImGui.GetMouseCursor()]}`);\r\n            ImGui.Text(\"Hover to see mouse cursors:\");\r\n            ImGui.SameLine(); HelpMarker(\"Your application can render a different mouse cursor based on what ImGui.GetMouseCursor() returns. If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, otherwise your backend needs to handle it.\");\r\n            for (let i = 0; i < ImGuiMouseCursor.COUNT; i++)\r\n            {\r\n                const label: string = `Mouse cursor ${i}: ${mouse_cursors_names[i]}`;\r\n                ImGui.Bullet(); ImGui.Selectable(label, false);\r\n                if (ImGui.IsItemHovered() || ImGui.IsItemFocused())\r\n                    ImGui.SetMouseCursor(i);\r\n            }\r\n            ImGui.TreePop();\r\n        }\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] About Window / ShowAboutWindow()\r\n// Access from Dear ImGui Demo -> Help -> About\r\n//-----------------------------------------------------------------------------\r\n\r\nfunction ShowAboutWindow(p_open: ImAccess<boolean>): void\r\n{\r\n    if (!ImGui.Begin(\"About Dear ImGui\", p_open, ImGuiWindowFlags.AlwaysAutoResize))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n    ImGui.Text(`Dear ImGui ${ImGui.GetVersion()}`);\r\n    ImGui.Separator();\r\n    ImGui.Text(\"By Omar Cornut and all dear imgui contributors.\");\r\n    ImGui.Text(\"Dear ImGui is licensed under the MIT License, see LICENSE for more information.\");\r\n\r\n    // TODO\r\n    // static bool show_config_info = false;\r\n    // ImGui.Checkbox(\"Config/Build Information\", &show_config_info);\r\n    // if (show_config_info)\r\n    // {\r\n    //     ImGuiIO& io = ImGui.GetIO();\r\n    //     ImGuiStyle& style = ImGui.GetStyle();\r\n\r\n    //     bool copy_to_clipboard = ImGui.Button(\"Copy to clipboard\");\r\n    //     ImGui.BeginChildFrame(ImGui.GetID(\"cfginfos\"), ImVec2(0, ImGui.GetTextLineHeightWithSpacing() * 18), ImGuiWindowFlags_NoMove);\r\n    //     if (copy_to_clipboard)\r\n    //         ImGui.LogToClipboard();\r\n\r\n    //     ImGui.Text(\"Dear ImGui %s (%d)\", IMGUI_VERSION, IMGUI_VERSION_NUM);\r\n    //     ImGui.Separator();\r\n    //     ImGui.Text(\"sizeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert): %d\", (int)sizeof(size_t), (int)sizeof(ImDrawIdx), (int)sizeof(ImDrawVert));\r\n    //     ImGui.Text(\"define: __cplusplus=%d\", (int)__cplusplus);\r\n    //     #ifdef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_OBSOLETE_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_WIN32_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_WIN32_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_MATH_FUNCTIONS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_MATH_FUNCTIONS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_DISABLE_DEFAULT_ALLOCATORS\r\n    //     ImGui.Text(\"define: IMGUI_DISABLE_DEFAULT_ALLOCATORS\");\r\n    //     #endif\r\n    //     #ifdef IMGUI_USE_BGRA_PACKED_COLOR\r\n    //     ImGui.Text(\"define: IMGUI_USE_BGRA_PACKED_COLOR\");\r\n    //     #endif\r\n    //     #ifdef _WIN32\r\n    //     ImGui.Text(\"define: _WIN32\");\r\n    //     #endif\r\n    //     #ifdef _WIN64\r\n    //     ImGui.Text(\"define: _WIN64\");\r\n    //     #endif\r\n    //     #ifdef __linux__\r\n    //     ImGui.Text(\"define: __linux__\");\r\n    //     #endif\r\n    //     #ifdef __APPLE__\r\n    //     ImGui.Text(\"define: __APPLE__\");\r\n    //     #endif\r\n    //     #ifdef _MSC_VER\r\n    //     ImGui.Text(\"define: _MSC_VER=%d\", _MSC_VER);\r\n    //     #endif\r\n    //     #ifdef __MINGW32__\r\n    //     ImGui.Text(\"define: __MINGW32__\");\r\n    //     #endif\r\n    //     #ifdef __MINGW64__\r\n    //     ImGui.Text(\"define: __MINGW64__\");\r\n    //     #endif\r\n    //     #ifdef __GNUC__\r\n    //     ImGui.Text(\"define: __GNUC__=%d\", (int)__GNUC__);\r\n    //     #endif\r\n    //     #ifdef __clang_version__\r\n    //     ImGui.Text(\"define: __clang_version__=%s\", __clang_version__);\r\n    //     #endif\r\n    //     ImGui.Separator();\r\n    //     ImGui.Text(\"io.BackendPlatformName: %s\", io.BackendPlatformName ? io.BackendPlatformName : \"NULL\");\r\n    //     ImGui.Text(\"io.BackendRendererName: %s\", io.BackendRendererName ? io.BackendRendererName : \"NULL\");\r\n    //     ImGui.Text(\"io.ConfigFlags: 0x%08X\", io.ConfigFlags);\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)        ImGui.Text(\" NavEnableKeyboard\");\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad)         ImGui.Text(\" NavEnableGamepad\");\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos)     ImGui.Text(\" NavEnableSetMousePos\");\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard)     ImGui.Text(\" NavNoCaptureKeyboard\");\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)                  ImGui.Text(\" NoMouse\");\r\n    //     if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)      ImGui.Text(\" NoMouseCursorChange\");\r\n    //     if (io.MouseDrawCursor)                                         ImGui.Text(\"io.MouseDrawCursor\");\r\n    //     if (io.ConfigMacOSXBehaviors)                                   ImGui.Text(\"io.ConfigMacOSXBehaviors\");\r\n    //     if (io.ConfigInputTextCursorBlink)                              ImGui.Text(\"io.ConfigInputTextCursorBlink\");\r\n    //     if (io.ConfigWindowsResizeFromEdges)                            ImGui.Text(\"io.ConfigWindowsResizeFromEdges\");\r\n    //     if (io.ConfigWindowsMoveFromTitleBarOnly)                       ImGui.Text(\"io.ConfigWindowsMoveFromTitleBarOnly\");\r\n    //     ImGui.Text(\"io.BackendFlags: 0x%08X\", io.BackendFlags);\r\n    //     if (io.BackendFlags & ImGuiBackendFlags_HasGamepad)             ImGui.Text(\" HasGamepad\");\r\n    //     if (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)        ImGui.Text(\" HasMouseCursors\");\r\n    //     if (io.BackendFlags & ImGuiBackendFlags_HasSetMousePos)         ImGui.Text(\" HasSetMousePos\");\r\n    //     if (io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)   ImGui.Text(\" RendererHasVtxOffset\");\r\n    //     ImGui.Separator();\r\n    //     ImGui.Text(\"io.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d\", io.Fonts->Fonts.Size, io.Fonts->Flags, io.Fonts->TexWidth, io.Fonts->TexHeight);\r\n    //     ImGui.Text(\"io.DisplaySize: %.2f,%.2f\", io.DisplaySize.x, io.DisplaySize.y);\r\n    //     ImGui.Text(\"io.DisplayFramebufferScale: %.2f,%.2f\", io.DisplayFramebufferScale.x, io.DisplayFramebufferScale.y);\r\n    //     ImGui.Separator();\r\n    //     ImGui.Text(\"style.WindowPadding: %.2f,%.2f\", style.WindowPadding.x, style.WindowPadding.y);\r\n    //     ImGui.Text(\"style.WindowBorderSize: %.2f\", style.WindowBorderSize);\r\n    //     ImGui.Text(\"style.FramePadding: %.2f,%.2f\", style.FramePadding.x, style.FramePadding.y);\r\n    //     ImGui.Text(\"style.FrameRounding: %.2f\", style.FrameRounding);\r\n    //     ImGui.Text(\"style.FrameBorderSize: %.2f\", style.FrameBorderSize);\r\n    //     ImGui.Text(\"style.ItemSpacing: %.2f,%.2f\", style.ItemSpacing.x, style.ItemSpacing.y);\r\n    //     ImGui.Text(\"style.ItemInnerSpacing: %.2f,%.2f\", style.ItemInnerSpacing.x, style.ItemInnerSpacing.y);\r\n\r\n    //     if (copy_to_clipboard)\r\n    //         ImGui.LogFinish();\r\n    //     ImGui.EndChildFrame();\r\n    // }\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Style Editor / ShowStyleEditor()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demo helper function to select among default colors. See ShowStyleEditor() for more advanced options.\r\n// Here we use the simplified Combo() api that packs items into a single literal string. Useful for quick combo boxes where the choices are known locally.\r\nexport function ShowStyleSelector(label: string): boolean\r\n{\r\n    /* static */ const style_idx: Static<number> = STATIC(\"style_idx\", -1);\r\n    if (ImGui.Combo(label, (value = style_idx.value) => style_idx.value = value, \"Classic\\0Dark\\0Light\\0\"))\r\n    {\r\n        switch (style_idx.value)\r\n        {\r\n        case 0: ImGui.StyleColorsClassic(); break;\r\n        case 1: ImGui.StyleColorsDark(); break;\r\n        case 2: ImGui.StyleColorsLight(); break;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n// Demo helper function to select among loaded fonts.\r\n// Here we use the regular BeginCombo()/EndCombo() api which is more the more flexible one.\r\nexport function ShowFontSelector(label: string): void\r\n{\r\n    const io: ImGuiIO = ImGui.GetIO();\r\n    const font_current: ImFont = ImGui.GetFont();\r\n    if (ImGui.BeginCombo(label, font_current.GetDebugName()))\r\n    {\r\n        ImGui.Selectable(font_current.GetDebugName());\r\n        // TODO\r\n        // for (let n = 0; n < io.Fonts->Fonts.Size; n++)\r\n        // {\r\n        //     ImFont* font = io.Fonts->Fonts[n];\r\n        //     ImGui.PushID((void*)font);\r\n        //     if (ImGui.Selectable(font->GetDebugName(), font == font_current))\r\n        //         io.FontDefault = font;\r\n        //     ImGui.PopID();\r\n        // }\r\n        ImGui.EndCombo();\r\n    }\r\n    ImGui.SameLine();\r\n    HelpMarker(\r\n        \"- Load additional fonts with io.Fonts->AddFontFromFileTTF().\\n\" +\r\n        \"- The font atlas is built when calling io.Fonts->GetTexDataAsXXXX() or io.Fonts->Build().\\n\" +\r\n        \"- Read FAQ and documentation in misc/fonts for more details.\\n\" +\r\n        \"- If you need to add/remove fonts at runtime (e.g. for DPI change), do it before calling NewFrame().\");\r\n}\r\n\r\nexport function ShowStyleEditor(ref: ImGuiStyle | null = null): void\r\n{\r\n    // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it compares to an internally stored reference)\r\n    const style: ImGuiStyle = ImGui.GetStyle();\r\n    /* static */ const ref_saved_style: Static<ImGuiStyle> = STATIC(\"ref_saved_style\", new ImGuiStyle());\r\n\r\n    // Default to using internal storage as reference\r\n    /* static */ const init: Static<boolean> = STATIC(\"init\", true);\r\n    if (init.value && ref === null)\r\n        ref_saved_style.value.Copy(style);\r\n    init.value = false;\r\n    if (ref === null)\r\n        ref = ref_saved_style.value;\r\n\r\n    ImGui.PushItemWidth(ImGui.GetWindowWidth() * 0.50);\r\n\r\n    if (/*ImGui.*/ShowStyleSelector(\"Colors##Selector\"))\r\n        ref_saved_style.value.Copy(style);\r\n    /*ImGui.*/ShowFontSelector(\"Fonts##Selector\");\r\n\r\n    // Simplified Settings\r\n    if (ImGui.SliderFloat(\"FrameRounding\", (value = style.FrameRounding) => style.FrameRounding = value, 0.0, 12.0, \"%.0f\"))\r\n        style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding\r\n    { let window_border: boolean = (style.WindowBorderSize > 0.0); if (ImGui.Checkbox(\"WindowBorder\", (value = window_border) => window_border = value)) style.WindowBorderSize = window_border ? 1.0 : 0.0; }\r\n    ImGui.SameLine();\r\n    { let frame_border: boolean = (style.FrameBorderSize > 0.0); if (ImGui.Checkbox(\"FrameBorder\", (value = frame_border) => frame_border = value)) style.FrameBorderSize = frame_border ? 1.0 : 0.0; }\r\n    ImGui.SameLine();\r\n    { let popup_border: boolean = (style.PopupBorderSize > 0.0); if (ImGui.Checkbox(\"PopupBorder\", (value = popup_border) => popup_border = value)) style.PopupBorderSize = popup_border ? 1.0 : 0.0; }\r\n\r\n    // Save/Revert button\r\n    if (ImGui.Button(\"Save Ref\"))\r\n        ref.Copy(ref_saved_style.value.Copy(style));\r\n    ImGui.SameLine();\r\n    if (ImGui.Button(\"Revert Ref\"))\r\n        style.Copy(ref);\r\n    ImGui.SameLine();\r\n    HelpMarker(\"Save/Revert in local non-persistent storage. Default Colors definition are not affected. Use \\\"Export Colors\\\" below to save them somewhere.\");\r\n\r\n    ImGui.Separator();\r\n\r\n    if (ImGui.BeginTabBar(\"##tabs\", ImGuiTabBarFlags.None))\r\n    {\r\n        if (ImGui.BeginTabItem(\"Sizes\"))\r\n        {\r\n            ImGui.Text(\"Main\");\r\n            ImGui.SliderFloat2(\"WindowPadding\", style.WindowPadding, 0.0, 20.0, \"%.0f\");\r\n            ImGui.SliderFloat2(\"FramePadding\", style.FramePadding, 0.0, 20.0, \"%.0f\");\r\n            ImGui.SliderFloat2(\"ItemSpacing\", style.ItemSpacing, 0.0, 20.0, \"%.0f\");\r\n            ImGui.SliderFloat2(\"ItemInnerSpacing\", style.ItemInnerSpacing, 0.0, 20.0, \"%.0f\");\r\n            ImGui.SliderFloat2(\"TouchExtraPadding\", style.TouchExtraPadding, 0.0, 10.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"IndentSpacing\", (value = style.IndentSpacing) => style.IndentSpacing = value, 0.0, 30.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"ScrollbarSize\", (value = style.ScrollbarSize) => style.ScrollbarSize = value, 1.0, 20.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"GrabMinSize\", (value = style.GrabMinSize) => style.GrabMinSize = value, 1.0, 20.0, \"%.0f\");\r\n            ImGui.Text(\"Borders\");\r\n            ImGui.SliderFloat(\"WindowBorderSize\", (value = style.WindowBorderSize) => style.WindowBorderSize = value, 0.0, 1.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"ChildBorderSize\", (value = style.ChildBorderSize) => style.ChildBorderSize = value, 0.0, 1.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"PopupBorderSize\", (value = style.PopupBorderSize) => style.PopupBorderSize = value, 0.0, 1.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"FrameBorderSize\", (value = style.FrameBorderSize) => style.FrameBorderSize = value, 0.0, 1.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"TabBorderSize\", (value = style.TabBorderSize) => style.TabBorderSize = value, 0.0, 1.0, \"%.0f\");\r\n            ImGui.Text(\"Rounding\");\r\n            ImGui.SliderFloat(\"WindowRounding\", (value = style.WindowRounding) => style.WindowRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"ChildRounding\", (value = style.ChildRounding) => style.ChildRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"FrameRounding\", (value = style.FrameRounding) => style.FrameRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"PopupRounding\", (value = style.PopupRounding) => style.PopupRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"ScrollbarRounding\", (value = style.ScrollbarRounding) => style.ScrollbarRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"GrabRounding\", (value = style.GrabRounding) => style.GrabRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.SliderFloat(\"TabRounding\", (value = style.TabRounding) => style.TabRounding = value, 0.0, 12.0, \"%.0f\");\r\n            ImGui.Text(\"Alignment\");\r\n            ImGui.SliderFloat2(\"WindowTitleAlign\", style.WindowTitleAlign, 0.0, 1.0, \"%.2f\");\r\n            // ImGui.Combo(\"WindowMenuButtonPosition\", (int*)&style.WindowMenuButtonPosition, \"Left\\0Right\\0\");\r\n            ImGui.SliderFloat2(\"ButtonTextAlign\", style.ButtonTextAlign, 0.0, 1.0, \"%.2f\"); ImGui.SameLine(); HelpMarker(\"Alignment applies when a button is larger than its text content.\");\r\n            // ImGui.SliderFloat2(\"SelectableTextAlign\", (float*)&style.SelectableTextAlign, 0.0f, 1.0f, \"%.2f\"); ImGui.SameLine(); HelpMarker(\"Alignment applies when a selectable is larger than its text content.\");\r\n            ImGui.Text(\"Safe Area Padding\"); ImGui.SameLine(); HelpMarker(\"Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).\");\r\n            ImGui.SliderFloat2(\"DisplaySafeAreaPadding\", style.DisplaySafeAreaPadding, 0.0, 30.0, \"%.0f\");\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        if (ImGui.BeginTabItem(\"Colors\"))\r\n        {\r\n            /* static */ const output_dest: Static<number> = STATIC(\"output_dest\", 0);\r\n            /* static */ const output_only_modified: Static<boolean> = STATIC(\"output_only_modified\", true);\r\n            if (ImGui.Button(\"Export Unsaved\"))\r\n            {\r\n                if (output_dest.value === 0)\r\n                    ImGui.LogToClipboard();\r\n                else\r\n                    ImGui.LogToTTY();\r\n                ImGui.LogText(\"ImVec4* colors = ImGui.GetStyle().Colors;\" + IM_NEWLINE);\r\n                for (let i = 0; i < ImGuiCol.COUNT; i++)\r\n                {\r\n                    const col: Readonly<interface_ImVec4> = style.Colors[i];\r\n                    const name: string = ImGui.GetStyleColorName(i);\r\n                    if (!output_only_modified.value || !col.Equals(ref.Colors[i]))\r\n                        ImGui.LogText(`colors[ImGuiCol.${name}] = new ImVec4(${col.x.toFixed(2)}, ${col.y.toFixed(2)}, ${col.z.toFixed(2)}, ${col.w.toFixed(2)});` + IM_NEWLINE);\r\n                }\r\n                ImGui.LogFinish();\r\n            }\r\n            ImGui.SameLine(); ImGui.SetNextItemWidth(120); ImGui.Combo(\"##output_type\", (value = output_dest.value) => output_dest.value = value, \"To Clipboard\\0To TTY\\0\");\r\n            ImGui.SameLine(); ImGui.Checkbox(\"Only Modified Colors\", (value = output_only_modified.value) => output_only_modified.value = value);\r\n\r\n            ImGui.Text(\"Tip: Left-click on colored square to open color picker,\\nRight-click to open edit options menu.\");\r\n\r\n            /* static */ const filter: Static<ImGuiTextFilter> = STATIC(\"filter#2223\", new ImGuiTextFilter());\r\n            filter.value.Draw(\"Filter colors\", 200);\r\n\r\n            /* static */ const alpha_flags: Static<ImGuiColorEditFlags> = STATIC(\"alpha_flags\", 0);\r\n            ImGui.RadioButton(\"Opaque\", (value = alpha_flags.value) => alpha_flags.value = value, 0); ImGui.SameLine();\r\n            ImGui.RadioButton(\"Alpha\", (value = alpha_flags.value) => alpha_flags.value = value, ImGuiColorEditFlags.AlphaPreview); ImGui.SameLine();\r\n            ImGui.RadioButton(\"Both\", (value = alpha_flags.value) => alpha_flags.value = value, ImGuiColorEditFlags.AlphaPreviewHalf);\r\n\r\n            ImGui.BeginChild(\"#colors\", new ImVec2(0, 300), true, ImGuiWindowFlags.AlwaysVerticalScrollbar | ImGuiWindowFlags.AlwaysHorizontalScrollbar | ImGuiWindowFlags.NavFlattened);\r\n            ImGui.PushItemWidth(-160);\r\n            for (let i = 0; i < ImGuiCol.COUNT; i++)\r\n            {\r\n                const name: string = ImGui.GetStyleColorName(i);\r\n                if (!filter.value.PassFilter(name))\r\n                    continue;\r\n                ImGui.PushID(i);\r\n                ImGui.ColorEdit4(\"##color\", style.Colors[i], ImGuiColorEditFlags.AlphaBar | alpha_flags.value);\r\n                if (!style.Colors[i].Equals(ref.Colors[i]))\r\n                {\r\n                    // Tips: in a real user application, you may want to merge and use an icon font into the main font, so instead of \"Save\"/\"Revert\" you'd use icons.\r\n                    // Read the FAQ and misc/fonts/README.txt about using icon fonts. It's really easy and super convenient!\r\n                    ImGui.SameLine(0.0, style.ItemInnerSpacing.x); if (ImGui.Button(\"Save\")) ref.Colors[i].Copy(style.Colors[i]);\r\n                    ImGui.SameLine(0.0, style.ItemInnerSpacing.x); if (ImGui.Button(\"Revert\")) style.Colors[i].Copy(ref.Colors[i]);\r\n                }\r\n                ImGui.SameLine(0.0, style.ItemInnerSpacing.x);\r\n                ImGui.TextUnformatted(name);\r\n                ImGui.PopID();\r\n            }\r\n            ImGui.PopItemWidth();\r\n            ImGui.EndChild();\r\n\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        if (ImGui.BeginTabItem(\"Fonts\"))\r\n        {\r\n            const io: ImGuiIO = ImGui.GetIO();\r\n            const atlas: ImFontAtlas = io.Fonts;\r\n            HelpMarker(\"Read FAQ and misc/fonts/README.txt for details on font loading.\");\r\n            ImGui.PushItemWidth(120);\r\n            for (let i = 0; i < atlas.Fonts.Size; i++)\r\n            {\r\n                const font: ImFont = atlas.Fonts[i];\r\n                ImGui.PushID(font.native.$$.ptr);\r\n                const font_details_opened = ImGui.TreeNode(font.native.$$.ptr, `Font ${i}: \\'${font.ConfigData.length > 0 ? font.ConfigData[0].Name : \"\"}\\', ${font.FontSize.toFixed(2)} px, ${font.Glyphs.Size} glyphs, ${font.ConfigDataCount} file(s)`);\r\n                ImGui.SameLine(); if (ImGui.SmallButton(\"Set as default\")) io.FontDefault = font;\r\n                if (font_details_opened)\r\n                {\r\n                    ImGui.PushFont(font);\r\n                    ImGui.Text(\"The quick brown fox jumps over the lazy dog\");\r\n                    ImGui.PopFont();\r\n                    ImGui.DragFloat(\"Font scale\", (value = font.Scale) => font.Scale = value, 0.005, 0.3, 2.0, \"%.1f\");   // Scale only this font\r\n                    ImGui.SameLine(); HelpMarker(\"Note than the default embedded font is NOT meant to be scaled.\\n\\nFont are currently rendered into bitmaps at a given size at the time of building the atlas. You may oversample them to get some flexibility with scaling. You can also render at multiple sizes and select which one to use at runtime.\\n\\n(Glimmer of hope: the atlas system should hopefully be rewritten in the future to make scaling more natural and automatic.)\");\r\n                    ImGui.InputFloat(\"Font offset\", (value = font.DisplayOffset.y) => font.DisplayOffset.y = value, 1, 1, \"%.0f\");\r\n                    ImGui.Text(`Ascent: ${font.Ascent}, Descent: ${font.Descent}, Height: ${font.Ascent - font.Descent}`);\r\n                    ImGui.Text(`Fallback character: '${String.fromCharCode(font.FallbackChar)}' (${font.FallbackChar})`);\r\n                    const surface_sqrt: number = Math.sqrt(font.MetricsTotalSurface);\r\n                    ImGui.Text(`Texture surface: ${font.MetricsTotalSurface} pixels (approx) ~ ${0 | surface_sqrt}x${0 | surface_sqrt}`);\r\n                    for (let config_i = 0; config_i < font.ConfigDataCount; config_i++)\r\n                    {\r\n                        const cfg: ImGui.ImFontConfig = font.ConfigData[config_i];\r\n                        ImGui.BulletText(`Input ${config_i}: \\'${cfg.Name}\\', Oversample: (${cfg.OversampleH},${cfg.OversampleH}), PixelSnapH: ${cfg.PixelSnapH}`);\r\n                    }\r\n                    if (ImGui.TreeNode(\"Glyphs\", `Glyphs (${font.Glyphs.Size})`))\r\n                    {\r\n                        // Display all glyphs of the fonts in separate pages of 256 characters\r\n                        for (let base = 0; base < 0x10000; base += 256)\r\n                        {\r\n                            let count = 0;\r\n                            for (let n = 0; n < 256; n++)\r\n                                count += font.FindGlyphNoFallback((base + n) as ImGui.Bind.ImWchar) ? 1 : 0;\r\n                            if (count > 0 && ImGui.TreeNode(base, `U+${format_number_hex(base, 4).toUpperCase()}..U+${(format_number_hex(base + 255, 4).toUpperCase())} (${count} ${count > 1 ? \"glyphs\" : \"glyph\"})`))\r\n                            {\r\n                                const cell_size = font.FontSize * 1;\r\n                                const cell_spacing = style.ItemSpacing.y;\r\n                                const base_pos = ImGui.GetCursorScreenPos();\r\n                                const draw_list = ImGui.GetWindowDrawList();\r\n                                for (let n = 0; n < 256; n++)\r\n                                {\r\n                                    const cell_p1 = new ImVec2(base_pos.x + (n % 16) * (cell_size + cell_spacing), base_pos.y + (0 | (n / 16)) * (cell_size + cell_spacing));\r\n                                    const cell_p2 = new ImVec2(cell_p1.x + cell_size, cell_p1.y + cell_size);\r\n                                    const glyph: ImGui.ImFontGlyph | null = font.FindGlyphNoFallback((base + n) as ImGui.Bind.ImWchar);\r\n                                    draw_list.AddRect(cell_p1, cell_p2, glyph ? IM_COL32(255,255,255,100) : IM_COL32(255,255,255,50));\r\n                                    if (glyph)\r\n                                        font.RenderChar(draw_list, cell_size, cell_p1, ImGui.GetColorU32(ImGuiCol.Text), (base+n) as ImGui.Bind.ImWchar); // We use ImFont.RenderChar as a shortcut because we don't have UTF-8 conversion functions available to generate a string.\r\n                                    if (glyph && ImGui.IsWindowHovered() && ImGui.IsMouseHoveringRect(cell_p1, cell_p2))\r\n                                    {\r\n                                        ImGui.BeginTooltip();\r\n                                        ImGui.Text(`Codepoint: U+${format_number_hex(base + n, 4).toUpperCase()}`);\r\n                                        ImGui.Separator();\r\n                                        ImGui.Image(ImGui.GetIO().Fonts.TexID, new ImVec2(8 * (glyph.X1 - glyph.X0), 8 * (glyph.Y1 - glyph.Y0)), new ImVec2(glyph.U0, glyph.V0), new ImVec2(glyph.U1, glyph.V1), new ImColor(255, 255, 255, 255).toImVec4(), new ImColor(255, 255, 255, 128).toImVec4());\r\n                                        ImGui.SameLine();\r\n                                        ImGui.BeginGroup();\r\n                                        ImGui.Text(`AdvanceX: ${glyph.AdvanceX.toFixed(1)}`);\r\n                                        ImGui.Text(`Pos: (${glyph.X0.toFixed(2)},${glyph.Y0.toFixed(2)}).(${glyph.X1.toFixed(2)},${glyph.Y1.toFixed(2)})`);\r\n                                        ImGui.Text(`UV: (${glyph.U0.toFixed(3)},${glyph.V0.toFixed(3)}).(${glyph.U1.toFixed(3)},${glyph.V1.toFixed(3)})`);\r\n                                        ImGui.EndGroup();\r\n                                        ImGui.EndTooltip();\r\n                                    }\r\n                                }\r\n                                ImGui.Dummy(new ImVec2((cell_size + cell_spacing) * 16, (cell_size + cell_spacing) * 16));\r\n                                ImGui.TreePop();\r\n                            }\r\n                        }\r\n                        ImGui.TreePop();\r\n                    }\r\n                    ImGui.TreePop();\r\n                }\r\n                ImGui.PopID();\r\n            }\r\n            if (ImGui.TreeNode(\"Atlas texture\", `Atlas texture (${atlas.TexWidth}x${atlas.TexHeight} pixels)`))\r\n            {\r\n                const tint_col: ImVec4 = new ImVec4(1.0, 1.0, 1.0, 1.0);\r\n                const border_col: ImVec4 = new ImVec4(1.0, 1.0, 1.0, 0.5);\r\n                ImGui.Image(atlas.TexID, new ImVec2(atlas.TexWidth, atlas.TexHeight), new ImVec2(0, 0), new ImVec2(1, 1), tint_col, border_col);\r\n                ImGui.TreePop();\r\n            }\r\n\r\n            /* static */ const window_scale: Static<number> = STATIC(\"window_scale\", 1.0);\r\n            if (ImGui.DragFloat(\"this window scale\", (value = window_scale.value) => window_scale.value = value, 0.005, 0.3, 2.0, \"%.2f\"))              // scale only this window\r\n                ImGui.SetWindowFontScale(window_scale.value);\r\n            ImGui.DragFloat(\"global scale\", (value = ImGui.GetIO().FontGlobalScale) => io.FontGlobalScale = value, 0.005, 0.3, 2.0, \"%.2f\"); // scale everything\r\n            ImGui.PopItemWidth();\r\n\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        if (ImGui.BeginTabItem(\"Rendering\"))\r\n        {\r\n            ImGui.Checkbox(\"Anti-aliased lines\", (value = style.AntiAliasedLines) => style.AntiAliasedLines = value); ImGui.SameLine(); HelpMarker(\"When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.\");\r\n            ImGui.Checkbox(\"Anti-aliased fill\", (value = style.AntiAliasedFill) => style.AntiAliasedFill = value);\r\n            ImGui.PushItemWidth(100);\r\n            ImGui.DragFloat(\"Curve Tessellation Tolerance\", (value = style.CurveTessellationTol) => style.CurveTessellationTol = value, 0.02, 0.10, Number.MAX_VALUE, \"%.2f\", 2.0);\r\n            if (style.CurveTessellationTol < 0.10) style.CurveTessellationTol = 0.10;\r\n            ImGui.DragFloat(\"Global Alpha\", (value = style.Alpha) => style.Alpha = value, 0.005, 0.20, 1.0, \"%.2f\"); // Not exposing zero here so user doesn't \"lose\" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.\r\n            ImGui.PopItemWidth();\r\n\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        ImGui.EndTabBar();\r\n    }\r\n\r\n    ImGui.PopItemWidth();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate creating a \"main\" fullscreen menu bar and populating it.\r\n// Note the difference between BeginMainMenuBar() and BeginMenuBar():\r\n// - BeginMenuBar() = menu-bar inside current window we Begin()-ed into (the window needs the ImGuiWindowFlags_MenuBar flag)\r\n// - BeginMainMenuBar() = helper to create menu-bar-sized window at the top of the main viewport + call BeginMenuBar() into it.\r\nfunction ShowExampleAppMainMenuBar(): void\r\n{\r\n    if (ImGui.BeginMainMenuBar())\r\n    {\r\n        if (ImGui.BeginMenu(\"File\"))\r\n        {\r\n            ShowExampleMenuFile();\r\n            ImGui.EndMenu();\r\n        }\r\n        if (ImGui.BeginMenu(\"Edit\"))\r\n        {\r\n            if (ImGui.MenuItem(\"Undo\", \"CTRL+Z\")) {}\r\n            if (ImGui.MenuItem(\"Redo\", \"CTRL+Y\", false, false)) {}  // Disabled item\r\n            ImGui.Separator();\r\n            if (ImGui.MenuItem(\"Cut\", \"CTRL+X\")) {}\r\n            if (ImGui.MenuItem(\"Copy\", \"CTRL+C\")) {}\r\n            if (ImGui.MenuItem(\"Paste\", \"CTRL+V\")) {}\r\n            ImGui.EndMenu();\r\n        }\r\n        ImGui.EndMainMenuBar();\r\n    }\r\n}\r\n\r\n// Note that shortcuts are currently provided for display only (future version will add flags to BeginMenu to process shortcuts)\r\nfunction ShowExampleMenuFile(): void\r\n{\r\n    ImGui.MenuItem(\"(dummy menu)\", null, false, false);\r\n    if (ImGui.MenuItem(\"New\")) {}\r\n    if (ImGui.MenuItem(\"Open\", \"Ctrl+O\")) {}\r\n    if (ImGui.BeginMenu(\"Open Recent\"))\r\n    {\r\n        ImGui.MenuItem(\"fish_hat.c\");\r\n        ImGui.MenuItem(\"fish_hat.inl\");\r\n        ImGui.MenuItem(\"fish_hat.h\");\r\n        if (ImGui.BeginMenu(\"More..\"))\r\n        {\r\n            ImGui.MenuItem(\"Hello\");\r\n            ImGui.MenuItem(\"Sailor\");\r\n            if (ImGui.BeginMenu(\"Recurse..\"))\r\n            {\r\n                ShowExampleMenuFile();\r\n                ImGui.EndMenu();\r\n            }\r\n            ImGui.EndMenu();\r\n        }\r\n        ImGui.EndMenu();\r\n    }\r\n    if (ImGui.MenuItem(\"Save\", \"Ctrl+S\")) {}\r\n    if (ImGui.MenuItem(\"Save As..\")) {}\r\n    ImGui.Separator();\r\n    if (ImGui.BeginMenu(\"Options\"))\r\n    {\r\n        /* static */ const enabled: Static<boolean> = STATIC(\"enabled\", true);\r\n        ImGui.MenuItem(\"Enabled\", \"\", (value = enabled.value) => enabled.value = value);\r\n        ImGui.BeginChild(\"child\", new ImVec2(0, 60), true);\r\n        for (let i = 0; i < 10; i++)\r\n            ImGui.Text(`Scrolling Text ${i}`);\r\n        ImGui.EndChild();\r\n        /* static */ const f: Static<number> = STATIC(\"f#2408\", 0.5);\r\n        /* static */ const n: Static<number> = STATIC(\"n\", 0);\r\n        /* static */ const b: Static<boolean> = STATIC(\"b#2599\", true);\r\n        ImGui.SliderFloat(\"Value\", (value = f.value) => f.value = value, 0.0, 1.0);\r\n        ImGui.InputFloat(\"Input\", (value = f.value) => f.value = value, 0.1);\r\n        ImGui.Combo(\"Combo\", (value = n.value) => n.value = value, \"Yes\\0No\\0Maybe\\0\\0\");\r\n        ImGui.Checkbox(\"Check\", (value = b.value) => b.value = value);\r\n        ImGui.EndMenu();\r\n    }\r\n    if (ImGui.BeginMenu(\"Colors\"))\r\n    {\r\n        const sz: number = ImGui.GetTextLineHeight();\r\n        for (let i = 0; i < ImGuiCol.COUNT; i++)\r\n        {\r\n            const name: string = ImGui.GetStyleColorName(i as ImGuiCol);\r\n            const p: ImGui.interface_ImVec2 = ImGui.GetCursorScreenPos();\r\n            ImGui.GetWindowDrawList().AddRectFilled(p, new ImVec2(p.x + sz, p.y + sz), ImGui.GetColorU32(i as ImGuiCol));\r\n            ImGui.Dummy(new ImVec2(sz, sz));\r\n            ImGui.SameLine();\r\n            ImGui.MenuItem(name);\r\n        }\r\n        ImGui.EndMenu();\r\n    }\r\n    if (ImGui.BeginMenu(\"Disabled\", false)) // Disabled\r\n    {\r\n        IM_ASSERT(0);\r\n    }\r\n    if (ImGui.MenuItem(\"Checked\", null, true)) {}\r\n    if (ImGui.MenuItem(\"Quit\", \"Alt+F4\")) { done = true; }\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Debug Console / ShowExampleAppConsole()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate creating a simple console window, with scrolling, filtering, completion and history.\r\n// For the console example, here we are using a more C++ like approach of declaring a class to hold the data and the functions.\r\nclass ExampleAppConsole {\r\n    // char                  InputBuf[256];\r\n    public InputBuf: ImStringBuffer = new ImStringBuffer(256, \"\");\r\n    // ImVector<char*>       Items;\r\n    public Items: ImVector<string> = new ImVector<string>();\r\n    // ImVector<const char*> Commands;\r\n    public Commands: ImVector<string> = new ImVector<string>();\r\n    // ImVector<char*>       History;\r\n    public History: ImVector<string> = new ImVector<string>();\r\n    // int                   HistoryPos;    // -1: new line, 0..History.Size-1 browsing history.\r\n    public HistoryPos: number = -1;\r\n    // ImGuiTextFilter       Filter;\r\n    public Filter: ImGuiTextFilter = new ImGuiTextFilter();\r\n    // bool                  AutoScroll;\r\n    public AutoScroll: boolean = true;\r\n    // bool                  ScrollToBottom;\r\n    public ScrollToBottom: boolean = true;\r\n\r\n    constructor() {\r\n        this.ClearLog();\r\n        // memset(InputBuf, 0, sizeof(InputBuf));\r\n        this.InputBuf.buffer = \"\";\r\n        this.HistoryPos = -1;\r\n        this.Commands.push_back(\"HELP\");\r\n        this.Commands.push_back(\"HISTORY\");\r\n        this.Commands.push_back(\"CLEAR\");\r\n        this.Commands.push_back(\"CLASSIFY\");  // \"classify\" is only here to provide an example of \"C\"+[tab] completing to \"CL\" and displaying matches.\r\n        this.AutoScroll = true;\r\n        this.ScrollToBottom = true;\r\n        this.AddLog(\"Welcome to Dear ImGui!\");\r\n    }\r\n\r\n    public delete(): void {}\r\n\r\n    // Portable helpers\r\n    // static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = toupper(*str2) - toupper(*str1)) === 0 && *str1) { str1++; str2++; } return d; }\r\n    // static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 && (d = toupper(*str2) - toupper(*str1)) === 0 && *str1) { str1++; str2++; n--; } return d; }\r\n    // static char* Strdup(const char *str)                             { size_t len = strlen(str) + 1; void* buf = malloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)str, len); }\r\n    // static void  Strtrim(char* str)                                  { char* str_end = str + strlen(str); while (str_end > str && str_end[-1] == ' ') str_end--; *str_end = 0; }\r\n\r\n    public ClearLog(): void {\r\n        // for (let i = 0; i < Items.Size; i++)\r\n        //     free(Items[i]);\r\n        this.Items.clear();\r\n        this.ScrollToBottom = true;\r\n    }\r\n\r\n    // void    AddLog(const char* fmt, ...) IM_FMTARGS(2)\r\n    public AddLog(fmt: string): void {\r\n        // FIXME-OPT\r\n        // char buf[1024];\r\n        // va_list args;\r\n        // va_start(args, fmt);\r\n        // vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);\r\n        // buf[IM_ARRAYSIZE(buf)-1] = 0;\r\n        // va_end(args);\r\n        // Items.push_back(Strdup(buf));\r\n        this.Items.push_back(fmt);\r\n        if (this.AutoScroll)\r\n            this.ScrollToBottom = true;\r\n    }\r\n\r\n    // void    Draw(const char* title, bool* p_open)\r\n    public Draw(title: string, p_open: ImAccess<boolean>): void\r\n    {\r\n        ImGui.SetNextWindowSize(new ImVec2(520, 600), ImGuiCond.FirstUseEver);\r\n        if (!ImGui.Begin(title, p_open))\r\n        {\r\n            ImGui.End();\r\n            return;\r\n        }\r\n\r\n        // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar. So e.g. IsItemHovered() will return true when hovering the title bar.\r\n        // Here we create a context menu only available from the title bar.\r\n        if (ImGui.BeginPopupContextItem())\r\n        {\r\n            if (ImGui.MenuItem(\"Close Console\"))\r\n                // *p_open = false;\r\n                p_open(false);\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        ImGui.TextWrapped(\"This example implements a console with basic coloring, completion and history. A more elaborate implementation may want to store entries along with extra data such as timestamp, emitter, etc.\");\r\n        ImGui.TextWrapped(\"Enter 'HELP' for help, press TAB to use text completion.\");\r\n\r\n        // TODO: display items starting from the bottom\r\n\r\n        if (ImGui.SmallButton(\"Add Dummy Text\")) { this.AddLog(`${this.Items.Size} some text`); this.AddLog(\"some more text\"); this.AddLog(\"display very important message here!\"); } ImGui.SameLine();\r\n        if (ImGui.SmallButton(\"Add Dummy Error\")) { this.AddLog(\"[error] something went wrong\"); } ImGui.SameLine();\r\n        if (ImGui.SmallButton(\"Clear\")) { this.ClearLog(); } ImGui.SameLine();\r\n        const copy_to_clipboard: boolean = ImGui.SmallButton(\"Copy\"); ImGui.SameLine();\r\n        if (ImGui.SmallButton(\"Scroll to bottom\")) this.ScrollToBottom = true;\r\n        // /* static */ const t: Static<number> = getStatic(\"t\", 0.0); if (ImGui.GetTime() - t > 0.02) { t = ImGui.GetTime(); this.AddLog(`Spam ${t}`); }\r\n\r\n        ImGui.Separator();\r\n\r\n        // Options menu\r\n        if (ImGui.BeginPopup(\"Options\"))\r\n        {\r\n            if (ImGui.Checkbox(\"Auto-scroll\", (value = this.AutoScroll) => this.AutoScroll = value))\r\n                if (this.AutoScroll)\r\n                    this.ScrollToBottom = true;\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // Options, Filter\r\n        if (ImGui.Button(\"Options\"))\r\n            ImGui.OpenPopup(\"Options\");\r\n        ImGui.SameLine();\r\n        this.Filter.Draw(\"Filter (\\\"incl,-excl\\\") (\\\"error\\\")\", 180);\r\n        ImGui.Separator();\r\n\r\n        const footer_height_to_reserve: number = ImGui.GetStyle().ItemSpacing.y + ImGui.GetFrameHeightWithSpacing(); // 1 separator, 1 input text\r\n        ImGui.BeginChild(\"ScrollingRegion\", new ImVec2(0, -footer_height_to_reserve), false, ImGuiWindowFlags.HorizontalScrollbar); // Leave room for 1 separator + 1 InputText\r\n        if (ImGui.BeginPopupContextWindow())\r\n        {\r\n            if (ImGui.Selectable(\"Clear\")) this.ClearLog();\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // Display every line as a separate entry so we can change their color or add custom widgets. If you only want raw text you can use ImGui.TextUnformatted(log.begin(), log.end());\r\n        // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping to only process visible items.\r\n        // You can seek and display only the lines that are visible using the ImGuiListClipper helper, if your elements are evenly spaced and you have cheap random access to the elements.\r\n        // To use the clipper we could replace the 'for (let i = 0; i < Items.Size; i++)' loop with:\r\n        //     ImGuiListClipper clipper(Items.Size);\r\n        //     while (clipper.Step())\r\n        //         for (let i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\r\n        // However, note that you can not use this code as is if a filter is active because it breaks the 'cheap random-access' property. We would need random-access on the post-filtered list.\r\n        // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices that passed the filtering test, recomputing this array when user changes the filter,\r\n        // and appending newly elements as they are inserted. This is left as a task to the user until we can manage to improve this example code!\r\n        // If your items are of variable size you may want to implement code similar to what ImGuiListClipper does. Or split your data into fixed height items to allow random-seeking into your list.\r\n        ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new ImVec2(4, 1)); // Tighten spacing\r\n        if (copy_to_clipboard)\r\n            ImGui.LogToClipboard();\r\n        for (let i = 0; i < this.Items.Size; i++)\r\n        {\r\n            // const char* item = Items[i];\r\n            const item: string = this.Items.Data[i];\r\n            if (!this.Filter.PassFilter(item))\r\n                continue;\r\n\r\n            // Normally you would store more information in your item (e.g. make Items[] an array of structure, store color/type etc.)\r\n            let pop_color = false;\r\n            // if (strstr(item, \"[error]\"))            { ImGui.PushStyleColor(ImGuiCol_Text, new ImVec4(1.0f, 0.4f, 0.4f, 1.0f)); pop_color = true; }\r\n            if (/\\[error\\]/.test(item)) { ImGui.PushStyleColor(ImGuiCol.Text, new ImVec4(1.0, 0.4, 0.4, 1.0)); pop_color = true; }\r\n            // else if (strncmp(item, \"# \", 2) == 0)   { ImGui.PushStyleColor(ImGuiCol_Text, new ImVec4(1.0f, 0.8f, 0.6f, 1.0f)); pop_color = true; }\r\n            else if (/^# /.test(item))  { ImGui.PushStyleColor(ImGuiCol.Text, new ImVec4(1.0, 0.8, 0.6, 1.0)); pop_color = true; }\r\n            ImGui.TextUnformatted(item);\r\n            if (pop_color)\r\n                ImGui.PopStyleColor();\r\n        }\r\n        if (copy_to_clipboard)\r\n            ImGui.LogFinish();\r\n        if (this.ScrollToBottom)\r\n            ImGui.SetScrollHereY(1.0);\r\n        this.ScrollToBottom = false;\r\n        ImGui.PopStyleVar();\r\n        ImGui.EndChild();\r\n        ImGui.Separator();\r\n\r\n        // Command-line\r\n        let reclaim_focus: boolean = false;\r\n        if (ImGui.InputText(\"Input\", this.InputBuf, IM_ARRAYSIZE(this.InputBuf), ImGuiInputTextFlags.EnterReturnsTrue | ImGuiInputTextFlags.CallbackCompletion | ImGuiInputTextFlags.CallbackHistory, ExampleAppConsole.TextEditCallbackStub, this))\r\n        {\r\n            // char* s = InputBuf;\r\n            // Strtrim(s);\r\n            // if (s[0])\r\n            //     ExecCommand(s);\r\n            // strcpy(s, \"\");\r\n            this.InputBuf.buffer = this.InputBuf.buffer.trim();\r\n            if (this.InputBuf.buffer.length > 0)\r\n                this.ExecCommand(this.InputBuf.buffer);\r\n            this.InputBuf.buffer = \"\";\r\n            reclaim_focus = true;\r\n        }\r\n\r\n        // Auto-focus on window apparition\r\n        ImGui.SetItemDefaultFocus();\r\n        if (reclaim_focus)\r\n            ImGui.SetKeyboardFocusHere(-1); // Auto focus previous widget\r\n\r\n        ImGui.End();\r\n    }\r\n\r\n    // void    ExecCommand(const char* command_line)\r\n    public ExecCommand(command_line: string): void\r\n    {\r\n        this.AddLog(`# ${command_line}\\n`);\r\n\r\n        // Insert into history. First find match and delete it so it can be pushed to the back. This isn't trying to be smart or optimal.\r\n        this.HistoryPos = -1;\r\n        for (let i = this.History.Size - 1; i >= 0; i--)\r\n            // if (Stricmp(History[i], command_line) === 0)\r\n            if (this.History.Data[i].toLowerCase() === command_line.toLowerCase())\r\n            {\r\n                // free(History[i]);\r\n                // History.erase(History.begin() + i);\r\n                break;\r\n            }\r\n        // History.push_back(Strdup(command_line));\r\n        this.History.push_back(command_line);\r\n\r\n        // Process command\r\n        // if (Stricmp(command_line, \"CLEAR\") === 0)\r\n        if (command_line.toUpperCase() === \"CLEAR\")\r\n        {\r\n            this.ClearLog();\r\n        }\r\n        // else if (Stricmp(command_line, \"HELP\") === 0)\r\n        else if (command_line.toUpperCase() === \"HELP\")\r\n        {\r\n            this.AddLog(\"Commands:\");\r\n            for (let i = 0; i < this.Commands.Size; i++)\r\n                this.AddLog(`- ${this.Commands.Data[i]}`);\r\n        }\r\n        // else if (Stricmp(command_line, \"HISTORY\") === 0)\r\n        else if (command_line.toUpperCase() === \"HISTORY\")\r\n        {\r\n            const first: number = this.History.Size - 10;\r\n            for (let i = first > 0 ? first : 0; i < this.History.Size; i++)\r\n                this.AddLog(`${i}: ${this.History.Data[i]}\\n`);\r\n        }\r\n        else\r\n        {\r\n           this.AddLog(`Unknown command: '${command_line}'\\n`);\r\n        }\r\n\r\n        // On commad input, we scroll to bottom even if AutoScroll==false\r\n        this.ScrollToBottom = true;\r\n    }\r\n\r\n    // static const TextEditCallbackStub: number(ImGuiInputTextCallbackData* data) // In C++11 you are better off using lambdas for this sort of forwarding callbacks\r\n    public static TextEditCallbackStub(data: ImGuiInputTextCallbackData): number\r\n    {\r\n        // ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;\r\n        const _console: ExampleAppConsole = data.UserData as ExampleAppConsole;\r\n        return _console.TextEditCallback(data);\r\n    }\r\n\r\n    // int     TextEditCallback(ImGuiInputTextCallbackData* data)\r\n    public TextEditCallback(data: ImGuiInputTextCallbackData): number\r\n    {\r\n        //AddLog(\"cursor: %d, selection: %d-%d\", data->CursorPos, data->SelectionStart, data->SelectionEnd);\r\n        switch (data.EventFlag)\r\n        {\r\n        case ImGuiInputTextFlags.CallbackCompletion:\r\n            {\r\n                // Example of TEXT COMPLETION\r\n\r\n                // Locate beginning of current word\r\n                // const char* word_end = data->Buf + data->CursorPos;\r\n                // const char* word_start = word_end;\r\n                // while (word_start > data->Buf)\r\n                // {\r\n                //     const char c = word_start[-1];\r\n                //     if (c === ' ' || c === '\\t' || c === ',' || c === ';')\r\n                //         break;\r\n                //     word_start--;\r\n                // }\r\n\r\n                // // Build a list of candidates\r\n                // ImVector<const char*> candidates;\r\n                // for (let i = 0; i < Commands.Size; i++)\r\n                //     if (Strnicmp(Commands[i], word_start, (int)(word_end-word_start)) === 0)\r\n                //         candidates.push_back(Commands[i]);\r\n\r\n                // if (candidates.Size === 0)\r\n                // {\r\n                //     // No match\r\n                //     AddLog(\"No match for \\\"%.*s\\\"!\\n\", (int)(word_end-word_start), word_start);\r\n                // }\r\n                // else if (candidates.Size === 1)\r\n                // {\r\n                //     // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing\r\n                //     data->DeleteChars((int)(word_start-data->Buf), (int)(word_end-word_start));\r\n                //     data->InsertChars(data->CursorPos, candidates[0]);\r\n                //     data->InsertChars(data->CursorPos, \" \");\r\n                // }\r\n                // else\r\n                // {\r\n                //     // Multiple matches. Complete as much as we can, so inputing \"C\" will complete to \"CL\" and display \"CLEAR\" and \"CLASSIFY\"\r\n                //     int match_len = (int)(word_end - word_start);\r\n                //     for (;;)\r\n                //     {\r\n                //         int c = 0;\r\n                //         bool all_candidates_matches = true;\r\n                //         for (let i = 0; i < candidates.Size && all_candidates_matches; i++)\r\n                //             if (i === 0)\r\n                //                 c = toupper(candidates[i][match_len]);\r\n                //             else if (c === 0 || c !== toupper(candidates[i][match_len]))\r\n                //                 all_candidates_matches = false;\r\n                //         if (!all_candidates_matches)\r\n                //             break;\r\n                //         match_len++;\r\n                //     }\r\n\r\n                //     if (match_len > 0)\r\n                //     {\r\n                //         data->DeleteChars((int)(word_start - data->Buf), (int)(word_end-word_start));\r\n                //         data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);\r\n                //     }\r\n\r\n                //     // List matches\r\n                //     AddLog(\"Possible matches:\\n\");\r\n                //     for (let i = 0; i < candidates.Size; i++)\r\n                //         AddLog(\"- %s\\n\", candidates[i]);\r\n                // }\r\n\r\n                break;\r\n            }\r\n        case ImGuiInputTextFlags.CallbackHistory:\r\n            {\r\n                // Example of HISTORY\r\n                // const int prev_history_pos = HistoryPos;\r\n                // if (data->EventKey === ImGuiKey_UpArrow)\r\n                // {\r\n                //     if (HistoryPos === -1)\r\n                //         HistoryPos = History.Size - 1;\r\n                //     else if (HistoryPos > 0)\r\n                //         HistoryPos--;\r\n                // }\r\n                // else if (data->EventKey === ImGuiKey_DownArrow)\r\n                // {\r\n                //     if (HistoryPos !== -1)\r\n                //         if (++HistoryPos >= History.Size)\r\n                //             HistoryPos = -1;\r\n                // }\r\n\r\n                // // A better implementation would preserve the data on the current input line along with cursor position.\r\n                // if (prev_history_pos !== HistoryPos)\r\n                // {\r\n                //     const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : \"\";\r\n                //     data->DeleteChars(0, data->BufTextLen);\r\n                //     data->InsertChars(0, history_str);\r\n                // }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction ShowExampleAppConsole(p_open: ImAccess<boolean>): void\r\n{\r\n    /* static */ const console: Static<ExampleAppConsole> = STATIC(\"console\", new ExampleAppConsole());\r\n    console.value.Draw(\"Example: Console\", p_open);\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Debug Log / ShowExampleAppLog()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Usage:\r\n//  static ExampleAppLog my_log;\r\n//  my_log.AddLog(\"Hello %d world\\n\", 123);\r\n//  my_log.Draw(\"title\");\r\nclass ExampleAppLog\r\n{\r\n    // ImGuiTextBuffer     Buf;\r\n    public Buf: ImGuiTextBuffer = new ImGuiTextBuffer();\r\n    // ImGuiTextFilter     Filter;\r\n    public Filter: ImGuiTextFilter = new ImGuiTextFilter();\r\n    // ImVector<int>       LineOffsets;        // Index to lines offset. We maintain this with AddLog() calls, allowing us to have a random access on lines\r\n    public LineOffsets: ImVector<number> = new ImVector<number>();\r\n    // bool                AutoScroll;\r\n    public AutoScroll: boolean = true;\r\n    // bool                ScrollToBottom;\r\n    public ScrollToBottom: boolean = false;\r\n\r\n    // void    Clear()     { Buf.clear(); LineOffsets.clear(); }\r\n    public Clear(): void {\r\n        this.Buf.clear();\r\n        this.LineOffsets.clear();\r\n        this.LineOffsets.push_back(0);\r\n    }\r\n\r\n    // void    AddLog(const char* fmt, ...) IM_FMTARGS(2)\r\n    public AddLog(fmt: string): void\r\n    {\r\n        let old_size: number = this.Buf.size();\r\n        // va_list args;\r\n        // va_start(args, fmt);\r\n        // Buf.appendfv(fmt, args);\r\n        // va_end(args);\r\n        this.Buf.append(fmt);\r\n        for (const new_size = this.Buf.size(); old_size < new_size; old_size++)\r\n            if (this.Buf.Buf[old_size] === \"\\n\")\r\n                this.LineOffsets.push_back(old_size + 1);\r\n        if (this.AutoScroll)\r\n            this.ScrollToBottom = true;\r\n    }\r\n\r\n    public Draw(title: string, p_open: ImAccess<boolean>): void\r\n    {\r\n        ImGui.SetNextWindowSize(new ImVec2(500, 400), ImGuiCond.FirstUseEver);\r\n        if (!ImGui.Begin(title, p_open))\r\n        {\r\n            ImGui.End();\r\n            return;\r\n        }\r\n\r\n        // Options menu\r\n        if (ImGui.BeginPopup(\"Options\"))\r\n        {\r\n            if (ImGui.Checkbox(\"Auto-scroll\", (value = this.AutoScroll) => this.AutoScroll = value))\r\n                if (this.AutoScroll)\r\n                    this.ScrollToBottom = true;\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        // Main window\r\n        if (ImGui.Button(\"Options\"))\r\n            ImGui.OpenPopup(\"Options\");\r\n        ImGui.SameLine();\r\n        const clear: boolean = ImGui.Button(\"Clear\");\r\n        ImGui.SameLine();\r\n        const copy: boolean = ImGui.Button(\"Copy\");\r\n        ImGui.SameLine();\r\n        this.Filter.Draw(\"Filter\", -100.0);\r\n\r\n        ImGui.Separator();\r\n        ImGui.BeginChild(\"scrolling\", new ImVec2(0, 0), false, ImGuiWindowFlags.HorizontalScrollbar);\r\n\r\n        if (clear)\r\n            this.Clear();\r\n        if (copy)\r\n            ImGui.LogToClipboard();\r\n\r\n        ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new ImVec2(0, 0));\r\n        // const char* buf = Buf.begin();\r\n        // const char* buf_end = Buf.end();\r\n        if (this.Filter.IsActive())\r\n        {\r\n            // In this example we don't use the clipper when Filter is enabled.\r\n            // This is because we don't have a random access on the result on our filter.\r\n            // A real application processing logs with ten of thousands of entries may want to store the result of search/filter.\r\n            // especially if the filtering function is not trivial (e.g. reg-exp).\r\n            // for (int line_no = 0; line_no < LineOffsets.Size; line_no++)\r\n            // {\r\n            //     const char* line_start = buf + LineOffsets[line_no];\r\n            //     const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;\r\n            //     if (Filter.PassFilter(line_start, line_end))\r\n            //         ImGui.TextUnformatted(line_start, line_end);\r\n            // }\r\n        }\r\n        else\r\n        {\r\n            // The simplest and easy way to display the entire buffer:\r\n            //   ImGui.TextUnformatted(buf_begin, buf_end);\r\n            // And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward to skip non-visible lines.\r\n            // Here we instead demonstrate using the clipper to only process lines that are within the visible area.\r\n            // If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them on your side is recommended.\r\n            // Using ImGuiListClipper requires A) random access into your data, and B) items all being the  same height,\r\n            // both of which we can handle since we an array pointing to the beginning of each line of text.\r\n            // When using the filter (in the block of code above) we don't have random access into the data to display anymore, which is why we don't use the clipper.\r\n            // Storing or skimming through the search result would make it possible (and would be recommended if you want to search through tens of thousands of entries)\r\n            // ImGuiListClipper clipper;\r\n            // clipper.Begin(LineOffsets.Size);\r\n            // while (clipper.Step())\r\n            // {\r\n            //     for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)\r\n            //     {\r\n            //         const char* line_start = buf + LineOffsets[line_no];\r\n            //         const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;\r\n            //         ImGui.TextUnformatted(line_start, line_end);\r\n            //     }\r\n            // }\r\n            // clipper.End();\r\n        }\r\n        ImGui.PopStyleVar();\r\n\r\n        if (this.ScrollToBottom)\r\n            ImGui.SetScrollHereY(1.0);\r\n        this.ScrollToBottom = false;\r\n        ImGui.EndChild();\r\n        ImGui.End();\r\n    }\r\n}\r\n\r\n// Demonstrate creating a simple log window with basic filtering.\r\nfunction ShowExampleAppLog(p_open: ImAccess<boolean>): void\r\n{\r\n    /* static */ const log: Static<ExampleAppLog> = STATIC(\"log#3073\", new ExampleAppLog());\r\n\r\n    // For the demo: add a debug button _BEFORE_ the normal log window contents\r\n    // We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.\r\n    // Most of the contents of the window will be added by the log.Draw() call.\r\n    ImGui.SetNextWindowSize(new ImVec2(500, 400), ImGuiCond.FirstUseEver);\r\n    ImGui.Begin(\"Example: Log\", p_open);\r\n    // /* static */ const last_time: Static<number> = STATIC(\"last_time\", -1.0);\r\n    // const time: number = ImGui.GetTime();\r\n    // if (time - last_time.value >= 0.20 && !ImGui.GetIO().KeyCtrl)\r\n    // {\r\n    //     const random_words: string[] = [ \"system\", \"info\", \"warning\", \"error\", \"fatal\", \"notice\", \"log\" ];\r\n    //     // log.AddLog(\"[%s] Hello, time is %.1f, frame count is %d\\n\", random_words[rand() % IM_ARRAYSIZE(random_words)], time, ImGui.GetFrameCount());\r\n    //     log.value.AddLog(`[${random_words[Math.floor(Math.random() * IM_ARRAYSIZE(random_words))]}] Hello, time is ${time.toFixed(1)}, frame count is ${ImGui.GetFrameCount()}\\n`);\r\n    //     last_time.value = time;\r\n    // }\r\n    if (ImGui.SmallButton(\"[Debug] Add 5 entries\"))\r\n    {\r\n        /* static */ const counter: Static<number> = STATIC(\"counter\", 0);\r\n        for (let n = 0; n < 5; n++)\r\n        {\r\n            const categories = [ \"info\", \"warn\", \"error\" ];\r\n            const words = [ \"Bumfuzzled\", \"Cattywampus\", \"Snickersnee\", \"Abibliophobia\", \"Absquatulate\", \"Nincompoop\", \"Pauciloquent\" ];\r\n            // log.AddLog(\"[%05d] [%s] Hello, current time is %.1f, here's a word: '%s'\\n\",\r\n            //     ImGui.GetFrameCount(), categories[counter % IM_ARRAYSIZE(categories)], ImGui.GetTime(), words[counter % IM_ARRAYSIZE(words)]);\r\n            log.value.AddLog(`[${ImGui.GetFrameCount()}] [${categories[counter.value % IM_ARRAYSIZE(categories)]}] Hello, current time is ${ImGui.GetTime()}, here's a word: '${words[counter.value % IM_ARRAYSIZE(words)]}'\\n`);\r\n            counter.value++;\r\n        }\r\n    }\r\n    ImGui.End();\r\n\r\n    // Actually call in the regular Log helper (which will Begin() into the same window as we just did)\r\n    log.value.Draw(\"Example: Log\", p_open);\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate create a window with multiple child windows.\r\nfunction ShowExampleAppLayout(p_open: ImAccess<boolean>): void\r\n{\r\n    ImGui.SetNextWindowSize(new ImVec2(500, 440), ImGuiCond.FirstUseEver);\r\n    if (ImGui.Begin(\"Example: Simple Layout\", p_open, ImGuiWindowFlags.MenuBar))\r\n    {\r\n        if (ImGui.BeginMenuBar())\r\n        {\r\n            if (ImGui.BeginMenu(\"File\"))\r\n            {\r\n                if (ImGui.MenuItem(\"Close\")) p_open(false);\r\n                ImGui.EndMenu();\r\n            }\r\n            ImGui.EndMenuBar();\r\n        }\r\n\r\n        // left\r\n        /* static */ const selected: Static<number> = STATIC(\"selected#3106\", 0);\r\n        ImGui.BeginChild(\"left pane\", new ImVec2(150, 0), true);\r\n        for (let i = 0; i < 100; i++)\r\n        {\r\n            const label: string = `MyObject ${i}`;\r\n            if (ImGui.Selectable(label, selected.value === i))\r\n                selected.value = i;\r\n        }\r\n        ImGui.EndChild();\r\n        ImGui.SameLine();\r\n\r\n        // right\r\n        ImGui.BeginGroup();\r\n            ImGui.BeginChild(\"item view\", new ImVec2(0, -ImGui.GetFrameHeightWithSpacing())); // Leave room for 1 line below us\r\n                ImGui.Text(`MyObject: ${selected}`);\r\n                ImGui.Separator();\r\n                if (ImGui.BeginTabBar(\"##Tabs\", ImGuiTabBarFlags.None))\r\n                {\r\n                    if (ImGui.BeginTabItem(\"Description\"))\r\n                    {\r\n                        ImGui.TextWrapped(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \");\r\n                        ImGui.EndTabItem();\r\n                    }\r\n                    if (ImGui.BeginTabItem(\"Details\"))\r\n                    {\r\n                        ImGui.Text(\"ID: 0123456789\");\r\n                        ImGui.EndTabItem();\r\n                    }\r\n                    ImGui.EndTabBar();\r\n                }\r\n            ImGui.EndChild();\r\n            if (ImGui.Button(\"Revert\")) {}\r\n            ImGui.SameLine();\r\n            if (ImGui.Button(\"Save\")) {}\r\n        ImGui.EndGroup();\r\n    }\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate create a simple property editor.\r\nfunction ShowExampleAppPropertyEditor(p_open: ImAccess<boolean>): void\r\n{\r\n    ImGui.SetNextWindowSize(new ImVec2(430, 450), ImGuiCond.FirstUseEver);\r\n    if (!ImGui.Begin(\"Example: Property editor\", p_open))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    HelpMarker(\"This example shows how you may implement a property editor using two columns.\\nAll objects/fields data are dummies here.\\nRemember that in many simple cases, you can use ImGui.SameLine(xxx) to position\\nyour cursor horizontally instead of using the Columns() API.\");\r\n\r\n    ImGui.PushStyleVar(ImGuiStyleVar.FramePadding, new ImVec2(2, 2));\r\n    ImGui.Columns(2);\r\n    ImGui.Separator();\r\n\r\n    class funcs\r\n    {\r\n        public static ShowDummyObject(prefix: string, uid: number): void\r\n        {\r\n            ImGui.PushID(uid);                      // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.\r\n            ImGui.AlignTextToFramePadding();  // Text and Tree nodes are less high than regular widgets, here we add vertical spacing to make the tree lines equal high.\r\n            const node_open: boolean = ImGui.TreeNode(\"Object\", `${prefix}_${uid}`);\r\n            ImGui.NextColumn();\r\n            ImGui.AlignTextToFramePadding();\r\n            ImGui.Text(\"my sailor is rich\");\r\n            ImGui.NextColumn();\r\n            if (node_open)\r\n            {\r\n                /* static */ const dummy_members: Static<number[/*8*/]> = STATIC(\"dummy_members\", [ 0.0, 0.0, 1.0, 3.1416, 100.0, 999.0 ]);\r\n                for (let i = 0; i < 8; i++)\r\n                {\r\n                    ImGui.PushID(i); // Use field index as identifier.\r\n                    if (i < 2)\r\n                    {\r\n                        funcs.ShowDummyObject(\"Child\", 424242);\r\n                    }\r\n                    else\r\n                    {\r\n                        // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)\r\n                        ImGui.AlignTextToFramePadding();\r\n                        // ImGui.TreeNodeEx(\"Field\", ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet, \"Field_%d\", i);\r\n                        ImGui.TreeNodeEx(\"Field\", ImGuiTreeNodeFlags.Leaf | ImGuiTreeNodeFlags.NoTreePushOnOpen | ImGuiTreeNodeFlags.Bullet, `Field_${i}`);\r\n                        ImGui.NextColumn();\r\n                        ImGui.SetNextItemWidth(-1);\r\n                        const ref: ImScalar<number> = [ dummy_members.value[i] || 0 ];\r\n                        if (i >= 5)\r\n                            ImGui.InputFloat(\"##value\", ref, 1.0);\r\n                        else\r\n                            ImGui.DragFloat(\"##value\", ref, 0.01);\r\n                        dummy_members.value[i] = ref[0];\r\n                        ImGui.NextColumn();\r\n                    }\r\n                    ImGui.PopID();\r\n                }\r\n                ImGui.TreePop();\r\n            }\r\n            ImGui.PopID();\r\n        }\r\n    }\r\n\r\n    // Iterate dummy objects with dummy members (all the same data)\r\n    for (let obj_i = 0; obj_i < 3; obj_i++)\r\n        funcs.ShowDummyObject(\"Object\", obj_i);\r\n\r\n    ImGui.Columns(1);\r\n    ImGui.Separator();\r\n    ImGui.PopStyleVar();\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Long Text / ShowExampleAppLongText()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate/test rendering huge amount of text, and the incidence of clipping.\r\nfunction ShowExampleAppLongText(p_open: ImAccess<boolean>): void\r\n{\r\n    ImGui.SetNextWindowSize(new ImVec2(520, 600), ImGuiCond.FirstUseEver);\r\n    if (!ImGui.Begin(\"Example: Long text display\", p_open))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    /* static */ const test_type: Static<number> = STATIC(\"test_type\", 0);\r\n    /* static */ const log: Static<ImGuiTextBuffer> = STATIC(\"log#3217\", new ImGuiTextBuffer());\r\n    /* static */ const lines: Static<number> = STATIC(\"lines#3218\", 0);\r\n    ImGui.Text(\"Printing unusually long amount of text.\");\r\n    ImGui.Combo(\"Test type\", (value = test_type.value) => test_type.value = value, \"Single call to TextUnformatted()\\0Multiple calls to Text(), clipped manually\\0Multiple calls to Text(), not clipped (slow)\\0\");\r\n    ImGui.Text(`Buffer contents: ${lines.value} lines, ${log.value.size()} bytes`);\r\n    if (ImGui.Button(\"Clear\")) { log.value.clear(); lines.value = 0; }\r\n    ImGui.SameLine();\r\n    if (ImGui.Button(\"Add 1000 lines\"))\r\n    {\r\n        for (let i = 0; i < 1000; i++)\r\n            log.value.append(`${lines.value + i} The quick brown fox jumps over the lazy dog\\n`);\r\n        lines.value += 1000;\r\n    }\r\n    ImGui.BeginChild(\"Log\");\r\n    switch (test_type.value)\r\n    {\r\n    case 0:\r\n        // Single call to TextUnformatted() with a big buffer\r\n        // ImGui.TextUnformatted(log.begin(), log.end());\r\n        ImGui.TextUnformatted(log.value.begin());\r\n        break;\r\n    case 1:\r\n        {\r\n            // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.\r\n            ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new ImVec2(0, 0));\r\n            const clipper: ImGuiListClipper = new ImGuiListClipper(lines.value);\r\n            while (clipper.Step())\r\n                for (let i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\r\n                    ImGui.Text(`${i} The quick brown fox jumps over the lazy dog`);\r\n            // clipper.delete(); // NOTE: native emscripten class\r\n            ImGui.PopStyleVar();\r\n            break;\r\n        }\r\n    case 2:\r\n        // Multiple calls to Text(), not clipped (slow)\r\n        ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new ImVec2(0, 0));\r\n        for (let i = 0; i < lines.value; i++)\r\n            ImGui.Text(`${i} The quick brown fox jumps over the lazy dog`);\r\n        ImGui.PopStyleVar();\r\n        break;\r\n    }\r\n    ImGui.EndChild();\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate creating a window which gets auto-resized according to its content.\r\nfunction ShowExampleAppAutoResize(p_open: ImAccess<boolean>): void\r\n{\r\n    if (!ImGui.Begin(\"Example: Auto-resizing window\", p_open, ImGui.WindowFlags.AlwaysAutoResize))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    /* static */ const lines: Static<number> = STATIC(\"lines#2447\", 10);\r\n    ImGui.Text(\"Window will resize every-frame to the size of its content.\\nNote that you probably don't want to query the window size to\\noutput your content because that would create a feedback loop.\");\r\n    ImGui.SliderInt(\"Number of lines\", (value = lines.value) => lines.value = value, 1, 20);\r\n    for (let i = 0; i < lines.value; i++)\r\n        ImGui.Text(\" \".repeat(i * 4) +  `This is line ${i}`); // Pad with space to extend size horizontally\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate creating a window with custom resize constraints.\r\nfunction ShowExampleAppConstrainedResize(p_open: ImAccess<boolean>): void\r\n{\r\n    class CustomConstraints // Helper functions to demonstrate programmatic constraints\r\n    {\r\n        public static Square(data: ImGuiSizeCallbackData): void {\r\n            data.DesiredSize.x = data.DesiredSize.y = IM_MAX(data.DesiredSize.x, data.DesiredSize.y);\r\n        }\r\n        public static Step(data: ImGuiSizeCallbackData): void {\r\n            const step: number = data.UserData;\r\n            data.DesiredSize.x = Math.floor(data.DesiredSize.x / step + 0.5) * step;\r\n            data.DesiredSize.y = Math.floor(data.DesiredSize.y / step + 0.5) * step;\r\n        }\r\n    }\r\n\r\n    /* static */ const auto_resize: Static<boolean> = STATIC(\"auto_resize\", false);\r\n    /* static */ const type: Static<number> = STATIC(\"type\", 0);\r\n    /* static */ const display_lines: Static<number> = STATIC(\"display_lines\", 10);\r\n    if (type.value === 0) ImGui.SetNextWindowSizeConstraints(new ImVec2(-1, 0),    new ImVec2(-1, Number.MAX_VALUE));      // Vertical only\r\n    if (type.value === 1) ImGui.SetNextWindowSizeConstraints(new ImVec2(0, -1),    new ImVec2(Number.MAX_VALUE, -1));      // Horizontal only\r\n    if (type.value === 2) ImGui.SetNextWindowSizeConstraints(new ImVec2(100, 100), new ImVec2(Number.MAX_VALUE, Number.MAX_VALUE)); // Width > 100, Height > 100\r\n    if (type.value === 3) ImGui.SetNextWindowSizeConstraints(new ImVec2(400, -1),  new ImVec2(500, -1));          // Width 400-500\r\n    if (type.value === 4) ImGui.SetNextWindowSizeConstraints(new ImVec2(-1, 400),  new ImVec2(-1, 500));          // Height 400-500\r\n    if (type.value === 5) ImGui.SetNextWindowSizeConstraints(new ImVec2(0, 0),     new ImVec2(Number.MAX_VALUE, Number.MAX_VALUE), CustomConstraints.Square);   // Always Square\r\n    if (type.value === 6) ImGui.SetNextWindowSizeConstraints(new ImVec2(0, 0),     new ImVec2(Number.MAX_VALUE, Number.MAX_VALUE), CustomConstraints.Step, 100); // Fixed Step\r\n\r\n    const flags: ImGuiWindowFlags = auto_resize.value ? ImGuiWindowFlags.AlwaysAutoResize : 0;\r\n    if (ImGui.Begin(\"Example: Constrained Resize\", p_open, flags))\r\n    {\r\n        const desc: string[] = [\r\n            \"Resize vertical only\",\r\n            \"Resize horizontal only\",\r\n            \"Width > 100, Height > 100\",\r\n            \"Width 400-500\",\r\n            \"Height 400-500\",\r\n            \"Custom: Always Square\",\r\n            \"Custom: Fixed Steps (100)\",\r\n        ];\r\n        if (ImGui.Button(\"200x200\")) { ImGui.SetWindowSize(new ImVec2(200, 200)); } ImGui.SameLine();\r\n        if (ImGui.Button(\"500x500\")) { ImGui.SetWindowSize(new ImVec2(500, 500)); } ImGui.SameLine();\r\n        if (ImGui.Button(\"800x200\")) { ImGui.SetWindowSize(new ImVec2(800, 200)); }\r\n        ImGui.SetNextItemWidth(200);\r\n        ImGui.Combo(\"Constraint\", (value = type.value) => type.value = value, desc, IM_ARRAYSIZE(desc));\r\n        ImGui.SetNextItemWidth(200);\r\n        ImGui.DragInt(\"Lines\", (value = display_lines.value) => display_lines.value = value, 0.2, 1, 100);\r\n        ImGui.Checkbox(\"Auto-resize\", (value = auto_resize.value) => auto_resize.value = value);\r\n        for (let i = 0; i < display_lines.value; i++)\r\n            ImGui.Text(\" \".repeat(i * 4) +  \"Hello, sailor! Making this line long enough for the example.\");\r\n    }\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Simple Overlay / ShowExampleAppSimpleOverlay()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate creating a simple static window with no decoration + a context-menu to choose which corner of the screen to use.\r\nfunction ShowExampleAppSimpleOverlay(p_open: ImAccess<boolean>): void\r\n{\r\n    const DISTANCE: number = 10.0;\r\n    /* static */ const corner: Static<number> = STATIC(\"corner\", 0);\r\n    const io: ImGuiIO = ImGui.GetIO();\r\n    if (corner.value !== -1)\r\n    {\r\n        const window_pos: Readonly<ImVec2> = new ImVec2((corner.value & 1) ? io.DisplaySize.x - DISTANCE : DISTANCE, (corner.value & 2) ? io.DisplaySize.y - DISTANCE : DISTANCE);\r\n        const window_pos_pivot: Readonly<ImVec2> = new ImVec2((corner.value & 1) ? 1.0 : 0.0, (corner.value & 2) ? 1.0 : 0.0);\r\n        ImGui.SetNextWindowPos(window_pos, ImGuiCond.Always, window_pos_pivot);\r\n    }\r\n    ImGui.SetNextWindowBgAlpha(0.35); // Transparent background\r\n    if (ImGui.Begin(\"Example: Simple overlay\", p_open, (corner.value !== -1 ? ImGuiWindowFlags.NoMove : 0) | ImGuiWindowFlags.NoDecoration | ImGuiWindowFlags.AlwaysAutoResize | ImGuiWindowFlags.NoSavedSettings))\r\n    {\r\n        ImGui.Text(\"Simple overlay\\nin the corner of the screen.\\n(right-click to change position)\");\r\n        ImGui.Separator();\r\n        if (ImGui.IsMousePosValid())\r\n            ImGui.Text(`Mouse Position: (${io.MousePos.x.toFixed(1)},${io.MousePos.y.toFixed(1)})`);\r\n        else\r\n            ImGui.Text(\"Mouse Position: <invalid>\");\r\n        if (ImGui.BeginPopupContextWindow())\r\n        {\r\n            if (ImGui.MenuItem(\"Custom\", null, corner.value === -1)) corner.value = -1;\r\n            if (ImGui.MenuItem(\"Top-left\", null, corner.value === 0)) corner.value = 0;\r\n            if (ImGui.MenuItem(\"Top-right\", null, corner.value === 1)) corner.value = 1;\r\n            if (ImGui.MenuItem(\"Bottom-left\", null, corner.value === 2)) corner.value = 2;\r\n            if (ImGui.MenuItem(\"Bottom-right\", null, corner.value === 3)) corner.value = 3;\r\n            if (p_open() && ImGui.MenuItem(\"Close\")) p_open(false);\r\n            ImGui.EndPopup();\r\n        }\r\n    }\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate using \"##\" and \"###\" in identifiers to manipulate ID generation.\r\n// This apply to all regular items as well. Read FAQ section \"How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs.\" for details.\r\nfunction ShowExampleAppWindowTitles(p_open: ImAccess<boolean>): void\r\n{\r\n    // By default, Windows are uniquely identified by their title.\r\n    // You can use the \"##\" and \"###\" markers to manipulate the display/ID.\r\n\r\n    // Using \"##\" to display same title but have unique identifier.\r\n    ImGui.SetNextWindowPos(new ImVec2(100, 100), ImGuiCond.FirstUseEver);\r\n    ImGui.Begin(\"Same title as another window##1\");\r\n    ImGui.Text(\"This is window 1.\\nMy title is the same as window 2, but my identifier is unique.\");\r\n    ImGui.End();\r\n\r\n    ImGui.SetNextWindowPos(new ImVec2(100, 200), ImGuiCond.FirstUseEver);\r\n    ImGui.Begin(\"Same title as another window##2\");\r\n    ImGui.Text(\"This is window 2.\\nMy title is the same as window 1, but my identifier is unique.\");\r\n    ImGui.End();\r\n\r\n    // Using \"###\" to display a changing title but keep a static identifier \"AnimatedTitle\"\r\n    const buf: string = `Animated title ${\"|/-\\\\\".charAt((ImGui.GetTime() / 0.25) & 3)} ${ImGui.GetFrameCount()}###AnimatedTitle`;\r\n    ImGui.SetNextWindowPos(new ImVec2(100, 300), ImGuiCond.FirstUseEver);\r\n    ImGui.Begin(buf);\r\n    ImGui.Text(\"This window has a changing title.\");\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Demonstrate using the low-level ImDrawList to draw custom shapes.\r\nfunction ShowExampleAppCustomRendering(p_open: ImAccess<boolean>): void\r\n{\r\n    ImGui.SetNextWindowSize(new ImVec2(350, 560), ImGuiCond.FirstUseEver);\r\n    if (!ImGui.Begin(\"Example: Custom rendering\", p_open))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of overloaded operators, etc.\r\n    // Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your types and ImVec2/ImVec4.\r\n    // ImGui defines overloaded operators but they are internal to imgui.cpp and not exposed outside (to avoid messing with your types)\r\n    // In this example we are not using the maths operators!\r\n    const draw_list: ImDrawList = ImGui.GetWindowDrawList();\r\n\r\n    if (ImGui.BeginTabBar(\"##TabBar\"))\r\n    {\r\n        // Primitives\r\n        if (ImGui.BeginTabItem(\"Primitives\"))\r\n        {\r\n            /* static */ const sz: Static<number> = STATIC(\"sz\", 36.0);\r\n            /* static */ const thickness: Static<number> = STATIC(\"thickness\", 4.0);\r\n            /* static */ const col: Static<ImVec4> = STATIC(\"color#2583\", new ImVec4(1.0, 1.0, 0.4, 1.0));\r\n            ImGui.DragFloat(\"Size\", (value = sz.value) => sz.value = value, 0.2, 2.0, 72.0, \"%.0f\");\r\n            ImGui.DragFloat(\"Thickness\", (value = thickness.value) => thickness.value = value, 0.05, 1.0, 8.0, \"%.02f\");\r\n            ImGui.ColorEdit3(\"Color\", col.value);\r\n            {\r\n                const p: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n                const col32: ImU32 = IM_COL32(col.value.x * 255, col.value.y * 255, col.value.z * 255, col.value.w * 255);\r\n                let x: number = p.x + 4.0, y: number = p.y + 4.0; const spacing: number = 8.0;\r\n                for (let n = 0; n < 2; n++)\r\n                {\r\n                    const curr_thickness: number = (n === 0) ? 1.0 : thickness.value;\r\n                    draw_list.AddCircle(new ImVec2(x + sz.value * 0.5, y + sz.value * 0.5), sz.value * 0.5, col32, 20, curr_thickness); x += sz.value + spacing;\r\n                    draw_list.AddRect(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, 0.0, ImDrawCornerFlags.All, curr_thickness); x += sz.value + spacing;\r\n                    draw_list.AddRect(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, 10.0, ImDrawCornerFlags.All, curr_thickness); x += sz.value + spacing;\r\n                    draw_list.AddRect(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, 10.0, ImDrawCornerFlags.TopLeft | ImDrawCornerFlags.BotRight, curr_thickness); x += sz.value + spacing;\r\n                    draw_list.AddTriangle(new ImVec2(x + sz.value * 0.5, y), new ImVec2(x + sz.value, y + sz.value - 0.5), new ImVec2(x, y + sz.value - 0.5), col32, curr_thickness); x += sz.value + spacing;\r\n                    draw_list.AddLine(new ImVec2(x, y), new ImVec2(x + sz.value, y           ), col32, curr_thickness); x += sz.value + spacing; // Horizontal line (note: drawing a filled rectangle will be faster!)\r\n                    draw_list.AddLine(new ImVec2(x, y), new ImVec2(x,            y + sz.value), col32, curr_thickness); x += spacing;            // Vertical line (note: drawing a filled rectangle will be faster!)\r\n                    draw_list.AddLine(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, curr_thickness); x += sz.value + spacing; // Diagonal line\r\n                    draw_list.AddBezierCurve(new ImVec2(x, y), new ImVec2(x + sz.value * 1.3, y + sz.value * 0.3), new ImVec2(x + sz.value - sz.value * 1.3, y + sz.value - sz.value * 0.3), new ImVec2(x + sz.value, y + sz.value), col32, curr_thickness);\r\n                    x = p.x + 4;\r\n                    y += sz.value + spacing;\r\n                }\r\n                draw_list.AddCircleFilled(new ImVec2(x + sz.value * 0.5, y + sz.value * 0.5), sz.value * 0.5, col32, 32); x += sz.value + spacing;\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32); x += sz.value + spacing;\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, 10.0); x += sz.value + spacing;\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), col32, 10.0, ImDrawCornerFlags.TopLeft | ImDrawCornerFlags.BotRight); x += sz.value + spacing;\r\n                draw_list.AddTriangleFilled(new ImVec2(x + sz.value * 0.5, y), new ImVec2(x + sz.value, y + sz.value - 0.5), new ImVec2(x, y + sz.value - 0.5), col32); x += sz.value + spacing;\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + sz.value, y + thickness.value), col32); x += sz.value + spacing; // Horizontal line (faster than AddLine, but only handle integer thickness)\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + thickness.value, y + sz.value), col32); x += spacing + spacing;  // Vertical line (faster than AddLine, but only handle integer thickness)\r\n                draw_list.AddRectFilled(new ImVec2(x, y), new ImVec2(x + 1, y + 1), col32);                      x += sz.value;           // Pixel (faster than AddLine)\r\n                draw_list.AddRectFilledMultiColor(new ImVec2(x, y), new ImVec2(x + sz.value, y + sz.value), IM_COL32(0, 0, 0), IM_COL32(255, 0, 0), IM_COL32(255, 255, 0), IM_COL32(0, 255, 0));\r\n                ImGui.Dummy(new ImVec2((sz.value + spacing) * 8, (sz.value + spacing) * 3));\r\n            }\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        if (ImGui.BeginTabItem(\"Canvas\"))\r\n        {\r\n            /* static */ const points: Static<ImVector<ImVec2>> = STATIC(\"points\", new ImVector<ImVec2>());\r\n            /* static */ const adding_line: Static<boolean> = STATIC(\"adding_line\", false);\r\n            if (ImGui.Button(\"Clear\")) points.value.clear();\r\n            if (points.value.Size >= 2) { ImGui.SameLine(); if (ImGui.Button(\"Undo\")) { points.value.pop_back(); points.value.pop_back(); } }\r\n            ImGui.Text(\"Left-click and drag to add lines,\\nRight-click to undo\");\r\n\r\n            // Here we are using InvisibleButton() as a convenience to 1) advance the cursor and 2) allows us to use IsItemHovered()\r\n            // But you can also draw directly and poll mouse/keyboard by yourself. You can manipulate the cursor using GetCursorPos() and SetCursorPos().\r\n            // If you only use the ImDrawList API, you can notify the owner window of its extends by using SetCursorPos(max).\r\n            const canvas_pos: ImVec2 = ImGui.GetCursorScreenPos();            // ImDrawList API uses screen coordinates!\r\n            const canvas_size: ImVec2 = ImGui.GetContentRegionAvail();        // Resize canvas to what's available\r\n            if (canvas_size.x < 50.0) canvas_size.x = 50.0;\r\n            if (canvas_size.y < 50.0) canvas_size.y = 50.0;\r\n            draw_list.AddRectFilledMultiColor(canvas_pos, new ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(50, 50, 50), IM_COL32(50, 50, 60), IM_COL32(60, 60, 70), IM_COL32(50, 50, 60));\r\n            draw_list.AddRect(canvas_pos, new ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(255, 255, 255));\r\n\r\n            let adding_preview: boolean = false;\r\n            ImGui.InvisibleButton(\"canvas\", canvas_size);\r\n            const mouse_pos_in_canvas: ImVec2 = new ImVec2(ImGui.GetIO().MousePos.x - canvas_pos.x, ImGui.GetIO().MousePos.y - canvas_pos.y);\r\n            if (adding_line.value)\r\n            {\r\n                adding_preview = true;\r\n                points.value.push_back(mouse_pos_in_canvas);\r\n                if (!ImGui.IsMouseDown(0))\r\n                    adding_line.value = adding_preview = false;\r\n            }\r\n            if (ImGui.IsItemHovered())\r\n            {\r\n                if (!adding_line.value && ImGui.IsMouseClicked(0))\r\n                {\r\n                    points.value.push_back(mouse_pos_in_canvas);\r\n                    adding_line.value = true;\r\n                }\r\n                if (ImGui.IsMouseClicked(1) && !points.value.empty())\r\n                {\r\n                    adding_line.value = adding_preview = false;\r\n                    points.value.pop_back();\r\n                    points.value.pop_back();\r\n                }\r\n            }\r\n            draw_list.PushClipRect(canvas_pos, new ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), true);      // clip lines within the canvas (if we resize it, etc.)\r\n            for (let i = 0; i < points.value.Size - 1; i += 2)\r\n                draw_list.AddLine(new ImVec2(canvas_pos.x + points.value.Data[i].x, canvas_pos.y + points.value.Data[i].y), new ImVec2(canvas_pos.x + points.value.Data[i + 1].x, canvas_pos.y + points.value.Data[i + 1].y), IM_COL32(255, 255, 0, 255), 2.0);\r\n            draw_list.PopClipRect();\r\n            if (adding_preview)\r\n                points.value.pop_back();\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        if (ImGui.BeginTabItem(\"BG/FG draw lists\"))\r\n        {\r\n            /* static */ const draw_bg: Static<boolean> = STATIC(\"draw_bg\", true);\r\n            /* static */ const draw_fg: Static<boolean> = STATIC(\"draw_fg\", true);\r\n            ImGui.Checkbox(\"Draw in Background draw list\", (value = draw_bg.value) => draw_bg.value = value);\r\n            ImGui.Checkbox(\"Draw in Foreground draw list\", (value = draw_fg.value) => draw_fg.value = value);\r\n            const window_pos: ImVec2 = ImGui.GetWindowPos();\r\n            const window_size: ImVec2 = ImGui.GetWindowSize();\r\n            const window_center: ImVec2 = new ImVec2(window_pos.x + window_size.x * 0.5, window_pos.y + window_size.y * 0.5);\r\n            if (draw_bg.value)\r\n                ImGui.GetBackgroundDrawList().AddCircle(window_center, window_size.x * 0.6, IM_COL32(255, 0, 0, 200), 32, 10+4);\r\n            if (draw_fg.value)\r\n                ImGui.GetForegroundDrawList().AddCircle(window_center, window_size.y * 0.6, IM_COL32(0, 255, 0, 200), 32, 10);\r\n            ImGui.EndTabItem();\r\n        }\r\n\r\n        ImGui.EndTabBar();\r\n    }\r\n\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()\r\n//-----------------------------------------------------------------------------\r\n\r\n// Simplified structure to mimic a Document model\r\n// struct MyDocument\r\n// {\r\n//     const char* Name;           // Document title\r\n//     bool        Open;           // Set when the document is open (in this demo, we keep an array of all available documents to simplify the demo)\r\n//     bool        OpenPrev;       // Copy of Open from last update.\r\n//     bool        Dirty;          // Set when the document has been modified\r\n//     bool        WantClose;      // Set when the document\r\n//     ImVec4      Color;          // An arbitrary variable associated to the document\r\n\r\n//     MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1.0f))\r\n//     {\r\n//         Name = name;\r\n//         Open = OpenPrev = open;\r\n//         Dirty = false;\r\n//         WantClose = false;\r\n//         Color = color;\r\n//     }\r\n//     void DoOpen()       { Open = true; }\r\n//     void DoQueueClose() { WantClose = true; }\r\n//     void DoForceClose() { Open = false; Dirty = false; }\r\n//     void DoSave()       { Dirty = false; }\r\n\r\n//     // Display dummy contents for the Document\r\n//     static void DisplayContents(MyDocument* doc)\r\n//     {\r\n//         ImGui.PushID(doc);\r\n//         ImGui.Text(\"Document \\\"%s\\\"\", doc->Name);\r\n//         ImGui.PushStyleColor(ImGuiCol_Text, doc->Color);\r\n//         ImGui.TextWrapped(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\");\r\n//         ImGui.PopStyleColor();\r\n//         if (ImGui.Button(\"Modify\", ImVec2(100, 0)))\r\n//             doc->Dirty = true;\r\n//         ImGui.SameLine();\r\n//         if (ImGui.Button(\"Save\", ImVec2(100, 0)))\r\n//             doc->DoSave();\r\n//         ImGui.ColorEdit3(\"color\", &doc->Color.x);  // Useful to test drag and drop and hold-dragged-to-open-tab behavior.\r\n//         ImGui.PopID();\r\n//     }\r\n\r\n//     // Display context menu for the Document\r\n//     static void DisplayContextMenu(MyDocument* doc)\r\n//     {\r\n//         if (!ImGui.BeginPopupContextItem())\r\n//             return;\r\n\r\n//         char buf[256];\r\n//         sprintf(buf, \"Save %s\", doc->Name);\r\n//         if (ImGui.MenuItem(buf, \"CTRL+S\", false, doc->Open))\r\n//             doc->DoSave();\r\n//         if (ImGui.MenuItem(\"Close\", \"CTRL+W\", false, doc->Open))\r\n//             doc->DoQueueClose();\r\n//         ImGui.EndPopup();\r\n//     }\r\n// };\r\n\r\n// struct ExampleAppDocuments\r\n// {\r\n//     ImVector<MyDocument> Documents;\r\n\r\n//     ExampleAppDocuments()\r\n//     {\r\n//         Documents.push_back(MyDocument(\"Lettuce\",             true,  ImVec4(0.4f, 0.8f, 0.4f, 1.0f)));\r\n//         Documents.push_back(MyDocument(\"Eggplant\",            true,  ImVec4(0.8f, 0.5f, 1.0f, 1.0f)));\r\n//         Documents.push_back(MyDocument(\"Carrot\",              true,  ImVec4(1.0f, 0.8f, 0.5f, 1.0f)));\r\n//         Documents.push_back(MyDocument(\"Tomato\",              false, ImVec4(1.0f, 0.3f, 0.4f, 1.0f)));\r\n//         Documents.push_back(MyDocument(\"A Rather Long Title\", false));\r\n//         Documents.push_back(MyDocument(\"Some Document\",       false));\r\n//     }\r\n// };\r\n\r\n// // [Optional] Notify the system of Tabs/Windows closure that happened outside the regular tab interface.\r\n// // If a tab has been closed programmatically (aka closed from another source such as the Checkbox() in the demo, as opposed\r\n// // to clicking on the regular tab closing button) and stops being submitted, it will take a frame for the tab bar to notice its absence.\r\n// // During this frame there will be a gap in the tab bar, and if the tab that has disappeared was the selected one, the tab bar\r\n// // will report no selected tab during the frame. This will effectively give the impression of a flicker for one frame.\r\n// // We call SetTabItemClosed() to manually notify the Tab Bar or Docking system of removed tabs to avoid this glitch.\r\n// // Note that this completely optional, and only affect tab bars with the ImGuiTabBarFlags_Reorderable flag.\r\n// static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)\r\n// {\r\n//     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n//     {\r\n//         MyDocument* doc = &app.Documents[doc_n];\r\n//         if (!doc->Open && doc->OpenPrev)\r\n//             ImGui.SetTabItemClosed(doc->Name);\r\n//         doc->OpenPrev = doc->Open;\r\n//     }\r\n// }\r\n\r\n// void ShowExampleAppDocuments(bool* p_open)\r\nfunction ShowExampleAppDocuments(p_open: ImAccess<boolean>): void\r\n{\r\n    // static ExampleAppDocuments app;\r\n\r\n    // // Options\r\n    // static bool opt_reorderable = true;\r\n    // static ImGuiTabBarFlags opt_fitting_flags = ImGuiTabBarFlags_FittingPolicyDefault_;\r\n\r\n    if (!ImGui.Begin(\"Example: Documents\", p_open, ImGuiWindowFlags.MenuBar))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    // // Menu\r\n    // if (ImGui.BeginMenuBar())\r\n    // {\r\n    //     if (ImGui.BeginMenu(\"File\"))\r\n    //     {\r\n    //         int open_count = 0;\r\n    //         for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    //             open_count += app.Documents[doc_n].Open ? 1 : 0;\r\n\r\n    //         if (ImGui.BeginMenu(\"Open\", open_count < app.Documents.Size))\r\n    //         {\r\n    //             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    //             {\r\n    //                 MyDocument* doc = &app.Documents[doc_n];\r\n    //                 if (!doc->Open)\r\n    //                     if (ImGui.MenuItem(doc->Name))\r\n    //                         doc->DoOpen();\r\n    //             }\r\n    //             ImGui.EndMenu();\r\n    //         }\r\n    //         if (ImGui.MenuItem(\"Close All Documents\", NULL, false, open_count > 0))\r\n    //             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    //                 app.Documents[doc_n].DoQueueClose();\r\n    //         if (ImGui.MenuItem(\"Exit\", \"Alt+F4\")) {}\r\n    //         ImGui.EndMenu();\r\n    //     }\r\n    //     ImGui.EndMenuBar();\r\n    // }\r\n\r\n    // // [Debug] List documents with one checkbox for each\r\n    // for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    // {\r\n    //     MyDocument* doc = &app.Documents[doc_n];\r\n    //     if (doc_n > 0)\r\n    //         ImGui.SameLine();\r\n    //     ImGui.PushID(doc);\r\n    //     if (ImGui.Checkbox(doc->Name, &doc->Open))\r\n    //         if (!doc->Open)\r\n    //             doc->DoForceClose();\r\n    //     ImGui.PopID();\r\n    // }\r\n\r\n    // ImGui.Separator();\r\n\r\n    // // Submit Tab Bar and Tabs\r\n    // {\r\n    //     ImGuiTabBarFlags tab_bar_flags = (opt_fitting_flags) | (opt_reorderable ? ImGuiTabBarFlags_Reorderable : 0);\r\n    //     if (ImGui.BeginTabBar(\"##tabs\", tab_bar_flags))\r\n    //     {\r\n    //         if (opt_reorderable)\r\n    //             NotifyOfDocumentsClosedElsewhere(app);\r\n\r\n    //         // [DEBUG] Stress tests\r\n    //         //if ((ImGui.GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.\r\n    //         //if (ImGui.GetIO().KeyCtrl) ImGui.SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..\r\n\r\n    //         // Submit Tabs\r\n    //         for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    //         {\r\n    //             MyDocument* doc = &app.Documents[doc_n];\r\n    //             if (!doc->Open)\r\n    //                 continue;\r\n\r\n    //             ImGuiTabItemFlags tab_flags = (doc->Dirty ? ImGuiTabItemFlags_UnsavedDocument : 0);\r\n    //             bool visible = ImGui.BeginTabItem(doc->Name, &doc->Open, tab_flags);\r\n\r\n    //             // Cancel attempt to close when unsaved add to save queue so we can display a popup.\r\n    //             if (!doc->Open && doc->Dirty)\r\n    //             {\r\n    //                 doc->Open = true;\r\n    //                 doc->DoQueueClose();\r\n    //             }\r\n\r\n    //             MyDocument::DisplayContextMenu(doc);\r\n    //             if (visible)\r\n    //             {\r\n    //                 MyDocument::DisplayContents(doc);\r\n    //                 ImGui.EndTabItem();\r\n    //             }\r\n    //         }\r\n\r\n    //         ImGui.EndTabBar();\r\n    //     }\r\n    // }\r\n\r\n    // // Update closing queue\r\n    // static ImVector<MyDocument*> close_queue;\r\n    // if (close_queue.empty())\r\n    // {\r\n    //     // Close queue is locked once we started a popup\r\n    //     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)\r\n    //     {\r\n    //         MyDocument* doc = &app.Documents[doc_n];\r\n    //         if (doc->WantClose)\r\n    //         {\r\n    //             doc->WantClose = false;\r\n    //             close_queue.push_back(doc);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // // Display closing confirmation UI\r\n    // if (!close_queue.empty())\r\n    // {\r\n    //     int close_queue_unsaved_documents = 0;\r\n    //     for (int n = 0; n < close_queue.Size; n++)\r\n    //         if (close_queue[n]->Dirty)\r\n    //             close_queue_unsaved_documents++;\r\n\r\n    //     if (close_queue_unsaved_documents == 0)\r\n    //     {\r\n    //         // Close documents when all are unsaved\r\n    //         for (int n = 0; n < close_queue.Size; n++)\r\n    //             close_queue[n]->DoForceClose();\r\n    //         close_queue.clear();\r\n    //     }\r\n    //     else\r\n    //     {\r\n    //         if (!ImGui.IsPopupOpen(\"Save?\"))\r\n    //             ImGui.OpenPopup(\"Save?\");\r\n    //         if (ImGui.BeginPopupModal(\"Save?\"))\r\n    //         {\r\n    //             ImGui.Text(\"Save change to the following items?\");\r\n    //             ImGui.SetNextItemWidth(-1.0f);\r\n    //             if (ImGui.ListBoxHeader(\"##\", close_queue_unsaved_documents, 6))\r\n    //             {\r\n    //                 for (int n = 0; n < close_queue.Size; n++)\r\n    //                     if (close_queue[n]->Dirty)\r\n    //                         ImGui.Text(\"%s\", close_queue[n]->Name);\r\n    //                 ImGui.ListBoxFooter();\r\n    //             }\r\n\r\n    //             if (ImGui.Button(\"Yes\", ImVec2(80, 0)))\r\n    //             {\r\n    //                 for (int n = 0; n < close_queue.Size; n++)\r\n    //                 {\r\n    //                     if (close_queue[n]->Dirty)\r\n    //                         close_queue[n]->DoSave();\r\n    //                     close_queue[n]->DoForceClose();\r\n    //                 }\r\n    //                 close_queue.clear();\r\n    //                 ImGui.CloseCurrentPopup();\r\n    //             }\r\n    //             ImGui.SameLine();\r\n    //             if (ImGui.Button(\"No\", ImVec2(80, 0)))\r\n    //             {\r\n    //                 for (int n = 0; n < close_queue.Size; n++)\r\n    //                     close_queue[n]->DoForceClose();\r\n    //                 close_queue.clear();\r\n    //                 ImGui.CloseCurrentPopup();\r\n    //             }\r\n    //             ImGui.SameLine();\r\n    //             if (ImGui.Button(\"Cancel\", ImVec2(80, 0)))\r\n    //             {\r\n    //                 close_queue.clear();\r\n    //                 ImGui.CloseCurrentPopup();\r\n    //             }\r\n    //             ImGui.EndPopup();\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    ImGui.End();\r\n}\r\n\r\n//-----------------------------------------------------------------------------\r\n// [SECTION]\r\n//-----------------------------------------------------------------------------\r\n\r\nfunction ShowBackendCheckerWindow(p_open: ImAccess<boolean>): void\r\n{\r\n    if (!ImGui.Begin(\"Dear ImGui Backend Checker\", p_open))\r\n    {\r\n        ImGui.End();\r\n        return;\r\n    }\r\n\r\n    const io: ImGuiIO = ImGui.GetIO();\r\n    ImGui.Text(`Dear ImGui ${ImGui.GetVersion()} Backend Checker`);\r\n    ImGui.Text(`io.BackendPlatformName: ${io.BackendPlatformName ? io.BackendPlatformName : \"NULL\"}`);\r\n    ImGui.Text(`io.BackendRendererName: ${io.BackendRendererName ? io.BackendRendererName : \"NULL\"}`);\r\n    ImGui.Separator();\r\n    \r\n    if (ImGui.TreeNode(\"0001: Renderer: Large Mesh Support\"))\r\n    {\r\n        const draw_list: ImGui.ImDrawList = ImGui.GetWindowDrawList();\r\n        {\r\n            /* static */ const vtx_count: Static<number> = STATIC(\"vtx_count#4821\", 60000);\r\n            // ImGui.SliderInt(\"VtxCount##1\", &vtx_count, 0, 100000);\r\n            ImGui.SliderInt(\"VtxCount##1\", (_ = vtx_count.value) => vtx_count.value = _, 0, 100000);\r\n            const p: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n            for (let n = 0; n < vtx_count.value / 4; n++)\r\n            {\r\n                // float off_x = (float)(n % 100) * 3.0f;\r\n                const off_x = (n % 100) * 3.0;\r\n                // float off_y = (float)(n % 100) * 1.0f;\r\n                const off_y = (n % 100) * 1.0;\r\n                // ImU32 col = IM_COL32(((n * 17) & 255), ((n * 59) & 255), ((n * 83) & 255), 255);\r\n                const col = IM_COL32(((n * 17) & 255), ((n * 59) & 255), ((n * 83) & 255), 255);\r\n                // draw_list->AddRectFilled(ImVec2(p.x + off_x, p.y + off_y), ImVec2(p.x + off_x + 50, p.y + off_y + 50), col);\r\n                draw_list.AddRectFilled(new ImVec2(p.x + off_x, p.y + off_y), new ImVec2(p.x + off_x + 50, p.y + off_y + 50), col);\r\n            }\r\n            ImGui.Dummy(new ImVec2(300 + 50, 100 + 50));\r\n            // ImGui.Text(\"VtxBuffer.Size = %d\", draw_list->VtxBuffer.Size);\r\n            ImGui.Text(`VtxBuffer = ${draw_list.VtxBuffer.length}`);\r\n        }\r\n        {\r\n            /* static */ const vtx_count: Static<number> = STATIC(\"vtx_count#4841\", 60000);\r\n            // ImGui.SliderInt(\"VtxCount##2\", &vtx_count, 0, 100000);\r\n            ImGui.SliderInt(\"VtxCount##2\", (_ = vtx_count.value) => vtx_count.value = _, 0, 100000);\r\n            const p: Readonly<ImVec2> = ImGui.GetCursorScreenPos();\r\n            for (let n = 0; n < vtx_count.value / (10*4); n++)\r\n            {\r\n                // float off_x = (float)(n % 100) * 3.0f;\r\n                const off_x = (n % 100) * 3.0;\r\n                // float off_y = (float)(n % 100) * 1.0f;\r\n                const off_y = (n % 100) * 1.0;\r\n                // ImU32 col = IM_COL32(((n * 17) & 255), ((n * 59) & 255), ((n * 83) & 255), 255);\r\n                const col = IM_COL32(((n * 17) & 255), ((n * 59) & 255), ((n * 83) & 255), 255);\r\n                // draw_list->AddText(ImVec2(p.x + off_x, p.y + off_y), col, \"ABCDEFGHIJ\");\r\n                draw_list.AddText(new ImVec2(p.x + off_x, p.y + off_y), col, \"ABCDEFGHIJ\");\r\n            }\r\n            ImGui.Dummy(new ImVec2(300 + 50, 100 + 20));\r\n            // ImGui.Text(\"VtxBuffer.Size = %d\", draw_list->VtxBuffer.Size);\r\n            ImGui.Text(`VtxBuffer = ${draw_list.VtxBuffer.length}`);\r\n        }\r\n        ImGui.TreePop();\r\n    }\r\n\r\n    ImGui.End();\r\n}\r\n\r\n// End of Demo code\r\n// #else\r\n\r\n// export function ShowAboutWindow(p_open: ImAccess<boolean>): void {}\r\n// export function ShowDemoWindow(p_open: ImAccess<boolean>): void {}\r\n// export function ShowUserGuide(): void {}\r\n// export function ShowStyleSelector(label: string): boolean { return false; }\r\n// export function ShowFontSelector(label: string): void {}\r\n// export function ShowStyleEditor(ref: ImGuiStyle | null = null): void {}\r\n\r\n// #endif\r\n","// Mini memory editor for Dear ImGui (to embed in your game/tools)\r\n// Animated GIF: https://twitter.com/ocornut/status/894242704317530112\r\n// Get latest version at http://www.github.com/ocornut/imgui_club\r\n//\r\n// You can adjust the keyboard repeat delay/rate in ImGuiIO.\r\n// The code assume a mono-space font for simplicity! If you don't use the default font, use ImGui.PushFont()/PopFont() to switch to a mono-space font before caling this.\r\n//\r\n// Usage:\r\n//   static MemoryEditor mem_edit_1;                                            // store your state somewhere\r\n//   mem_edit_1.DrawWindow(\"Memory Editor\", mem_block, mem_block_size, 0x0000); // create a window and draw memory editor (if you already have a window, use DrawContents())\r\n//\r\n// Usage:\r\n//   static MemoryEditor mem_edit_2;\r\n//   ImGui.Begin(\"MyWindow\")\r\n//   mem_edit_2.DrawContents(this, sizeof(*this), (size_t)this);\r\n//   ImGui.End();\r\n//\r\n// Changelog:\r\n// - v0.10: initial version\r\n// - v0.11: always refresh active text input with the latest byte from source memory if it's not being edited.\r\n// - v0.12: added this.OptMidRowsCount to allow extra spacing every XX rows.\r\n// - v0.13: added optional ReadFn/WriteFn handlers to access memory via a function. various warning fixes for 64-bits.\r\n// - v0.14: added GotoAddr member, added GotoAddrAndHighlight() and highlighting. fixed minor scrollbar glitch when resizing.\r\n// - v0.15: added maximum window width. minor optimization.\r\n// - v0.16: added OptGreyOutZeroes option. various sizing fixes when resizing using the \"Rows\" drag.\r\n// - v0.17: added HighlightFn handler for optional non-contiguous highlighting.\r\n// - v0.18: fixes for displaying 64-bits addresses, fixed mouse click gaps introduced in recent changes, cursor tracking scrolling fixes.\r\n// - v0.19: fixed auto-focus of next byte leaving WantCaptureKeyboard=false for one frame. we now capture the keyboard during that transition.\r\n// - v0.20: added options menu. added this.OptShowAscii checkbox. added optional HexII display. split Draw() in DrawWindow()/DrawContents(). fixing glyph width. refactoring/cleaning code.\r\n// - v0.21: fixes for using DrawContents() in our own window. fixed HexII to actually be useful and not on the wrong side.\r\n// - v0.22: clicking Ascii view select the byte in the Hex view. Ascii view highlight selection.\r\n// - v0.23: fixed right-arrow triggering a byte write\r\n//\r\n// Todo/Bugs:\r\n// - Arrows are being sent to the InputText() about to disappear which for LeftArrow makes the text cursor appear at position 1 for one frame.\r\n\r\n// #pragma once\r\n// #include <stdio.h>  // sprintf, scanf\r\n\r\nimport * as ImGui from \"./imgui\";\r\nimport { ImGuiCol } from \"./imgui\";\r\nimport { ImGuiWindowFlags } from \"./imgui\";\r\nimport { ImGuiHoveredFlags } from \"./imgui\";\r\nimport { ImStringBuffer } from \"./imgui\";\r\nimport { ImU32 } from \"./imgui\";\r\nimport { ImVec2 } from \"./imgui\";\r\nimport { ImGuiStyle } from \"./imgui\";\r\nimport { ImGuiListClipper } from \"./imgui\";\r\nimport { ImDrawList } from \"./imgui\";\r\nimport { ImGuiInputTextCallbackData } from \"./imgui\";\r\n\r\nexport class MemoryEditor\r\n{\r\n    // typedef unsigned char u8;\r\n\r\n    // Settings\r\n    // bool            Open;                                   // = true   // set to false when DrawWindow() was closed. ignore if not using DrawWindow\r\n    public Open: boolean = false;\r\n    // bool            ReadOnly;                               // = false  // set to true to disable any editing\r\n    public ReadOnly: boolean = false;\r\n    // int             Rows;                                   // = 16     //\r\n    public Rows: number = 16;\r\n    // bool            OptShowAscii;                           // = true   //\r\n    public OptShowAscii: boolean = true;\r\n    // bool            OptShowHexII;                           // = false  //\r\n    public OptShowHexII: boolean = false;\r\n    // bool            OptGreyOutZeroes;                       // = true   //\r\n    public OptGreyOutZeroes: boolean = true;\r\n    // int             OptMidRowsCount;                        // = 8      // set to 0 to disable extra spacing between every mid-rows\r\n    public OptMidRowsCount: number = 8;\r\n    // int             OptAddrDigitsCount;                     // = 0      // number of addr digits to display (default calculated based on maximum displayed addr)\r\n    public OptAddrDigitsCount: number = 0;\r\n    // ImU32           HighlightColor;                         //          // color of highlight\r\n    public HighlightColor: ImU32 = ImGui.IM_COL32(255, 255, 255, 40);\r\n    // u8              (*ReadFn)(u8* data, size_t off);        // = NULL   // optional handler to read bytes\r\n    public ReadFn: ((data: ArrayBuffer, off: number) => number) | null = null\r\n    // void            (*WriteFn)(u8* data, size_t off, u8 d); // = NULL   // optional handler to write bytes\r\n    public WriteFn: ((data: ArrayBuffer, off: number, d: number) => void) | null = null\r\n    // bool            (*HighlightFn)(u8* data, size_t off);   // = NULL   // optional handler to return Highlight property (to support non-contiguous highlighting)\r\n    public HighlightFn: ((data: ArrayBuffer, off: number) => boolean) | null = null;\r\n\r\n    // State/Internals\r\n    // bool            ContentsWidthChanged;\r\n    public ContentsWidthChanged: boolean = false;\r\n    // size_t          DataEditingAddr;\r\n    public DataEditingAddr: number = -1;\r\n    // bool            DataEditingTakeFocus;\r\n    public DataEditingTakeFocus: boolean = false;\r\n    // char            DataInputBuf[32];\r\n    public DataInputBuf: ImStringBuffer = new ImStringBuffer(32, \"\");\r\n    // char            AddrInputBuf[32];\r\n    public AddrInputBuf: ImStringBuffer = new ImStringBuffer(32, \"\");\r\n    // size_t          GotoAddr;\r\n    public GotoAddr: number = -1;\r\n    // size_t          HighlightMin, HighlightMax;\r\n    public HighlightMin: number = -1;\r\n    public HighlightMax: number = -1;\r\n\r\n    public GotoAddrAndHighlight(addr_min: number, addr_max: number): void\r\n    {\r\n        this.GotoAddr = addr_min;\r\n        this.HighlightMin = addr_min;\r\n        this.HighlightMax = addr_max;\r\n    }\r\n\r\n    // struct Sizes\r\n    // {\r\n    //     int     AddrDigitsCount;\r\n    //     float   LineHeight;\r\n    //     float   GlyphWidth;\r\n    //     float   HexCellWidth;\r\n    //     float   SpacingBetweenMidRows;\r\n    //     float   PosHexStart;\r\n    //     float   PosHexEnd;\r\n    //     float   PosAsciiStart;\r\n    //     float   PosAsciiEnd;\r\n    //     float   WindowWidth;\r\n    // };\r\n\r\n    public CalcSizes(s: MemoryEditor.Sizes, mem_size: number, base_display_addr: number): void\r\n    {\r\n        const style: ImGuiStyle = ImGui.GetStyle();\r\n        s.AddrDigitsCount = this.OptAddrDigitsCount;\r\n        if (s.AddrDigitsCount === 0)\r\n            for (let n = base_display_addr + mem_size - 1; n > 0; n >>= 4)\r\n                s.AddrDigitsCount++;\r\n        s.LineHeight = ImGui.GetTextLineHeight();\r\n        s.GlyphWidth = ImGui.CalcTextSize(\"F\").x + 1;                // We assume the font is mono-space\r\n        s.HexCellWidth = Math.floor(s.GlyphWidth * 2.5);             // \"FF \" we include trailing space in the width to easily catch clicks everywhere\r\n        s.SpacingBetweenMidRows = Math.floor(s.HexCellWidth * 0.25); // Every this.OptMidRowsCount columns we add a bit of extra spacing\r\n        s.PosHexStart = (s.AddrDigitsCount + 2) * s.GlyphWidth;\r\n        s.PosHexEnd = s.PosHexStart + (s.HexCellWidth * this.Rows);\r\n        s.PosAsciiStart = s.PosAsciiEnd = s.PosHexEnd;\r\n        if (this.OptShowAscii)\r\n        {\r\n            s.PosAsciiStart = s.PosHexEnd + s.GlyphWidth * 1;\r\n            if (this.OptMidRowsCount > 0)\r\n                s.PosAsciiStart += ((this.Rows + this.OptMidRowsCount - 1) / this.OptMidRowsCount) * s.SpacingBetweenMidRows;\r\n            s.PosAsciiEnd = s.PosAsciiStart + this.Rows * s.GlyphWidth;\r\n        }\r\n        s.WindowWidth = s.PosAsciiEnd + style.ScrollbarSize + style.WindowPadding.x * 2 + s.GlyphWidth;\r\n    }\r\n\r\n    // #ifdef _MSC_VER\r\n    // #define _PRISizeT   \"IX\"\r\n    // #else\r\n    // #define _PRISizeT   \"zX\"\r\n    // #endif\r\n    static sprintf_PRISizeT(n: number, pad: number = 0): string {\r\n        return (\"0\".repeat(pad) + n.toString(16).toUpperCase()).substr(-pad);\r\n    }\r\n\r\n    static sscanf_PRISizeT(s: string): number {\r\n        return parseInt(s, 16);\r\n    }\r\n\r\n    // Standalone Memory Editor window\r\n    public DrawWindow(title: string, mem_data: ArrayBuffer, mem_size: number = mem_data.byteLength, base_display_addr: number = 0x000): void\r\n    {\r\n        const s: MemoryEditor.Sizes = new MemoryEditor.Sizes();\r\n        this.CalcSizes(s, mem_size, base_display_addr);\r\n        // ImGui.SetNextWindowSizeConstraints(new ImVec2(0.0, 0.0), new ImVec2(s.WindowWidth, FLT_MAX));\r\n        ImGui.SetNextWindowSizeConstraints(new ImVec2(0.0, 0.0), new ImVec2(s.WindowWidth, Number.MAX_VALUE));\r\n\r\n        // this.Open = true;\r\n        // if (ImGui.Begin(title, &Open, ImGuiWindowFlags_NoScrollbar))\r\n        if (ImGui.Begin(title, (value = this.Open) => this.Open = value, ImGuiWindowFlags.NoScrollbar))\r\n        {\r\n            if (ImGui.IsWindowHovered(ImGuiHoveredFlags.RootAndChildWindows) && ImGui.IsMouseClicked(1))\r\n                ImGui.OpenPopup(\"context\");\r\n            this.DrawContents(mem_data, mem_size, base_display_addr);\r\n            if (this.ContentsWidthChanged)\r\n            {\r\n                this.CalcSizes(s, mem_size, base_display_addr);\r\n                ImGui.SetWindowSize(new ImVec2(s.WindowWidth, ImGui.GetWindowSize().y));\r\n            }\r\n        }\r\n        ImGui.End();\r\n    }\r\n\r\n    // Memory Editor contents only\r\n    public DrawContents(mem_data: ArrayBuffer, mem_size: number = mem_data.byteLength, base_display_addr: number = 0x0000): void\r\n    {\r\n        const s: MemoryEditor.Sizes = new MemoryEditor.Sizes();\r\n        this.CalcSizes(s, mem_size, base_display_addr);\r\n        const style: ImGuiStyle = ImGui.GetStyle();\r\n\r\n        const footer_height_to_reserve: number = ImGui.GetStyle().ItemSpacing.y + ImGui.GetFrameHeightWithSpacing(); // 1 separator, 1 input text\r\n        ImGui.BeginChild(\"##scrolling\", new ImVec2(0, -footer_height_to_reserve));\r\n        const draw_list: ImDrawList = ImGui.GetWindowDrawList();\r\n\r\n        ImGui.PushStyleVar(ImGui.StyleVar.FramePadding, new ImVec2(0, 0));\r\n        ImGui.PushStyleVar(ImGui.StyleVar.ItemSpacing, new ImVec2(0, 0));\r\n\r\n        const line_total_count: number = 0|((mem_size + this.Rows - 1) / this.Rows);\r\n        const clipper: ImGuiListClipper = new ImGuiListClipper(line_total_count, s.LineHeight);\r\n        const visible_start_addr: number = clipper.DisplayStart * this.Rows;\r\n        const visible_end_addr: number = clipper.DisplayEnd * this.Rows;\r\n\r\n        let data_next: boolean = false;\r\n\r\n        if (this.ReadOnly || this.DataEditingAddr >= mem_size)\r\n            this.DataEditingAddr = -1;\r\n\r\n        const data_editing_addr_backup: number = this.DataEditingAddr;\r\n        let data_editing_addr_next: number = -1;\r\n        if (this.DataEditingAddr !== -1)\r\n        {\r\n            // Move cursor but only apply on next frame so scrolling with be synchronized (because currently we can't change the scrolling while the window is being rendered)\r\n            if (ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.Key.UpArrow)) && this.DataEditingAddr >= this.Rows)          { data_editing_addr_next = this.DataEditingAddr - this.Rows; this.DataEditingTakeFocus = true; }\r\n            else if (ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.Key.DownArrow)) && this.DataEditingAddr < mem_size - this.Rows) { data_editing_addr_next = this.DataEditingAddr + this.Rows; this.DataEditingTakeFocus = true; }\r\n            else if (ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.Key.LeftArrow)) && this.DataEditingAddr > 0)               { data_editing_addr_next = this.DataEditingAddr - 1; this.DataEditingTakeFocus = true; }\r\n            else if (ImGui.IsKeyPressed(ImGui.GetKeyIndex(ImGui.Key.RightArrow)) && this.DataEditingAddr < mem_size - 1)   { data_editing_addr_next = this.DataEditingAddr + 1; this.DataEditingTakeFocus = true; }\r\n        }\r\n        if (data_editing_addr_next !== -1 && (data_editing_addr_next / this.Rows) !== (data_editing_addr_backup / this.Rows))\r\n        {\r\n            // Track cursor movements\r\n            const scroll_offset: number = (0|(data_editing_addr_next / this.Rows) - 0|(data_editing_addr_backup / this.Rows));\r\n            const scroll_desired: boolean = (scroll_offset < 0 && data_editing_addr_next < visible_start_addr + this.Rows * 2) || (scroll_offset > 0 && data_editing_addr_next > visible_end_addr - this.Rows * 2);\r\n            if (scroll_desired)\r\n                ImGui.SetScrollY(ImGui.GetScrollY() + scroll_offset * s.LineHeight);\r\n        }\r\n\r\n        // Draw vertical separator\r\n        const window_pos: ImVec2 = ImGui.GetWindowPos();\r\n        if (this.OptShowAscii)\r\n            draw_list.AddLine(new ImVec2(window_pos.x + s.PosAsciiStart - s.GlyphWidth, window_pos.y), new ImVec2(window_pos.x + s.PosAsciiStart - s.GlyphWidth, window_pos.y + 9999), ImGui.GetColorU32(ImGuiCol.Border));\r\n\r\n        const color_text: ImU32 = ImGui.GetColorU32(ImGuiCol.Text);\r\n        const color_disabled: ImU32 = this.OptGreyOutZeroes ? ImGui.GetColorU32(ImGuiCol.TextDisabled) : color_text;\r\n\r\n        for (let line_i = clipper.DisplayStart; line_i < clipper.DisplayEnd; line_i++) // display only visible lines\r\n        {\r\n            let addr: number = (line_i * this.Rows);\r\n            // ImGui.Text(\"%0*\" _PRISizeT \": \", s.AddrDigitsCount, base_display_addr + addr);\r\n            ImGui.Text(`${MemoryEditor.sprintf_PRISizeT(base_display_addr + addr, s.AddrDigitsCount)}: `);\r\n\r\n            // Draw Hexadecimal\r\n            for (let n = 0; n < this.Rows && addr < mem_size; n++, addr++)\r\n            {\r\n                let byte_pos_x: number = s.PosHexStart + s.HexCellWidth * n;\r\n                if (this.OptMidRowsCount > 0)\r\n                    byte_pos_x += (n / this.OptMidRowsCount) * s.SpacingBetweenMidRows;\r\n                ImGui.SameLine(byte_pos_x);\r\n\r\n                // Draw highlight\r\n                if ((addr >= this.HighlightMin && addr < this.HighlightMax) || (this.HighlightFn && this.HighlightFn(mem_data, addr)))\r\n                {\r\n                    const pos: ImVec2 = ImGui.GetCursorScreenPos();\r\n                    let highlight_width: number = s.GlyphWidth * 2;\r\n                    const is_next_byte_highlighted: boolean = (addr + 1 < mem_size) && ((this.HighlightMax !== -1 && addr + 1 < this.HighlightMax) || (this.HighlightFn && this.HighlightFn(mem_data, addr + 1) || false));\r\n                    if (is_next_byte_highlighted || (n + 1 === this.Rows))\r\n                    {\r\n                        highlight_width = s.HexCellWidth;\r\n                        if (this.OptMidRowsCount > 0 && n > 0 && (n + 1) < this.Rows && ((n + 1) % this.OptMidRowsCount) === 0)\r\n                            highlight_width += s.SpacingBetweenMidRows;\r\n                    }\r\n                    draw_list.AddRectFilled(pos, new ImVec2(pos.x + highlight_width, pos.y + s.LineHeight), this.HighlightColor);\r\n                }\r\n\r\n                if (this.DataEditingAddr === addr)\r\n                {\r\n                    // Display text input on current byte\r\n                    let data_write: boolean = false;\r\n                    ImGui.PushID(addr);\r\n                    // sprintf(AddrInputBuf, \"%0*\" _PRISizeT, s.AddrDigitsCount, base_display_addr + addr);\r\n                    this.AddrInputBuf.buffer = MemoryEditor.sprintf_PRISizeT(base_display_addr + addr, s.AddrDigitsCount);\r\n                    // sprintf(DataInputBuf, \"%02X\", ReadFn ? ReadFn(mem_data, addr) : mem_data[addr]);\r\n                    this.DataInputBuf.buffer = MemoryEditor.sprintf_PRISizeT(this.ReadFn ? this.ReadFn(mem_data, addr) : new Uint8Array(mem_data)[addr], 2);\r\n                    if (this.DataEditingTakeFocus)\r\n                    {\r\n                        ImGui.SetKeyboardFocusHere();\r\n                        ImGui.CaptureKeyboardFromApp(true);\r\n                        // sprintf(AddrInputBuf, \"%0*\" _PRISizeT, s.AddrDigitsCount, base_display_addr + addr);\r\n                        // this.AddrInputBuf.buffer = MemoryEditor.sprintf_PRISizeT(base_display_addr + addr, s.AddrDigitsCount);\r\n                        // sprintf(DataInputBuf, \"%02X\", ReadFn ? ReadFn(mem_data, addr) : mem_data[addr]);\r\n                        // this.DataInputBuf.buffer = MemoryEditor.sprintf_PRISizeT(this.ReadFn ? this.ReadFn(mem_data, addr) : new Uint8Array(mem_data)[addr], 2);\r\n                    }\r\n                    ImGui.PushItemWidth(s.GlyphWidth * 2);\r\n                    // struct UserData\r\n                    // {\r\n                    //     // FIXME: We should have a way to retrieve the text edit cursor position more easily in the API, this is rather tedious. This is such a ugly mess we may be better off not using InputText() at all here.\r\n                    //     static int Callback(ImGuiTextEditCallbackData* data)\r\n                    //     {\r\n                    //         UserData* user_data = (UserData*)data->UserData;\r\n                    //         if (!data->HasSelection())\r\n                    //             user_data->CursorPos = data->CursorPos;\r\n                    //         if (data->SelectionStart === 0 && data->SelectionEnd === data->BufTextLen)\r\n                    //         {\r\n                    //             // When not editing a byte, always rewrite its content (this is a bit tricky, since InputText technically \"owns\" the master copy of the buffer we edit it in there)\r\n                    //             data->DeleteChars(0, data->BufTextLen);\r\n                    //             data->InsertChars(0, user_data->CurrentBufOverwrite);\r\n                    //             data->SelectionStart = 0;\r\n                    //             data->SelectionEnd = data->CursorPos = 2;\r\n                    //         }\r\n                    //         return 0;\r\n                    //     }\r\n                    //     char   CurrentBufOverwrite[3];  // Input\r\n                    //     int    CursorPos;               // Output\r\n                    // };\r\n                    // FIXME: We should have a way to retrieve the text edit cursor position more easily in the API, this is rather tedious. This is such a ugly mess we may be better off not using InputText() at all here.\r\n                    function UserData_Callback(data: ImGuiInputTextCallbackData): number\r\n                    {\r\n                        const user_data: UserData = data.UserData;\r\n                        if (!data.HasSelection())\r\n                            user_data.CursorPos = data.CursorPos;\r\n                        if (data.SelectionStart === 0 && data.SelectionEnd === data.BufTextLen)\r\n                        {\r\n                            // When not editing a byte, always rewrite its content (this is a bit tricky, since InputText technically \"owns\" the master copy of the buffer we edit it in there)\r\n                            data.DeleteChars(0, data.BufTextLen);\r\n                            data.InsertChars(0, user_data.CurrentBufOverwrite);\r\n                            data.SelectionStart = 0;\r\n                            data.SelectionEnd = data.CursorPos = 2;\r\n                        }\r\n                        return 0;\r\n                    }\r\n                    interface UserData {\r\n                        CurrentBufOverwrite: string;  // Input\r\n                        CursorPos: number;            // Output\r\n                    }\r\n                    // UserData user_data;\r\n                    // user_data.CursorPos = -1;\r\n                    const user_data: UserData = {\r\n                        CurrentBufOverwrite: \"\",\r\n                        CursorPos: -1\r\n                    };\r\n                    // sprintf(user_data.CurrentBufOverwrite, \"%02X\", ReadFn ? ReadFn(mem_data, addr) : mem_data[addr]);\r\n                    user_data.CurrentBufOverwrite = MemoryEditor.sprintf_PRISizeT(this.ReadFn ? this.ReadFn(mem_data, addr) : new Uint8Array(mem_data)[addr], 2);\r\n                    const flags: ImGui.InputTextFlags = ImGui.InputTextFlags.CharsHexadecimal | ImGui.InputTextFlags.EnterReturnsTrue | ImGui.InputTextFlags.AutoSelectAll | ImGui.InputTextFlags.NoHorizontalScroll | ImGui.InputTextFlags.AlwaysInsertMode | ImGui.InputTextFlags.CallbackAlways;\r\n                    // if (ImGui.InputText(\"##data\", DataInputBuf, 32, flags, UserData::Callback, &user_data))\r\n                    if (ImGui.InputText(\"##data\", this.DataInputBuf, this.DataInputBuf.size, flags, UserData_Callback, user_data))\r\n                        data_write = data_next = true;\r\n                    else if (!this.DataEditingTakeFocus && !ImGui.IsItemActive())\r\n                        this.DataEditingAddr = data_editing_addr_next = -1;\r\n                    this.DataEditingTakeFocus = false;\r\n                    ImGui.PopItemWidth();\r\n                    if (user_data.CursorPos >= 2)\r\n                        data_write = data_next = true;\r\n                    if (data_editing_addr_next !== -1)\r\n                        data_write = data_next = false;\r\n                    // int data_input_value;\r\n                    // if (data_write && sscanf(DataInputBuf, \"%X\", &data_input_value) === 1)\r\n                    if (data_write)\r\n                    {\r\n                        let data_input_value: number = MemoryEditor.sscanf_PRISizeT(this.DataInputBuf.buffer);\r\n                        if (this.WriteFn)\r\n                            // WriteFn(mem_data, addr, (u8)data_input_value);\r\n                            this.WriteFn(mem_data, addr, data_input_value);\r\n                        else\r\n                            // mem_data[addr] = (u8)data_input_value;\r\n                            new Uint8Array(mem_data)[addr] = data_input_value;\r\n                    }\r\n                    ImGui.PopID();\r\n                }\r\n                else\r\n                {\r\n                    // NB: The trailing space is not visible but ensure there's no gap that the mouse cannot click on.\r\n                    // u8 b = ReadFn ? ReadFn(mem_data, addr) : mem_data[addr];\r\n                    const b: number = this.ReadFn ? this.ReadFn(mem_data, addr) : new Uint8Array(mem_data)[addr];\r\n\r\n                    if (this.OptShowHexII)\r\n                    {\r\n                        if ((b >= 32 && b < 128))\r\n                            // ImGui.Text(\".%c \", b);\r\n                            ImGui.Text(`.${String.fromCharCode(b)} `);\r\n                        else if (b === 0xFF && this.OptGreyOutZeroes)\r\n                            ImGui.TextDisabled(\"## \");\r\n                        else if (b === 0x00)\r\n                            ImGui.Text(\"   \");\r\n                        else\r\n                            // ImGui.Text(\"%02X \", b);\r\n                            // ImGui.Text(`${(\"00\" + b.toString(16).toUpperCase()).substr(-2)} `);\r\n                            ImGui.Text(`${MemoryEditor.sprintf_PRISizeT(b, 2)} `);\r\n                    }\r\n                    else\r\n                    {\r\n                        if (b === 0 && this.OptGreyOutZeroes)\r\n                            ImGui.TextDisabled(\"00 \");\r\n                        else\r\n                            // ImGui.Text(\"%02X \", b);\r\n                            // ImGui.Text(`${(\"00\" + b.toString(16).toUpperCase()).substr(-2)} `);\r\n                            ImGui.Text(`${MemoryEditor.sprintf_PRISizeT(b, 2)} `);\r\n                    }\r\n                    if (!this.ReadOnly && ImGui.IsItemHovered() && ImGui.IsMouseClicked(0))\r\n                    {\r\n                        this.DataEditingTakeFocus = true;\r\n                        data_editing_addr_next = addr;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.OptShowAscii)\r\n            {\r\n                // Draw ASCII values\r\n                ImGui.SameLine(s.PosAsciiStart);\r\n                const pos: ImVec2 = ImGui.GetCursorScreenPos();\r\n                addr = line_i * this.Rows;\r\n                ImGui.PushID(line_i);\r\n                if (ImGui.InvisibleButton(\"ascii\", new ImVec2(s.PosAsciiEnd - s.PosAsciiStart, s.LineHeight)))\r\n                {\r\n                    this.DataEditingAddr = addr + ((ImGui.GetIO().MousePos.x - pos.x) / s.GlyphWidth);\r\n                    this.DataEditingTakeFocus = true;\r\n                }\r\n                ImGui.PopID();\r\n                for (let n = 0; n < this.Rows && addr < mem_size; n++, addr++)\r\n                {\r\n                    if (addr === this.DataEditingAddr)\r\n                    {\r\n                        draw_list.AddRectFilled(pos, new ImVec2(pos.x + s.GlyphWidth, pos.y + s.LineHeight), ImGui.GetColorU32(ImGuiCol.FrameBg));\r\n                        draw_list.AddRectFilled(pos, new ImVec2(pos.x + s.GlyphWidth, pos.y + s.LineHeight), ImGui.GetColorU32(ImGuiCol.TextSelectedBg));\r\n                    }\r\n                    // unsigned char c = ReadFn ? ReadFn(mem_data, addr) : mem_data[addr];\r\n                    const c: number = this.ReadFn ? this.ReadFn(mem_data, addr) : new Uint8Array(mem_data)[addr];\r\n                    // char display_c = (c < 32 || c >= 128) ? '.' : c;\r\n                    const display_c: string = (c < 32 || c >= 128) ? \".\" : String.fromCharCode(c);\r\n                    // draw_list->AddText(pos, (display_c === '.') ? color_disabled : color_text, &display_c, &display_c + 1);\r\n                    draw_list.AddText(pos, (display_c === \".\") ? color_disabled : color_text, display_c);\r\n                    pos.x += s.GlyphWidth;\r\n                }\r\n            }\r\n        }\r\n        clipper.End();\r\n        clipper.delete();\r\n        ImGui.PopStyleVar(2);\r\n        ImGui.EndChild();\r\n\r\n        if (data_next && this.DataEditingAddr < mem_size)\r\n        {\r\n            this.DataEditingAddr = this.DataEditingAddr + 1;\r\n            this.DataEditingTakeFocus = true;\r\n        }\r\n        else if (data_editing_addr_next !== -1)\r\n        {\r\n            this.DataEditingAddr = data_editing_addr_next;\r\n        }\r\n\r\n        ImGui.Separator();\r\n\r\n        // Options menu\r\n        if (ImGui.Button(\"Options\"))\r\n            ImGui.OpenPopup(\"context\");\r\n        if (ImGui.BeginPopup(\"context\"))\r\n        {\r\n            ImGui.PushItemWidth(56);\r\n            // if (ImGui.DragInt(\"##rows\", &Rows, 0.2f, 4, 32, \"%.0f rows\")) ContentsWidthChanged = true;\r\n            if (ImGui.DragInt(\"##rows\", (_ = this.Rows) => this.Rows = _, 0.2, 4, 32, \"%.0f rows\")) this.ContentsWidthChanged = true;\r\n            ImGui.PopItemWidth();\r\n            // ImGui.Checkbox(\"Show HexII\", &OptShowHexII);\r\n            ImGui.Checkbox(\"Show HexII\", (_ = this.OptShowHexII) => this.OptShowHexII = _);\r\n            // if (ImGui.Checkbox(\"Show Ascii\", &this.OptShowAscii)) ContentsWidthChanged = true;\r\n            if (ImGui.Checkbox(\"Show Ascii\", (_ = this.OptShowAscii) => this.OptShowAscii = _)) this.ContentsWidthChanged = true;\r\n            // ImGui.Checkbox(\"Grey out zeroes\", &OptGreyOutZeroes);\r\n            ImGui.Checkbox(\"Grey out zeroes\", (_ = this.OptGreyOutZeroes) => this.OptGreyOutZeroes = _);\r\n            ImGui.EndPopup();\r\n        }\r\n\r\n        ImGui.SameLine();\r\n        // ImGui.Text(\"Range %0*\" _PRISizeT \"..%0*\" _PRISizeT, s.AddrDigitsCount, base_display_addr, s.AddrDigitsCount, base_display_addr + mem_size - 1);\r\n        ImGui.Text(`Range ${MemoryEditor.sprintf_PRISizeT(base_display_addr, s.AddrDigitsCount)}..${MemoryEditor.sprintf_PRISizeT(base_display_addr + mem_size - 1, s.AddrDigitsCount)}`);\r\n        ImGui.SameLine();\r\n        ImGui.PushItemWidth((s.AddrDigitsCount + 1) * s.GlyphWidth + style.FramePadding.x * 2.0);\r\n        // if (ImGui.InputText(\"##addr\", AddrInputBuf, 32, ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_EnterReturnsTrue))\r\n        if (ImGui.InputText(\"##addr\", this.AddrInputBuf, this.AddrInputBuf.size, ImGui.InputTextFlags.CharsHexadecimal | ImGui.InputTextFlags.EnterReturnsTrue))\r\n        {\r\n            // size_t goto_addr;\r\n            const goto_addr: number = MemoryEditor.sscanf_PRISizeT(this.AddrInputBuf.buffer);\r\n            console.log(\"goto_addr\", goto_addr.toString(16));\r\n            // if (sscanf(AddrInputBuf, \"%\" _PRISizeT, &goto_addr) === 1)\r\n            // {\r\n                this.GotoAddr = goto_addr - base_display_addr;\r\n                this.HighlightMin = this.HighlightMax = -1;\r\n            // }\r\n        }\r\n        ImGui.PopItemWidth();\r\n\r\n        if (this.GotoAddr !== -1)\r\n        {\r\n            if (this.GotoAddr < mem_size)\r\n            {\r\n                ImGui.BeginChild(\"##scrolling\");\r\n                ImGui.SetScrollFromPosY(ImGui.GetCursorStartPos().y + (this.GotoAddr / this.Rows) * ImGui.GetTextLineHeight());\r\n                ImGui.EndChild();\r\n                this.DataEditingAddr = this.GotoAddr;\r\n                this.DataEditingTakeFocus = true;\r\n            }\r\n            this.GotoAddr = -1;\r\n        }\r\n\r\n        // Notify the main window of our ideal child content size (FIXME: we are missing an API to get the contents size from the child)\r\n        ImGui.SetCursorPosX(s.WindowWidth);\r\n    }\r\n}\r\n\r\nexport namespace MemoryEditor {\r\n    export class Sizes {\r\n        public AddrDigitsCount: number /* int */ = 0;\r\n        public LineHeight: number /* float */ = 0.0;\r\n        public GlyphWidth: number /* float */ = 0.0;\r\n        public HexCellWidth: number /* float */ = 0.0;\r\n        public SpacingBetweenMidRows: number /* float */ = 0.0;\r\n        public PosHexStart: number /* float */ = 0.0;\r\n        public PosHexEnd: number /* float */ = 0.0;\r\n        public PosAsciiStart: number /* float */ = 0.0;\r\n        public PosAsciiEnd: number /* float */ = 0.0;\r\n        public WindowWidth: number /* float */ = 0.0;\r\n    }\r\n}\r\n\r\n// #undef _PRISizeT","import * as ImGui from \"../imgui\";\r\nimport * as ImGui_Impl from \"./imgui_impl\";\r\n\r\nimport { ImVec2 } from \"../imgui\";\r\nimport { ImVec4 } from \"../imgui\";\r\nimport { ImGuiIO } from \"../imgui\";\r\nimport { ShowDemoWindow } from \"../imgui_demo\";\r\n\r\nimport { MemoryEditor } from \"../imgui_memory_editor\";\r\n\r\nlet font: ImGui.ImFont | null = null;\r\n\r\nlet show_demo_window: boolean = true;\r\nlet show_another_window: boolean = false;\r\nconst clear_color: ImVec4 = new ImVec4(0.45, 0.55, 0.60, 1.00);\r\n\r\nconst memory_editor: MemoryEditor = new MemoryEditor();\r\n\r\nlet show_sandbox_window: boolean = false;\r\nlet show_gamepad_window: boolean = false;\r\nlet show_movie_window: boolean = false;\r\n\r\n/* static */ let f: number = 0.0;\r\n/* static */ let counter: number = 0;\r\n\r\nlet done: boolean = false;\r\n\r\nasync function LoadArrayBuffer(url: string): Promise<ArrayBuffer> {\r\n    const response: Response = await fetch(url);\r\n    return response.arrayBuffer();\r\n}\r\n\r\nexport default async function main(): Promise<void> {\r\n    await ImGui.default();\r\n    if (typeof(window) !== \"undefined\") {\r\n        window.requestAnimationFrame(_init);\r\n    } else {\r\n        async function _main(): Promise<void> {\r\n            await _init();\r\n            for (let i = 0; i < 3; ++i) { _loop(1 / 60); }\r\n            await _done();\r\n        }\r\n        _main().catch(console.error);\r\n    }\r\n}\r\n\r\nasync function AddFontFromFileTTF(url: string, size_pixels: number, font_cfg: ImGui.ImFontConfig | null = null, glyph_ranges: number | null = null): Promise<ImGui.ImFont> {\r\n    font_cfg = font_cfg || new ImGui.ImFontConfig();\r\n    font_cfg.Name = font_cfg.Name || `${url.split(/[\\\\\\/]/).pop()}, ${size_pixels.toFixed(0)}px`;\r\n    return ImGui.GetIO().Fonts.AddFontFromMemoryTTF(await LoadArrayBuffer(url), size_pixels, font_cfg, glyph_ranges);\r\n}\r\n\r\nasync function _init(): Promise<void> {\r\n    console.log(\"Total allocated space (uordblks) @ _init:\", ImGui.bind.mallinfo().uordblks);\r\n\r\n    // Setup Dear ImGui binding\r\n    ImGui.IMGUI_CHECKVERSION();\r\n    ImGui.CreateContext();\r\n\r\n    const io: ImGuiIO = ImGui.GetIO();\r\n    // io.ConfigFlags |= ImGui.ConfigFlags.NavEnableKeyboard;  // Enable Keyboard Controls\r\n\r\n    // Setup style\r\n    ImGui.StyleColorsDark();\r\n    //ImGui.StyleColorsClassic();\r\n\r\n    // Load Fonts\r\n    // - If no fonts are loaded, dear imgui will use the default font. You can also load multiple fonts and use ImGui::PushFont()/PopFont() to select them.\r\n    // - AddFontFromFileTTF() will return the ImFont* so you can store it if you need to select the font among multiple.\r\n    // - If the file cannot be loaded, the function will return NULL. Please handle those errors in your application (e.g. use an assertion, or display an error and quit).\r\n    // - The fonts will be rasterized at a given size (w/ oversampling) and stored into a texture when calling ImFontAtlas::Build()/GetTexDataAsXXXX(), which ImGui_ImplXXXX_NewFrame below will call.\r\n    // - Read 'misc/fonts/README.txt' for more instructions and details.\r\n    // - Remember that in C/C++ if you want to include a backslash \\ in a string literal you need to write a double backslash \\\\ !\r\n    io.Fonts.AddFontDefault();\r\n    // font = await AddFontFromFileTTF(\"../imgui/misc/fonts/Roboto-Medium.ttf\", 16.0);\r\n    // font = await AddFontFromFileTTF(\"../imgui/misc/fonts/Cousine-Regular.ttf\", 15.0);\r\n    // font = await AddFontFromFileTTF(\"../imgui/misc/fonts/DroidSans.ttf\", 16.0);\r\n    // font = await AddFontFromFileTTF(\"../imgui/misc/fonts/ProggyTiny.ttf\", 10.0);\r\n    // font = await AddFontFromFileTTF(\"c:\\\\Windows\\\\Fonts\\\\ArialUni.ttf\", 18.0, null, io.Fonts.GetGlyphRangesJapanese());\r\n    // font = await AddFontFromFileTTF(\"https://raw.githubusercontent.com/googlei18n/noto-cjk/master/NotoSansJP-Regular.otf\", 18.0, null, io.Fonts.GetGlyphRangesJapanese());\r\n    // ImGui.IM_ASSERT(font !== null);\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        const output: HTMLElement = document.getElementById(\"output\") || document.body;\r\n        const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n        output.appendChild(canvas);\r\n        canvas.tabIndex = 1;\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.left = \"0px\";\r\n        canvas.style.right = \"0px\";\r\n        canvas.style.top = \"0px\";\r\n        canvas.style.bottom = \"0px\";\r\n        canvas.style.width = \"100%\";\r\n        canvas.style.height = \"100%\";\r\n        ImGui_Impl.Init(canvas);\r\n    } else {\r\n        ImGui_Impl.Init(null);\r\n    }\r\n\r\n    StartUpImage();\r\n    StartUpVideo();\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        window.requestAnimationFrame(_loop);\r\n    }\r\n}\r\n\r\n// Main loop\r\nfunction _loop(time: number): void {\r\n    // Poll and handle events (inputs, window resize, etc.)\r\n    // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to tell if dear imgui wants to use your inputs.\r\n    // - When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application.\r\n    // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application.\r\n    // Generally you may always pass all inputs to dear imgui, and hide them from your application based on those two flags.\r\n\r\n    // Start the Dear ImGui frame\r\n    ImGui_Impl.NewFrame(time);\r\n    ImGui.NewFrame();\r\n\r\n    // 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).\r\n    if (!done && show_demo_window) {\r\n        done = /*ImGui.*/ShowDemoWindow((value = show_demo_window) => show_demo_window = value);\r\n    }\r\n\r\n    // 2. Show a simple window that we create ourselves. We use a Begin/End pair to created a named window.\r\n    {\r\n        // static float f = 0.0f;\r\n        // static int counter = 0;\r\n\r\n        ImGui.Begin(\"Hello, world!\");                          // Create a window called \"Hello, world!\" and append into it.\r\n\r\n        ImGui.Text(\"This is some useful text.\");               // Display some text (you can use a format strings too)\r\n        ImGui.Checkbox(\"Demo Window\", (value = show_demo_window) => show_demo_window = value);      // Edit bools storing our windows open/close state\r\n        ImGui.Checkbox(\"Another Window\", (value = show_another_window) => show_another_window = value);\r\n\r\n        ImGui.SliderFloat(\"float\", (value = f) => f = value, 0.0, 1.0);            // Edit 1 float using a slider from 0.0f to 1.0f\r\n        ImGui.ColorEdit3(\"clear color\", clear_color); // Edit 3 floats representing a color\r\n\r\n        if (ImGui.Button(\"Button\"))                            // Buttons return true when clicked (NB: most widgets return true when edited/activated)\r\n            counter++;\r\n        ImGui.SameLine();\r\n        ImGui.Text(`counter = ${counter}`);\r\n\r\n        ImGui.Text(`Application average ${(1000.0 / ImGui.GetIO().Framerate).toFixed(3)} ms/frame (${ImGui.GetIO().Framerate.toFixed(1)} FPS)`);\r\n\r\n        ImGui.Checkbox(\"Memory Editor\", (value = memory_editor.Open) => memory_editor.Open = value);\r\n        if (memory_editor.Open)\r\n            memory_editor.DrawWindow(\"Memory Editor\", ImGui.bind.HEAP8.buffer);\r\n        const mi: ImGui.Bind.mallinfo = ImGui.bind.mallinfo();\r\n        // ImGui.Text(`Total non-mmapped bytes (arena):       ${mi.arena}`);\r\n        // ImGui.Text(`# of free chunks (ordblks):            ${mi.ordblks}`);\r\n        // ImGui.Text(`# of free fastbin blocks (smblks):     ${mi.smblks}`);\r\n        // ImGui.Text(`# of mapped regions (hblks):           ${mi.hblks}`);\r\n        // ImGui.Text(`Bytes in mapped regions (hblkhd):      ${mi.hblkhd}`);\r\n        ImGui.Text(`Max. total allocated space (usmblks):  ${mi.usmblks}`);\r\n        // ImGui.Text(`Free bytes held in fastbins (fsmblks): ${mi.fsmblks}`);\r\n        ImGui.Text(`Total allocated space (uordblks):      ${mi.uordblks}`);\r\n        ImGui.Text(`Total free space (fordblks):           ${mi.fordblks}`);\r\n        // ImGui.Text(`Topmost releasable block (keepcost):   ${mi.keepcost}`);\r\n        if (ImGui.ImageButton(image_gl_texture, new ImVec2(48, 48))) {\r\n            // show_demo_window = !show_demo_window;\r\n            image_url = image_urls[(image_urls.indexOf(image_url) + 1) % image_urls.length];\r\n            if (image_element) {\r\n                image_element.src = image_url;\r\n            }\r\n        }\r\n        if (ImGui.IsItemHovered()) {\r\n            ImGui.BeginTooltip();\r\n            ImGui.Text(image_url);\r\n            ImGui.EndTooltip();\r\n        }\r\n        if (ImGui.Button(\"Sandbox Window\")) { show_sandbox_window = true; }\r\n        if (show_sandbox_window)\r\n            ShowSandboxWindow(\"Sandbox Window\", (value = show_sandbox_window) => show_sandbox_window = value);\r\n        ImGui.SameLine();\r\n        if (ImGui.Button(\"Gamepad Window\")) { show_gamepad_window = true; }\r\n        if (show_gamepad_window)\r\n            ShowGamepadWindow(\"Gamepad Window\", (value = show_gamepad_window) => show_gamepad_window = value);\r\n        ImGui.SameLine();\r\n        if (ImGui.Button(\"Movie Window\")) { show_movie_window = true; }\r\n        if (show_movie_window)\r\n            ShowMovieWindow(\"Movie Window\", (value = show_movie_window) => show_movie_window = value);\r\n\r\n        if (font) {\r\n            ImGui.PushFont(font);\r\n            ImGui.Text(`${font.GetDebugName()}`);\r\n            if (font.FindGlyphNoFallback(0x5929)) {\r\n                ImGui.Text(`U+5929: \\u5929`);\r\n            }\r\n            ImGui.PopFont();\r\n        }\r\n\r\n        ImGui.End();\r\n    }\r\n\r\n    // 3. Show another simple window.\r\n    if (show_another_window) {\r\n        ImGui.Begin(\"Another Window\", (value = show_another_window) => show_another_window = value, ImGui.WindowFlags.AlwaysAutoResize);\r\n        ImGui.Text(\"Hello from another window!\");\r\n        if (ImGui.Button(\"Close Me\"))\r\n            show_another_window = false;\r\n        ImGui.End();\r\n    }\r\n\r\n    ImGui.EndFrame();\r\n\r\n    // Rendering\r\n    ImGui.Render();\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        gl.clearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        //gl.useProgram(0); // You may want this if using this code in an OpenGL 3+ context where shaders may be bound\r\n    }\r\n\r\n    const ctx: CanvasRenderingContext2D | null = ImGui_Impl.ctx;\r\n    if (ctx) {\r\n        // ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.fillStyle = `rgba(${clear_color.x * 0xff}, ${clear_color.y * 0xff}, ${clear_color.z * 0xff}, ${clear_color.w})`;\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    }\r\n\r\n    UpdateVideo();\r\n\r\n    ImGui_Impl.RenderDrawData(ImGui.GetDrawData());\r\n\r\n    if (typeof(window) !== \"undefined\") {\r\n        window.requestAnimationFrame(done ? _done : _loop);\r\n    }\r\n}\r\n\r\nasync function _done(): Promise<void> {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n        gl.clearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    const ctx: CanvasRenderingContext2D | null = ImGui_Impl.ctx;\r\n    if (ctx) {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    }\r\n\r\n    CleanUpImage();\r\n    CleanUpVideo();\r\n\r\n    // Cleanup\r\n    ImGui_Impl.Shutdown();\r\n    ImGui.DestroyContext();\r\n\r\n    console.log(\"Total allocated space (uordblks) @ _done:\", ImGui.bind.mallinfo().uordblks);\r\n}\r\n\r\nfunction ShowHelpMarker(desc: string): void {\r\n    ImGui.TextDisabled(\"(?)\");\r\n    if (ImGui.IsItemHovered()) {\r\n        ImGui.BeginTooltip();\r\n        ImGui.PushTextWrapPos(ImGui.GetFontSize() * 35.0);\r\n        ImGui.TextUnformatted(desc);\r\n        ImGui.PopTextWrapPos();\r\n        ImGui.EndTooltip();\r\n    }\r\n}\r\n\r\nlet source: string = [\r\n    \"ImGui.Text(\\\"Hello, world!\\\");\",\r\n    \"ImGui.SliderFloat(\\\"float\\\",\",\r\n    \"\\t(value = f) => f = value,\",\r\n    \"\\t0.0, 1.0);\",\r\n    \"\",\r\n].join(\"\\n\");\r\n\r\nfunction ShowSandboxWindow(title: string, p_open: ImGui.ImAccess<boolean> | null = null): void {\r\n    ImGui.SetNextWindowSize(new ImVec2(320, 240), ImGui.Cond.FirstUseEver);\r\n    ImGui.Begin(title, p_open);\r\n    ImGui.Text(\"Source\");\r\n    ImGui.SameLine(); ShowHelpMarker(\"Contents evaluated and appended to the window.\");\r\n    ImGui.PushItemWidth(-1);\r\n    ImGui.InputTextMultiline(\"##source\", (_ = source) => (source = _), 1024, ImVec2.ZERO, ImGui.InputTextFlags.AllowTabInput);\r\n    ImGui.PopItemWidth();\r\n    try {\r\n        eval(source);\r\n    } catch (e) {\r\n        ImGui.TextColored(new ImVec4(1.0, 0.0, 0.0, 1.0), \"error: \");\r\n        ImGui.SameLine();\r\n        ImGui.Text(e.message);\r\n    }\r\n    ImGui.End();\r\n}\r\n\r\nfunction ShowGamepadWindow(title: string, p_open: ImGui.ImAccess<boolean> | null = null): void {\r\n    ImGui.Begin(title, p_open, ImGui.WindowFlags.AlwaysAutoResize);\r\n    const gamepads: (Gamepad | null)[] = (typeof(navigator) !== \"undefined\" && typeof(navigator.getGamepads) === \"function\") ? navigator.getGamepads() : [];\r\n    if (gamepads.length > 0) {\r\n        for (let i = 0; i < gamepads.length; ++i) {\r\n            const gamepad: Gamepad | null = gamepads[i];\r\n            ImGui.Text(`gamepad ${i} ${gamepad && gamepad.id}`);\r\n            if (!gamepad) { continue; }\r\n            ImGui.Text(`       `);\r\n            for (let button = 0; button < gamepad.buttons.length; ++button) {\r\n                ImGui.SameLine(); ImGui.Text(`${button.toString(16)}`);\r\n            }\r\n            ImGui.Text(`buttons`);\r\n            for (let button = 0; button < gamepad.buttons.length; ++button) {\r\n                ImGui.SameLine(); ImGui.Text(`${gamepad.buttons[button].value}`);\r\n            }\r\n            ImGui.Text(`axes`);\r\n            for (let axis = 0; axis < gamepad.axes.length; ++axis) {\r\n                ImGui.Text(`${axis}: ${gamepad.axes[axis].toFixed(2)}`);\r\n            }\r\n        }\r\n    } else {\r\n        ImGui.Text(\"connect a gamepad\");\r\n    }\r\n    ImGui.End();\r\n}\r\n\r\nconst image_urls: string[] = [\r\n    \"https://threejs.org/examples/textures/crate.gif\",\r\n    \"https://threejs.org/examples/textures/sprite.png\",\r\n    \"https://threejs.org/examples/textures/UV_Grid_Sm.jpg\",\r\n];\r\nlet image_url: string = image_urls[0];\r\nlet image_element: HTMLImageElement | null = null;\r\nlet image_gl_texture: WebGLTexture | null = null;\r\n\r\nfunction StartUpImage(): void {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        const width: number = 256;\r\n        const height: number = 256;\r\n        const pixels: Uint8Array = new Uint8Array(4 * width * height);\r\n        image_gl_texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, image_gl_texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n\r\n        const image: HTMLImageElement = image_element = new Image();\r\n        image.crossOrigin = \"anonymous\";\r\n        image.addEventListener(\"load\", (event: Event) => {\r\n            gl.bindTexture(gl.TEXTURE_2D, image_gl_texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n        });\r\n        image.src = image_url;\r\n    }\r\n}\r\n\r\nfunction CleanUpImage(): void {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        gl.deleteTexture(image_gl_texture); image_gl_texture = null;\r\n\r\n        image_element = null;\r\n    }\r\n}\r\n\r\nconst video_urls: string[] = [\r\n    \"https://threejs.org/examples/textures/sintel.ogv\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerMeltdowns.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/VolkswagenGTIReview.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WeAreGoingOnBullrun.mp4\",\r\n    \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/WhatCarCanYouGetForAGrand.mp4\",\r\n];\r\nlet video_url: string = video_urls[0];\r\nlet video_element: HTMLVideoElement | null = null;\r\nlet video_gl_texture: WebGLTexture | null = null;\r\nlet video_w: number = 640;\r\nlet video_h: number = 360;\r\nlet video_time_active: boolean = false;\r\nlet video_time: number = 0;\r\nlet video_duration: number = 0;\r\n\r\nfunction StartUpVideo(): void {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        video_element = document.createElement(\"video\");\r\n        video_element.crossOrigin = \"anonymous\";\r\n        video_element.src = video_url;\r\n        video_element.load();\r\n\r\n        const width: number = 256;\r\n        const height: number = 256;\r\n        const pixels: Uint8Array = new Uint8Array(4 * width * height);\r\n        video_gl_texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, video_gl_texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    }\r\n}\r\n\r\nfunction CleanUpVideo(): void {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl) {\r\n        gl.deleteTexture(video_gl_texture); video_gl_texture = null;\r\n\r\n        video_element = null;\r\n    }\r\n}\r\n\r\nfunction UpdateVideo(): void {\r\n    const gl: WebGLRenderingContext | null = ImGui_Impl.gl;\r\n    if (gl && video_element && video_element.readyState >= video_element.HAVE_CURRENT_DATA) {\r\n        gl.bindTexture(gl.TEXTURE_2D, video_gl_texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video_element);\r\n    }\r\n}\r\n\r\nfunction ShowMovieWindow(title: string, p_open: ImGui.ImAccess<boolean> | null = null): void {\r\n    ImGui.Begin(title, p_open, ImGui.WindowFlags.AlwaysAutoResize);\r\n    if (video_element !== null) {\r\n        if (p_open && !p_open()) {\r\n            video_element.pause();\r\n        }\r\n        const w: number = video_element.videoWidth;\r\n        const h: number = video_element.videoHeight;\r\n        if (w > 0) { video_w = w; }\r\n        if (h > 0) { video_h = h; }\r\n\r\n        ImGui.BeginGroup();\r\n        if (ImGui.BeginCombo(\"##urls\", null, ImGui.ComboFlags.NoPreview | ImGui.ComboFlags.PopupAlignLeft)) {\r\n            for (let n = 0; n < ImGui.IM_ARRAYSIZE(video_urls); n++) {\r\n                if (ImGui.Selectable(video_urls[n])) {\r\n                    video_url = video_urls[n];\r\n                    console.log(video_url);\r\n                    video_element.src = video_url;\r\n                    video_element.autoplay = true;\r\n                }\r\n            }\r\n            ImGui.EndCombo();\r\n        }\r\n        ImGui.SameLine();\r\n        ImGui.PushItemWidth(video_w - 20);\r\n        if (ImGui.InputText(\"##url\", (value = video_url) => video_url = value)) {\r\n            console.log(video_url);\r\n            video_element.src = video_url;\r\n        }\r\n        ImGui.PopItemWidth();\r\n        ImGui.EndGroup();\r\n\r\n        if (ImGui.ImageButton(video_gl_texture, new ImVec2(video_w, video_h))) {\r\n            if (video_element.readyState >= video_element.HAVE_CURRENT_DATA) {\r\n                video_element.paused ? video_element.play() : video_element.pause();\r\n            }\r\n        }\r\n\r\n        ImGui.BeginGroup();\r\n        if (ImGui.Button(video_element.paused ? \"Play\" : \"Stop\")) {\r\n            if (video_element.readyState >= video_element.HAVE_CURRENT_DATA) {\r\n                video_element.paused ? video_element.play() : video_element.pause();\r\n            }\r\n        }\r\n        ImGui.SameLine();\r\n        if (!video_time_active) {\r\n            video_time = video_element.currentTime;\r\n            video_duration = video_element.duration || 0;\r\n        }\r\n        ImGui.SliderFloat(\"##time\", (value = video_time) => video_time = value, 0, video_duration);\r\n        const video_time_was_active: boolean = video_time_active;\r\n        video_time_active = ImGui.IsItemActive();\r\n        if (!video_time_active && video_time_was_active) {\r\n            video_element.currentTime = video_time;\r\n        }\r\n        ImGui.EndGroup();\r\n    } else {\r\n        ImGui.Text(\"No Video Element\");\r\n    }\r\n    ImGui.End();\r\n}\r\n","import main from \"./main.js\";\r\nmain();"]}